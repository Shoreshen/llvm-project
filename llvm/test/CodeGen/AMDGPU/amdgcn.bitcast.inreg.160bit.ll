; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=S_SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=S_VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=S_GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 < %s | FileCheck -check-prefix=S_GFX11 %s

define inreg <5 x float> @bitcast_v5i32_to_v5f32_inreg(<5 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v5i32_to_v5f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s21, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB0_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB0_3
; S_SI-NEXT:  .LBB0_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:  .LBB0_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    v_mov_b32_e32 v4, s20
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB0_4:
; S_SI-NEXT:    s_branch .LBB0_2
;
; S_VI-LABEL: bitcast_v5i32_to_v5f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB0_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB0_3
; S_VI-NEXT:  .LBB0_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB0_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB0_4:
; S_VI-NEXT:    s_branch .LBB0_2
;
; S_GFX9-LABEL: bitcast_v5i32_to_v5f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB0_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB0_3
; S_GFX9-NEXT:  .LBB0_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB0_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB0_4:
; S_GFX9-NEXT:    s_branch .LBB0_2
;
; S_GFX11-LABEL: bitcast_v5i32_to_v5f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB0_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB0_3
; S_GFX11-NEXT:  .LBB0_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB0_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s16
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB0_4:
; S_GFX11-NEXT:    s_branch .LBB0_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <5 x i32> %a, splat (i32 3)
  %a2 = bitcast <5 x i32> %a1 to <5 x float>
  br label %end

cmp.false:
  %a3 = bitcast <5 x i32> %a to <5 x float>
  br label %end

end:
  %phi = phi <5 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <5 x float> %phi
}

define inreg <5 x i32> @bitcast_v5f32_to_v5i32_inreg(<5 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v5f32_to_v5i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s21, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB1_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB1_4
; S_SI-NEXT:  .LBB1_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v4, s20, 1.0
; S_SI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_SI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB1_3:
; S_SI-NEXT:    s_branch .LBB1_2
; S_SI-NEXT:  .LBB1_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    v_mov_b32_e32 v4, s20
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v5f32_to_v5i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB1_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB1_4
; S_VI-NEXT:  .LBB1_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v4, s20, 1.0
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB1_3:
; S_VI-NEXT:    s_branch .LBB1_2
; S_VI-NEXT:  .LBB1_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v5f32_to_v5i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB1_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB1_4
; S_GFX9-NEXT:  .LBB1_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v4, s20, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB1_3:
; S_GFX9-NEXT:    s_branch .LBB1_2
; S_GFX9-NEXT:  .LBB1_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v5f32_to_v5i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s5, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB1_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s5
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB1_4
; S_GFX11-NEXT:  .LBB1_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v4, s4, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB1_3:
; S_GFX11-NEXT:    s_branch .LBB1_2
; S_GFX11-NEXT:  .LBB1_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s4
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <5 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <5 x float> %a1 to <5 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <5 x float> %a to <5 x i32>
  br label %end

end:
  %phi = phi <5 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <5 x i32> %phi
}

define inreg <10 x i16> @bitcast_v5i32_to_v10i16_inreg(<5 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v5i32_to_v10i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s21, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB2_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s20
; S_SI-NEXT:    v_alignbit_b32 v9, s4, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s6, s19, 16
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB2_3
; S_SI-NEXT:  .LBB2_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s20
; S_SI-NEXT:    v_alignbit_b32 v9, s4, v0, 16
; S_SI-NEXT:    s_lshr_b32 s6, s19, 16
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:  .LBB2_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v2, s17
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    v_mov_b32_e32 v4, s18
; S_SI-NEXT:    v_mov_b32_e32 v6, s19
; S_SI-NEXT:    v_mov_b32_e32 v7, s6
; S_SI-NEXT:    v_mov_b32_e32 v8, s20
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB2_4:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    s_branch .LBB2_2
;
; S_VI-LABEL: bitcast_v5i32_to_v10i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB2_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB2_3
; S_VI-NEXT:  .LBB2_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB2_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB2_4:
; S_VI-NEXT:    s_branch .LBB2_2
;
; S_GFX9-LABEL: bitcast_v5i32_to_v10i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB2_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB2_3
; S_GFX9-NEXT:  .LBB2_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB2_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB2_4:
; S_GFX9-NEXT:    s_branch .LBB2_2
;
; S_GFX11-LABEL: bitcast_v5i32_to_v10i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB2_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB2_3
; S_GFX11-NEXT:  .LBB2_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB2_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s16
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB2_4:
; S_GFX11-NEXT:    s_branch .LBB2_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <5 x i32> %a, splat (i32 3)
  %a2 = bitcast <5 x i32> %a1 to <10 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <5 x i32> %a to <10 x i16>
  br label %end

end:
  %phi = phi <10 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i16> %phi
}

define inreg <5 x i32> @bitcast_v10i16_to_v5i32_inreg(<10 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v10i16_to_v5i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s26, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB3_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_and_b32 s8, s24, 0xffff
; S_SI-NEXT:    s_lshl_b32 s9, s25, 16
; S_SI-NEXT:    s_or_b32 s8, s8, s9
; S_SI-NEXT:    s_cbranch_execnz .LBB3_3
; S_SI-NEXT:  .LBB3_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_and_b32 s8, s24, 0xffff
; S_SI-NEXT:    s_lshl_b32 s9, s25, 16
; S_SI-NEXT:    s_or_b32 s8, s9, s8
; S_SI-NEXT:    s_add_i32 s4, s4, 0x30000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x30000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x30000
; S_SI-NEXT:    s_add_i32 s7, s7, 0x30000
; S_SI-NEXT:    s_add_i32 s8, s8, 0x30000
; S_SI-NEXT:  .LBB3_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    v_mov_b32_e32 v4, s8
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB3_4:
; S_SI-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7_sgpr8
; S_SI-NEXT:    s_branch .LBB3_2
;
; S_VI-LABEL: bitcast_v10i16_to_v5i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB3_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB3_3
; S_VI-NEXT:  .LBB3_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_add_i32 s13, s20, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s12, s20, 0xffff0000
; S_VI-NEXT:    s_and_b32 s13, s13, 0xffff
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s12, s12, s13
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s20, s12, 0x30000
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB3_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB3_4:
; S_VI-NEXT:    s_branch .LBB3_2
;
; S_GFX9-LABEL: bitcast_v10i16_to_v5i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB3_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB3_4
; S_GFX9-NEXT:  .LBB3_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v4, s20, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB3_3:
; S_GFX9-NEXT:    s_branch .LBB3_2
; S_GFX9-NEXT:  .LBB3_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v10i16_to_v5i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s5, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB3_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s5
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB3_4
; S_GFX11-NEXT:  .LBB3_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v4, s4, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB3_3:
; S_GFX11-NEXT:    s_branch .LBB3_2
; S_GFX11-NEXT:  .LBB3_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s4
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i16> %a, splat (i16 3)
  %a2 = bitcast <10 x i16> %a1 to <5 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i16> %a to <5 x i32>
  br label %end

end:
  %phi = phi <5 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <5 x i32> %phi
}

define inreg <10 x half> @bitcast_v5i32_to_v10f16_inreg(<5 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v5i32_to_v10f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s21, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB4_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_lshr_b32 s4, s20, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v9, s4
; S_SI-NEXT:    s_lshr_b32 s4, s19, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_lshr_b32 s4, s18, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_lshr_b32 s4, s17, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v8, s20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    s_cbranch_execnz .LBB4_3
; S_SI-NEXT:  .LBB4_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_lshr_b32 s4, s20, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v9, s4
; S_SI-NEXT:    s_lshr_b32 s4, s19, 16
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_lshr_b32 s4, s18, 16
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_lshr_b32 s4, s17, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v8, s20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:  .LBB4_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB4_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr8
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    s_branch .LBB4_2
;
; S_VI-LABEL: bitcast_v5i32_to_v10f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB4_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB4_3
; S_VI-NEXT:  .LBB4_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB4_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB4_4:
; S_VI-NEXT:    s_branch .LBB4_2
;
; S_GFX9-LABEL: bitcast_v5i32_to_v10f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB4_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB4_3
; S_GFX9-NEXT:  .LBB4_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB4_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB4_4:
; S_GFX9-NEXT:    s_branch .LBB4_2
;
; S_GFX11-LABEL: bitcast_v5i32_to_v10f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB4_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB4_3
; S_GFX11-NEXT:  .LBB4_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB4_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s16
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB4_4:
; S_GFX11-NEXT:    s_branch .LBB4_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <5 x i32> %a, splat (i32 3)
  %a2 = bitcast <5 x i32> %a1 to <10 x half>
  br label %end

cmp.false:
  %a3 = bitcast <5 x i32> %a to <10 x half>
  br label %end

end:
  %phi = phi <10 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x half> %phi
}

define inreg <5 x i32> @bitcast_v10f16_to_v5i32_inreg(<10 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v10f16_to_v5i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v14, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v13, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v12, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v11, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v10, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s22
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s25
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s24
; S_SI-NEXT:    s_cmp_lg_u32 s26, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB5_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v14
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v12
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v10
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v6
; S_SI-NEXT:    v_or_b32_e32 v0, v13, v0
; S_SI-NEXT:    v_or_b32_e32 v1, v11, v1
; S_SI-NEXT:    v_or_b32_e32 v2, v9, v2
; S_SI-NEXT:    v_or_b32_e32 v3, v7, v3
; S_SI-NEXT:    v_or_b32_e32 v4, v5, v4
; S_SI-NEXT:    s_cbranch_execnz .LBB5_3
; S_SI-NEXT:  .LBB5_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v14
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v13
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v12
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v11
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v9
; S_SI-NEXT:    v_or_b32_e32 v0, v1, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v10
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_or_b32_e32 v1, v3, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v2
; S_SI-NEXT:    v_or_b32_e32 v2, v4, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_add_f32_e32 v6, 0x38000000, v6
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, v6
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v6
; S_SI-NEXT:    v_or_b32_e32 v4, v5, v4
; S_SI-NEXT:  .LBB5_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB5_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4
; S_SI-NEXT:    s_branch .LBB5_2
;
; S_VI-LABEL: bitcast_v10f16_to_v5i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB5_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB5_4
; S_VI-NEXT:  .LBB5_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s20, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s20, v0
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_or_b32_e32 v4, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s19, v0
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_or_b32_e32 v3, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v5, s17, v0
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_or_b32_e32 v1, v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v5, s4
; S_VI-NEXT:    v_add_f16_sdwa v5, v5, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v0, s16, v0
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v5
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB5_3:
; S_VI-NEXT:    s_branch .LBB5_2
; S_VI-NEXT:  .LBB5_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v10f16_to_v5i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB5_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB5_4
; S_GFX9-NEXT:  .LBB5_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v4, s20, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB5_3:
; S_GFX9-NEXT:    s_branch .LBB5_2
; S_GFX9-NEXT:  .LBB5_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v10f16_to_v5i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s5, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB5_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s5
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB5_4
; S_GFX11-NEXT:  .LBB5_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v4, 0x200, s4 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB5_3:
; S_GFX11-NEXT:    s_branch .LBB5_2
; S_GFX11-NEXT:  .LBB5_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s4
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <10 x half> %a1 to <5 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <10 x half> %a to <5 x i32>
  br label %end

end:
  %phi = phi <5 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <5 x i32> %phi
}

define inreg <10 x i16> @bitcast_v5f32_to_v10i16_inreg(<5 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v5f32_to_v10i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s21, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB6_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s20
; S_SI-NEXT:    v_alignbit_b32 v9, s4, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    s_lshr_b32 s6, s17, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB6_4
; S_SI-NEXT:  .LBB6_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v8, s20, 1.0
; S_SI-NEXT:    v_add_f32_e64 v2, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    v_add_f32_e64 v6, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v4, s18, 1.0
; S_SI-NEXT:    v_alignbit_b32 v5, v6, v4, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s4, v8, 16
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v6
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v2
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB6_3:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    s_branch .LBB6_2
; S_SI-NEXT:  .LBB6_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v2, s17
; S_SI-NEXT:    v_mov_b32_e32 v4, s18
; S_SI-NEXT:    v_mov_b32_e32 v6, s19
; S_SI-NEXT:    v_mov_b32_e32 v8, s20
; S_SI-NEXT:    v_mov_b32_e32 v3, s6
; S_SI-NEXT:    v_mov_b32_e32 v7, s7
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v5f32_to_v10i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB6_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB6_4
; S_VI-NEXT:  .LBB6_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v4, s20, 1.0
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB6_3:
; S_VI-NEXT:    s_branch .LBB6_2
; S_VI-NEXT:  .LBB6_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    v_mov_b32_e32 v5, s21
; S_VI-NEXT:    v_mov_b32_e32 v6, s22
; S_VI-NEXT:    v_mov_b32_e32 v7, s23
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v5f32_to_v10i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB6_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB6_4
; S_GFX9-NEXT:  .LBB6_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v4, s20, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB6_3:
; S_GFX9-NEXT:    s_branch .LBB6_2
; S_GFX9-NEXT:  .LBB6_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s23
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v5f32_to_v10i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB6_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB6_4
; S_GFX11-NEXT:  .LBB6_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v4, s4, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB6_3:
; S_GFX11-NEXT:    s_branch .LBB6_2
; S_GFX11-NEXT:  .LBB6_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v4, s4 :: v_dual_mov_b32 v5, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v6, s6 :: v_dual_mov_b32 v7, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <5 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <5 x float> %a1 to <10 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <5 x float> %a to <10 x i16>
  br label %end

end:
  %phi = phi <10 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i16> %phi
}

define inreg <5 x float> @bitcast_v10i16_to_v5f32_inreg(<10 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v10i16_to_v5f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s26, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB7_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_and_b32 s8, s24, 0xffff
; S_SI-NEXT:    s_lshl_b32 s9, s25, 16
; S_SI-NEXT:    s_or_b32 s8, s8, s9
; S_SI-NEXT:    s_cbranch_execnz .LBB7_3
; S_SI-NEXT:  .LBB7_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_and_b32 s8, s24, 0xffff
; S_SI-NEXT:    s_lshl_b32 s9, s25, 16
; S_SI-NEXT:    s_or_b32 s8, s9, s8
; S_SI-NEXT:    s_add_i32 s4, s4, 0x30000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x30000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x30000
; S_SI-NEXT:    s_add_i32 s7, s7, 0x30000
; S_SI-NEXT:    s_add_i32 s8, s8, 0x30000
; S_SI-NEXT:  .LBB7_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    v_mov_b32_e32 v4, s8
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB7_4:
; S_SI-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7_sgpr8
; S_SI-NEXT:    s_branch .LBB7_2
;
; S_VI-LABEL: bitcast_v10i16_to_v5f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB7_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB7_3
; S_VI-NEXT:  .LBB7_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_add_i32 s13, s20, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s12, s20, 0xffff0000
; S_VI-NEXT:    s_and_b32 s13, s13, 0xffff
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s12, s12, s13
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s20, s12, 0x30000
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB7_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB7_4:
; S_VI-NEXT:    s_branch .LBB7_2
;
; S_GFX9-LABEL: bitcast_v10i16_to_v5f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB7_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB7_4
; S_GFX9-NEXT:  .LBB7_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v4, s20, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB7_3:
; S_GFX9-NEXT:    s_branch .LBB7_2
; S_GFX9-NEXT:  .LBB7_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v10i16_to_v5f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s5, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB7_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s5
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB7_4
; S_GFX11-NEXT:  .LBB7_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v4, s4, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB7_3:
; S_GFX11-NEXT:    s_branch .LBB7_2
; S_GFX11-NEXT:  .LBB7_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s4
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i16> %a, splat (i16 3)
  %a2 = bitcast <10 x i16> %a1 to <5 x float>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i16> %a to <5 x float>
  br label %end

end:
  %phi = phi <5 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <5 x float> %phi
}

define inreg <10 x half> @bitcast_v5f32_to_v10f16_inreg(<5 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v5f32_to_v10f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s21, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB8_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_lshr_b32 s4, s20, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v9, s4
; S_SI-NEXT:    s_lshr_b32 s4, s19, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_lshr_b32 s4, s18, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_lshr_b32 s4, s17, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v8, s20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    s_cbranch_execnz .LBB8_3
; S_SI-NEXT:  .LBB8_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v1, s16, 1.0
; S_SI-NEXT:    v_add_f32_e64 v3, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v5, s18, 1.0
; S_SI-NEXT:    v_add_f32_e64 v7, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v9, s20, 1.0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v8, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v1
; S_SI-NEXT:    v_lshrrev_b32_e32 v9, 16, v9
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v7
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v9, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v1
; S_SI-NEXT:  .LBB8_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB8_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr8
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    s_branch .LBB8_2
;
; S_VI-LABEL: bitcast_v5f32_to_v10f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB8_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB8_4
; S_VI-NEXT:  .LBB8_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v4, s20, 1.0
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB8_3:
; S_VI-NEXT:    s_branch .LBB8_2
; S_VI-NEXT:  .LBB8_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    v_mov_b32_e32 v5, s21
; S_VI-NEXT:    v_mov_b32_e32 v6, s22
; S_VI-NEXT:    v_mov_b32_e32 v7, s23
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v5f32_to_v10f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB8_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB8_4
; S_GFX9-NEXT:  .LBB8_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v4, s20, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB8_3:
; S_GFX9-NEXT:    s_branch .LBB8_2
; S_GFX9-NEXT:  .LBB8_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s23
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v5f32_to_v10f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB8_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB8_4
; S_GFX11-NEXT:  .LBB8_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v4, s4, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB8_3:
; S_GFX11-NEXT:    s_branch .LBB8_2
; S_GFX11-NEXT:  .LBB8_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v4, s4 :: v_dual_mov_b32 v5, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v6, s6 :: v_dual_mov_b32 v7, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <5 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <5 x float> %a1 to <10 x half>
  br label %end

cmp.false:
  %a3 = bitcast <5 x float> %a to <10 x half>
  br label %end

end:
  %phi = phi <10 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x half> %phi
}

define inreg <5 x float> @bitcast_v10f16_to_v5f32_inreg(<10 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v10f16_to_v5f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v14, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v13, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v12, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v11, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v10, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s22
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s25
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s24
; S_SI-NEXT:    s_cmp_lg_u32 s26, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB9_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v14
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v12
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v10
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v6
; S_SI-NEXT:    v_or_b32_e32 v0, v13, v0
; S_SI-NEXT:    v_or_b32_e32 v1, v11, v1
; S_SI-NEXT:    v_or_b32_e32 v2, v9, v2
; S_SI-NEXT:    v_or_b32_e32 v3, v7, v3
; S_SI-NEXT:    v_or_b32_e32 v4, v5, v4
; S_SI-NEXT:    s_cbranch_execnz .LBB9_3
; S_SI-NEXT:  .LBB9_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v14
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v13
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v12
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v11
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v9
; S_SI-NEXT:    v_or_b32_e32 v0, v1, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v10
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_or_b32_e32 v1, v3, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v2
; S_SI-NEXT:    v_or_b32_e32 v2, v4, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_add_f32_e32 v6, 0x38000000, v6
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, v6
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v6
; S_SI-NEXT:    v_or_b32_e32 v4, v5, v4
; S_SI-NEXT:  .LBB9_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB9_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4
; S_SI-NEXT:    s_branch .LBB9_2
;
; S_VI-LABEL: bitcast_v10f16_to_v5f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB9_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB9_4
; S_VI-NEXT:  .LBB9_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s20, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s20, v0
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_or_b32_e32 v4, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s19, v0
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_or_b32_e32 v3, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v5, s17, v0
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_or_b32_e32 v1, v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v5, s4
; S_VI-NEXT:    v_add_f16_sdwa v5, v5, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v0, s16, v0
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v5
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB9_3:
; S_VI-NEXT:    s_branch .LBB9_2
; S_VI-NEXT:  .LBB9_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v10f16_to_v5f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB9_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB9_4
; S_GFX9-NEXT:  .LBB9_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v4, s20, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB9_3:
; S_GFX9-NEXT:    s_branch .LBB9_2
; S_GFX9-NEXT:  .LBB9_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v10f16_to_v5f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s5, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB9_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s5
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB9_4
; S_GFX11-NEXT:  .LBB9_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v4, 0x200, s4 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB9_3:
; S_GFX11-NEXT:    s_branch .LBB9_2
; S_GFX11-NEXT:  .LBB9_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_mov_b32_e32 v4, s4
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <10 x half> %a1 to <5 x float>
  br label %end

cmp.false:
  %a3 = bitcast <10 x half> %a to <5 x float>
  br label %end

end:
  %phi = phi <5 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <5 x float> %phi
}

define inreg <10 x half> @bitcast_v10i16_to_v10f16_inreg(<10 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v10i16_to_v10f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s26, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB10_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s21
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s22
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s23
; S_SI-NEXT:    v_cvt_f32_f16_e32 v8, s24
; S_SI-NEXT:    v_cvt_f32_f16_e32 v9, s25
; S_SI-NEXT:    s_cbranch_execnz .LBB10_3
; S_SI-NEXT:  .LBB10_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s25, s25, 3
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_add_i32 s23, s23, 3
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_add_i32 s21, s21, 3
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s21
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s22
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s23
; S_SI-NEXT:    v_cvt_f32_f16_e32 v8, s24
; S_SI-NEXT:    v_cvt_f32_f16_e32 v9, s25
; S_SI-NEXT:  .LBB10_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB10_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr8
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    s_branch .LBB10_2
;
; S_VI-LABEL: bitcast_v10i16_to_v10f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB10_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB10_3
; S_VI-NEXT:  .LBB10_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_add_i32 s13, s20, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s12, s20, 0xffff0000
; S_VI-NEXT:    s_and_b32 s13, s13, 0xffff
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s12, s12, s13
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s20, s12, 0x30000
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB10_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB10_4:
; S_VI-NEXT:    s_branch .LBB10_2
;
; S_GFX9-LABEL: bitcast_v10i16_to_v10f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB10_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB10_4
; S_GFX9-NEXT:  .LBB10_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v4, s20, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB10_3:
; S_GFX9-NEXT:    s_branch .LBB10_2
; S_GFX9-NEXT:  .LBB10_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s23
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v10i16_to_v10f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB10_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB10_4
; S_GFX11-NEXT:  .LBB10_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v4, s4, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB10_3:
; S_GFX11-NEXT:    s_branch .LBB10_2
; S_GFX11-NEXT:  .LBB10_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v4, s4 :: v_dual_mov_b32 v5, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v6, s6 :: v_dual_mov_b32 v7, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i16> %a, splat (i16 3)
  %a2 = bitcast <10 x i16> %a1 to <10 x half>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i16> %a to <10 x half>
  br label %end

end:
  %phi = phi <10 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x half> %phi
}

define inreg <10 x i16> @bitcast_v10f16_to_v10i16_inreg(<10 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v10f16_to_v10i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s22
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s24
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s25
; S_SI-NEXT:    s_cmp_lg_u32 s26, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB11_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB11_3
; S_SI-NEXT:  .LBB11_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v9, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v8, v8
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_add_f32_e32 v9, 0x38000000, v9
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, v9
; S_SI-NEXT:    v_add_f32_e32 v8, 0x38000000, v8
; S_SI-NEXT:    v_add_f32_e32 v7, 0x38000000, v7
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, v8
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, v7
; S_SI-NEXT:    v_add_f32_e32 v6, 0x38000000, v6
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, v6
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_lshlrev_b32_e32 v10, 16, v9
; S_SI-NEXT:    v_or_b32_e32 v8, v8, v10
; S_SI-NEXT:    v_lshlrev_b32_e32 v10, 16, v7
; S_SI-NEXT:    v_or_b32_e32 v6, v6, v10
; S_SI-NEXT:    v_lshlrev_b32_e32 v10, 16, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v2, v2, v10
; S_SI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_SI-NEXT:    v_or_b32_e32 v4, v4, v5
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v1, 16
; S_SI-NEXT:    v_alignbit_b32 v5, v6, v5, 16
; S_SI-NEXT:  .LBB11_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB11_4:
; S_SI-NEXT:    s_branch .LBB11_2
;
; S_VI-LABEL: bitcast_v10f16_to_v10i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s21, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB11_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB11_4
; S_VI-NEXT:  .LBB11_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_mov_b32_e32 v2, s4
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_mov_b32_e32 v3, s4
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v4, s4
; S_VI-NEXT:    s_lshr_b32 s4, s20, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v10, s4
; S_VI-NEXT:    v_add_f16_e32 v5, s16, v0
; S_VI-NEXT:    v_add_f16_sdwa v6, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v1, s17, v0
; S_VI-NEXT:    v_add_f16_sdwa v7, v2, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    v_add_f16_sdwa v8, v3, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v3, s19, v0
; S_VI-NEXT:    v_add_f16_sdwa v9, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v4, s20, v0
; S_VI-NEXT:    v_add_f16_sdwa v0, v10, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v4, v4, v0
; S_VI-NEXT:    v_or_b32_e32 v3, v3, v9
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v8
; S_VI-NEXT:    v_or_b32_e32 v1, v1, v7
; S_VI-NEXT:    v_or_b32_e32 v0, v5, v6
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB11_3:
; S_VI-NEXT:    s_branch .LBB11_2
; S_VI-NEXT:  .LBB11_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    v_mov_b32_e32 v4, s20
; S_VI-NEXT:    v_mov_b32_e32 v5, s21
; S_VI-NEXT:    v_mov_b32_e32 v6, s22
; S_VI-NEXT:    v_mov_b32_e32 v7, s23
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v10f16_to_v10i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s21, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB11_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB11_4
; S_GFX9-NEXT:  .LBB11_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v4, s20, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB11_3:
; S_GFX9-NEXT:    s_branch .LBB11_2
; S_GFX9-NEXT:  .LBB11_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s23
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v10f16_to_v10i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_mov_b32 s4, s16
; S_GFX11-NEXT:    s_cmp_lg_u32 s17, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB11_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB11_4
; S_GFX11-NEXT:  .LBB11_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v4, 0x200, s4 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB11_3:
; S_GFX11-NEXT:    s_branch .LBB11_2
; S_GFX11-NEXT:  .LBB11_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v4, s4 :: v_dual_mov_b32 v5, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v6, s6 :: v_dual_mov_b32 v7, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <10 x half> %a1 to <10 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <10 x half> %a to <10 x i16>
  br label %end

end:
  %phi = phi <10 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i16> %phi
}
