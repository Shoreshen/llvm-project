; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=S_SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=S_VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=S_GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 < %s | FileCheck -check-prefix=S_GFX11 %s

define inreg <4 x float> @bitcast_v4i32_to_v4f32_inreg(<4 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4i32_to_v4f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB0_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB0_3
; S_SI-NEXT:  .LBB0_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:  .LBB0_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB0_4:
; S_SI-NEXT:    s_branch .LBB0_2
;
; S_VI-LABEL: bitcast_v4i32_to_v4f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB0_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB0_3
; S_VI-NEXT:  .LBB0_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB0_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB0_4:
; S_VI-NEXT:    s_branch .LBB0_2
;
; S_GFX9-LABEL: bitcast_v4i32_to_v4f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB0_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB0_3
; S_GFX9-NEXT:  .LBB0_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB0_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB0_4:
; S_GFX9-NEXT:    s_branch .LBB0_2
;
; S_GFX11-LABEL: bitcast_v4i32_to_v4f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB0_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB0_3
; S_GFX11-NEXT:  .LBB0_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB0_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB0_4:
; S_GFX11-NEXT:    s_branch .LBB0_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i32> %a, splat (i32 3)
  %a2 = bitcast <4 x i32> %a1 to <4 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i32> %a to <4 x float>
  br label %end

end:
  %phi = phi <4 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x float> %phi
}

define inreg <4 x i32> @bitcast_v4f32_to_v4i32_inreg(<4 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4f32_to_v4i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB1_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB1_4
; S_SI-NEXT:  .LBB1_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_SI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB1_3:
; S_SI-NEXT:    s_branch .LBB1_2
; S_SI-NEXT:  .LBB1_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v4f32_to_v4i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB1_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB1_4
; S_VI-NEXT:  .LBB1_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB1_3:
; S_VI-NEXT:    s_branch .LBB1_2
; S_VI-NEXT:  .LBB1_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v4f32_to_v4i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB1_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB1_4
; S_GFX9-NEXT:  .LBB1_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB1_3:
; S_GFX9-NEXT:    s_branch .LBB1_2
; S_GFX9-NEXT:  .LBB1_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v4f32_to_v4i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB1_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB1_4
; S_GFX11-NEXT:  .LBB1_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB1_3:
; S_GFX11-NEXT:    s_branch .LBB1_2
; S_GFX11-NEXT:  .LBB1_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <4 x float> %a1 to <4 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x float> %a to <4 x i32>
  br label %end

end:
  %phi = phi <4 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i32> %phi
}

define inreg <2 x i64> @bitcast_v4i32_to_v2i64_inreg(<4 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4i32_to_v2i64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB2_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB2_3
; S_SI-NEXT:  .LBB2_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:  .LBB2_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB2_4:
; S_SI-NEXT:    s_branch .LBB2_2
;
; S_VI-LABEL: bitcast_v4i32_to_v2i64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB2_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB2_3
; S_VI-NEXT:  .LBB2_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB2_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB2_4:
; S_VI-NEXT:    s_branch .LBB2_2
;
; S_GFX9-LABEL: bitcast_v4i32_to_v2i64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB2_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB2_3
; S_GFX9-NEXT:  .LBB2_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB2_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB2_4:
; S_GFX9-NEXT:    s_branch .LBB2_2
;
; S_GFX11-LABEL: bitcast_v4i32_to_v2i64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB2_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB2_3
; S_GFX11-NEXT:  .LBB2_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB2_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB2_4:
; S_GFX11-NEXT:    s_branch .LBB2_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i32> %a, splat (i32 3)
  %a2 = bitcast <4 x i32> %a1 to <2 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i32> %a to <2 x i64>
  br label %end

end:
  %phi = phi <2 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i64> %phi
}

define inreg <4 x i32> @bitcast_v2i64_to_v4i32_inreg(<2 x i64> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2i64_to_v4i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB3_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB3_3
; S_SI-NEXT:  .LBB3_2: ; %cmp.true
; S_SI-NEXT:    s_add_u32 s18, s18, 3
; S_SI-NEXT:    s_addc_u32 s19, s19, 0
; S_SI-NEXT:    s_add_u32 s16, s16, 3
; S_SI-NEXT:    s_addc_u32 s17, s17, 0
; S_SI-NEXT:  .LBB3_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB3_4:
; S_SI-NEXT:    s_branch .LBB3_2
;
; S_VI-LABEL: bitcast_v2i64_to_v4i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB3_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB3_3
; S_VI-NEXT:  .LBB3_2: ; %cmp.true
; S_VI-NEXT:    s_add_u32 s18, s18, 3
; S_VI-NEXT:    s_addc_u32 s19, s19, 0
; S_VI-NEXT:    s_add_u32 s16, s16, 3
; S_VI-NEXT:    s_addc_u32 s17, s17, 0
; S_VI-NEXT:  .LBB3_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB3_4:
; S_VI-NEXT:    s_branch .LBB3_2
;
; S_GFX9-LABEL: bitcast_v2i64_to_v4i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB3_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB3_3
; S_GFX9-NEXT:  .LBB3_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_u32 s18, s18, 3
; S_GFX9-NEXT:    s_addc_u32 s19, s19, 0
; S_GFX9-NEXT:    s_add_u32 s16, s16, 3
; S_GFX9-NEXT:    s_addc_u32 s17, s17, 0
; S_GFX9-NEXT:  .LBB3_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB3_4:
; S_GFX9-NEXT:    s_branch .LBB3_2
;
; S_GFX11-LABEL: bitcast_v2i64_to_v4i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB3_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB3_3
; S_GFX11-NEXT:  .LBB3_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_u32 s2, s2, 3
; S_GFX11-NEXT:    s_addc_u32 s3, s3, 0
; S_GFX11-NEXT:    s_add_u32 s0, s0, 3
; S_GFX11-NEXT:    s_addc_u32 s1, s1, 0
; S_GFX11-NEXT:  .LBB3_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB3_4:
; S_GFX11-NEXT:    s_branch .LBB3_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i64> %a, splat (i64 3)
  %a2 = bitcast <2 x i64> %a1 to <4 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i64> %a to <4 x i32>
  br label %end

end:
  %phi = phi <4 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i32> %phi
}

define inreg <2 x double> @bitcast_v4i32_to_v2f64_inreg(<4 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4i32_to_v2f64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB4_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB4_3
; S_SI-NEXT:  .LBB4_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:  .LBB4_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB4_4:
; S_SI-NEXT:    s_branch .LBB4_2
;
; S_VI-LABEL: bitcast_v4i32_to_v2f64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB4_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB4_3
; S_VI-NEXT:  .LBB4_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB4_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB4_4:
; S_VI-NEXT:    s_branch .LBB4_2
;
; S_GFX9-LABEL: bitcast_v4i32_to_v2f64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB4_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB4_3
; S_GFX9-NEXT:  .LBB4_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB4_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB4_4:
; S_GFX9-NEXT:    s_branch .LBB4_2
;
; S_GFX11-LABEL: bitcast_v4i32_to_v2f64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB4_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB4_3
; S_GFX11-NEXT:  .LBB4_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB4_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB4_4:
; S_GFX11-NEXT:    s_branch .LBB4_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i32> %a, splat (i32 3)
  %a2 = bitcast <4 x i32> %a1 to <2 x double>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i32> %a to <2 x double>
  br label %end

end:
  %phi = phi <2 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x double> %phi
}

define inreg <4 x i32> @bitcast_v2f64_to_v4i32_inreg(<2 x double> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2f64_to_v4i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB5_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB5_4
; S_SI-NEXT:  .LBB5_2: ; %cmp.true
; S_SI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_SI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB5_3:
; S_SI-NEXT:    s_branch .LBB5_2
; S_SI-NEXT:  .LBB5_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v2f64_to_v4i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB5_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB5_4
; S_VI-NEXT:  .LBB5_2: ; %cmp.true
; S_VI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_VI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB5_3:
; S_VI-NEXT:    s_branch .LBB5_2
; S_VI-NEXT:  .LBB5_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v2f64_to_v4i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB5_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB5_4
; S_GFX9-NEXT:  .LBB5_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_GFX9-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB5_3:
; S_GFX9-NEXT:    s_branch .LBB5_2
; S_GFX9-NEXT:  .LBB5_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v2f64_to_v4i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB5_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB5_4
; S_GFX11-NEXT:  .LBB5_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f64 v[2:3], s[2:3], 1.0
; S_GFX11-NEXT:    v_add_f64 v[0:1], s[0:1], 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB5_3:
; S_GFX11-NEXT:    s_branch .LBB5_2
; S_GFX11-NEXT:  .LBB5_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <2 x double> %a1 to <4 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x double> %a to <4 x i32>
  br label %end

end:
  %phi = phi <4 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i32> %phi
}

define inreg <8 x i16> @bitcast_v4i32_to_v8i16_inreg(<4 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4i32_to_v8i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB6_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s6, s19, 16
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB6_3
; S_SI-NEXT:  .LBB6_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s6, s19, 16
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:  .LBB6_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v2, s17
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    v_mov_b32_e32 v4, s18
; S_SI-NEXT:    v_mov_b32_e32 v6, s19
; S_SI-NEXT:    v_mov_b32_e32 v7, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB6_4:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    s_branch .LBB6_2
;
; S_VI-LABEL: bitcast_v4i32_to_v8i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB6_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB6_3
; S_VI-NEXT:  .LBB6_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB6_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB6_4:
; S_VI-NEXT:    s_branch .LBB6_2
;
; S_GFX9-LABEL: bitcast_v4i32_to_v8i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB6_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB6_3
; S_GFX9-NEXT:  .LBB6_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB6_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB6_4:
; S_GFX9-NEXT:    s_branch .LBB6_2
;
; S_GFX11-LABEL: bitcast_v4i32_to_v8i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB6_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB6_3
; S_GFX11-NEXT:  .LBB6_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB6_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB6_4:
; S_GFX11-NEXT:    s_branch .LBB6_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i32> %a, splat (i32 3)
  %a2 = bitcast <4 x i32> %a1 to <8 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i32> %a to <8 x i16>
  br label %end

end:
  %phi = phi <8 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i16> %phi
}

define inreg <4 x i32> @bitcast_v8i16_to_v4i32_inreg(<8 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8i16_to_v4i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB7_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_cbranch_execnz .LBB7_3
; S_SI-NEXT:  .LBB7_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_add_i32 s4, s4, 0x30000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x30000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x30000
; S_SI-NEXT:    s_add_i32 s7, s7, 0x30000
; S_SI-NEXT:  .LBB7_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB7_4:
; S_SI-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_SI-NEXT:    s_branch .LBB7_2
;
; S_VI-LABEL: bitcast_v8i16_to_v4i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB7_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB7_3
; S_VI-NEXT:  .LBB7_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB7_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB7_4:
; S_VI-NEXT:    s_branch .LBB7_2
;
; S_GFX9-LABEL: bitcast_v8i16_to_v4i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB7_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB7_4
; S_GFX9-NEXT:  .LBB7_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB7_3:
; S_GFX9-NEXT:    s_branch .LBB7_2
; S_GFX9-NEXT:  .LBB7_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8i16_to_v4i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB7_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB7_4
; S_GFX11-NEXT:  .LBB7_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB7_3:
; S_GFX11-NEXT:    s_branch .LBB7_2
; S_GFX11-NEXT:  .LBB7_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i16> %a, splat (i16 3)
  %a2 = bitcast <8 x i16> %a1 to <4 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i16> %a to <4 x i32>
  br label %end

end:
  %phi = phi <4 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i32> %phi
}

define inreg <8 x half> @bitcast_v4i32_to_v8f16_inreg(<4 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4i32_to_v8f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB8_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_lshr_b32 s4, s19, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_lshr_b32 s4, s18, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_lshr_b32 s4, s17, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    s_cbranch_execnz .LBB8_3
; S_SI-NEXT:  .LBB8_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    s_lshr_b32 s5, s17, 16
; S_SI-NEXT:    s_lshr_b32 s6, s18, 16
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:  .LBB8_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB8_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB8_2
;
; S_VI-LABEL: bitcast_v4i32_to_v8f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB8_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB8_3
; S_VI-NEXT:  .LBB8_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB8_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB8_4:
; S_VI-NEXT:    s_branch .LBB8_2
;
; S_GFX9-LABEL: bitcast_v4i32_to_v8f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB8_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB8_3
; S_GFX9-NEXT:  .LBB8_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB8_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB8_4:
; S_GFX9-NEXT:    s_branch .LBB8_2
;
; S_GFX11-LABEL: bitcast_v4i32_to_v8f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB8_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB8_3
; S_GFX11-NEXT:  .LBB8_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB8_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB8_4:
; S_GFX11-NEXT:    s_branch .LBB8_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i32> %a, splat (i32 3)
  %a2 = bitcast <4 x i32> %a1 to <8 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i32> %a to <8 x half>
  br label %end

end:
  %phi = phi <8 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x half> %phi
}

define inreg <4 x i32> @bitcast_v8f16_to_v4i32_inreg(<8 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8f16_to_v4i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v11, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v10, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, s22
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB9_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v11
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v9
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v7
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v0, v10, v0
; S_SI-NEXT:    v_or_b32_e32 v1, v8, v1
; S_SI-NEXT:    v_or_b32_e32 v2, v6, v2
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:    s_cbranch_execnz .LBB9_3
; S_SI-NEXT:  .LBB9_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v11
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v10
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v8
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_or_b32_e32 v0, v1, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_or_b32_e32 v1, v3, v1
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v7
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_or_b32_e32 v2, v2, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:  .LBB9_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB9_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB9_2
;
; S_VI-LABEL: bitcast_v8f16_to_v4i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB9_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB9_4
; S_VI-NEXT:  .LBB9_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s19, v0
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_or_b32_e32 v3, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v4, s17, v0
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_or_b32_e32 v1, v4, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, s4
; S_VI-NEXT:    v_add_f16_sdwa v4, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v0, s16, v0
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v4
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB9_3:
; S_VI-NEXT:    s_branch .LBB9_2
; S_VI-NEXT:  .LBB9_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8f16_to_v4i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB9_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB9_4
; S_GFX9-NEXT:  .LBB9_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB9_3:
; S_GFX9-NEXT:    s_branch .LBB9_2
; S_GFX9-NEXT:  .LBB9_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8f16_to_v4i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB9_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB9_4
; S_GFX11-NEXT:  .LBB9_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB9_3:
; S_GFX11-NEXT:    s_branch .LBB9_2
; S_GFX11-NEXT:  .LBB9_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <8 x half> %a1 to <4 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <8 x half> %a to <4 x i32>
  br label %end

end:
  %phi = phi <4 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i32> %phi
}

define inreg <8 x bfloat> @bitcast_v4i32_to_v8bf16_inreg(<4 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4i32_to_v8bf16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB10_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s6, s19, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s7, s19, 16
; S_SI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s9, s18, 16
; S_SI-NEXT:    s_and_b32 s10, s17, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s11, s17, 16
; S_SI-NEXT:    s_and_b32 s12, s16, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s13, s16, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB10_3
; S_SI-NEXT:  .LBB10_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_and_b32 s6, s19, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s7, s19, 16
; S_SI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s9, s18, 16
; S_SI-NEXT:    s_and_b32 s10, s17, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s11, s17, 16
; S_SI-NEXT:    s_and_b32 s12, s16, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s13, s16, 16
; S_SI-NEXT:  .LBB10_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s13
; S_SI-NEXT:    v_mov_b32_e32 v1, s12
; S_SI-NEXT:    v_mov_b32_e32 v2, s11
; S_SI-NEXT:    v_mov_b32_e32 v3, s10
; S_SI-NEXT:    v_mov_b32_e32 v4, s9
; S_SI-NEXT:    v_mov_b32_e32 v5, s8
; S_SI-NEXT:    v_mov_b32_e32 v6, s7
; S_SI-NEXT:    v_mov_b32_e32 v7, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB10_4:
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    s_branch .LBB10_2
;
; S_VI-LABEL: bitcast_v4i32_to_v8bf16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB10_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB10_3
; S_VI-NEXT:  .LBB10_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:  .LBB10_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB10_4:
; S_VI-NEXT:    s_branch .LBB10_2
;
; S_GFX9-LABEL: bitcast_v4i32_to_v8bf16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB10_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB10_3
; S_GFX9-NEXT:  .LBB10_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:  .LBB10_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB10_4:
; S_GFX9-NEXT:    s_branch .LBB10_2
;
; S_GFX11-LABEL: bitcast_v4i32_to_v8bf16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB10_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB10_3
; S_GFX11-NEXT:  .LBB10_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:  .LBB10_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB10_4:
; S_GFX11-NEXT:    s_branch .LBB10_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i32> %a, splat (i32 3)
  %a2 = bitcast <4 x i32> %a1 to <8 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i32> %a to <8 x bfloat>
  br label %end

end:
  %phi = phi <8 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x bfloat> %phi
}

define inreg <4 x i32> @bitcast_v8bf16_to_v4i32_inreg(<8 x bfloat> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8bf16_to_v4i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    v_mul_f32_e64 v10, 1.0, s17
; S_SI-NEXT:    v_mul_f32_e64 v11, 1.0, s16
; S_SI-NEXT:    v_mul_f32_e64 v8, 1.0, s19
; S_SI-NEXT:    v_mul_f32_e64 v9, 1.0, s18
; S_SI-NEXT:    v_mul_f32_e64 v6, 1.0, s21
; S_SI-NEXT:    v_mul_f32_e64 v7, 1.0, s20
; S_SI-NEXT:    v_mul_f32_e64 v4, 1.0, s23
; S_SI-NEXT:    v_mul_f32_e64 v5, 1.0, s22
; S_SI-NEXT:    s_cbranch_scc0 .LBB11_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v10
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v8
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v6
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v0, v0, v11, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v1, v9, 16
; S_SI-NEXT:    v_alignbit_b32 v2, v2, v7, 16
; S_SI-NEXT:    v_alignbit_b32 v3, v3, v5, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB11_3
; S_SI-NEXT:  .LBB11_2: ; %cmp.true
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v10
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v11
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v8
; S_SI-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v9
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v6
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v1, 16
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v7
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_and_b32_e32 v4, 0xffff0000, v4
; S_SI-NEXT:    v_alignbit_b32 v2, v3, v2, 16
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x40c00000, v4
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v3, 16
; S_SI-NEXT:  .LBB11_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB11_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB11_2
;
; S_VI-LABEL: bitcast_v8bf16_to_v4i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB11_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB11_4
; S_VI-NEXT:  .LBB11_2: ; %cmp.true
; S_VI-NEXT:    s_lshl_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s19, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s18, 16
; S_VI-NEXT:    v_alignbit_b32 v3, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v4, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v2
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v4, v5, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s17, 16
; S_VI-NEXT:    v_alignbit_b32 v2, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s17, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v4, v5, vcc
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_VI-NEXT:    s_lshl_b32 s4, s16, 16
; S_VI-NEXT:    v_alignbit_b32 v1, v4, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_add_f32_e32 v0, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_bfe_u32 v5, v0, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v0
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v0
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v0, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_VI-NEXT:    v_alignbit_b32 v0, v0, v4, 16
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB11_3:
; S_VI-NEXT:    s_branch .LBB11_2
; S_VI-NEXT:  .LBB11_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8bf16_to_v4i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB11_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB11_4
; S_GFX9-NEXT:  .LBB11_2: ; %cmp.true
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s19, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_GFX9-NEXT:    v_mov_b32_e32 v4, 0xffff
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s18
; S_GFX9-NEXT:    v_lshl_or_b32 v3, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s18, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v5, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v2
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v5, v6, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s17
; S_GFX9-NEXT:    v_lshl_or_b32 v2, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v1
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s17, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v6, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v5, v4, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s16
; S_GFX9-NEXT:    v_lshl_or_b32 v1, v1, 16, v5
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_bfe_u32 v6, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v0
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v4, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshl_or_b32 v0, v5, 16, v0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB11_3:
; S_GFX9-NEXT:    s_branch .LBB11_2
; S_GFX9-NEXT:  .LBB11_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8bf16_to_v4i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB11_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB11_4
; S_GFX11-NEXT:  .LBB11_2: ; %cmp.true
; S_GFX11-NEXT:    s_lshl_b32 s4, s3, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s3
; S_GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s4
; S_GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s2
; S_GFX11-NEXT:    s_lshl_b32 s2, s2, 16
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s4
; S_GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v0
; S_GFX11-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, v4, v1
; S_GFX11-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_GFX11-NEXT:    v_add_f32_e64 v5, 0x40c00000, s2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, 0x7fff, v4
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; S_GFX11-NEXT:    v_bfe_u32 v2, v5, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v8, 0x40c00000, s1
; S_GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s0
; S_GFX11-NEXT:    v_cndmask_b32_e32 v1, v4, v6, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v5
; S_GFX11-NEXT:    v_add_f32_e64 v4, 0x40c00000, s3
; S_GFX11-NEXT:    v_or_b32_e32 v13, 0x400000, v8
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v3, v7, v9 :: v_dual_add_nc_u32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v5, v5
; S_GFX11-NEXT:    v_bfe_u32 v7, v4, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v9, 0x40c00000, s0
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v3
; S_GFX11-NEXT:    v_or_b32_e32 v3, 0x400000, v5
; S_GFX11-NEXT:    v_bfe_u32 v5, v8, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v4
; S_GFX11-NEXT:    v_or_b32_e32 v12, 0x400000, v4
; S_GFX11-NEXT:    v_bfe_u32 v11, v9, 16, 1
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v2, v3, vcc_lo
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, v5, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v8, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v11, v11, v9
; S_GFX11-NEXT:    v_bfe_u32 v10, v3, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, 0x7fff, v5
; S_GFX11-NEXT:    v_or_b32_e32 v14, 0x400000, v3
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v8, 0x7fff, v11
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v5, v5, v13 :: v_dual_add_nc_u32 v10, v10, v3
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_or_b32_e32 v11, 0x400000, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, 0x7fff, v10
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX11-NEXT:    v_and_b32_e32 v0, 0xffff, v0
; S_GFX11-NEXT:    v_and_b32_e32 v2, 0xffff, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v3, v10, v14, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v4, v4
; S_GFX11-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; S_GFX11-NEXT:    v_lshl_or_b32 v2, v6, 16, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_GFX11-NEXT:    v_cndmask_b32_e32 v4, v7, v12, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v9, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_GFX11-NEXT:    v_cndmask_b32_e32 v7, v8, v11, vcc_lo
; S_GFX11-NEXT:    v_and_b32_e32 v8, 0xffff, v3
; S_GFX11-NEXT:    v_lshl_or_b32 v3, v1, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshl_or_b32 v1, v4, 16, v5
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 16, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; S_GFX11-NEXT:    v_lshl_or_b32 v0, v7, 16, v8
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB11_3:
; S_GFX11-NEXT:    s_branch .LBB11_2
; S_GFX11-NEXT:  .LBB11_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <8 x bfloat> %a1 to <4 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <8 x bfloat> %a to <4 x i32>
  br label %end

end:
  %phi = phi <4 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i32> %phi
}

define inreg <16 x i8> @bitcast_v4i32_to_v16i8_inreg(<4 x i32> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4i32_to_v16i8_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB12_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v11, s19, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s19, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s19, v0, 8
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v3, s17, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s17, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 8
; S_SI-NEXT:    s_lshr_b32 s6, s19, 24
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    s_lshr_b32 s8, s19, 8
; S_SI-NEXT:    s_lshr_b32 s9, s17, 24
; S_SI-NEXT:    s_lshr_b32 s10, s17, 16
; S_SI-NEXT:    s_lshr_b32 s11, s17, 8
; S_SI-NEXT:    s_cbranch_execnz .LBB12_3
; S_SI-NEXT:  .LBB12_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    v_alignbit_b32 v11, s19, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s19, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s19, v0, 8
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v3, s17, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s17, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 8
; S_SI-NEXT:    s_lshr_b32 s6, s19, 24
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    s_lshr_b32 s8, s19, 8
; S_SI-NEXT:    s_lshr_b32 s9, s17, 24
; S_SI-NEXT:    s_lshr_b32 s10, s17, 16
; S_SI-NEXT:    s_lshr_b32 s11, s17, 8
; S_SI-NEXT:  .LBB12_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v4, s17
; S_SI-NEXT:    v_mov_b32_e32 v5, s11
; S_SI-NEXT:    v_mov_b32_e32 v6, s10
; S_SI-NEXT:    v_mov_b32_e32 v7, s9
; S_SI-NEXT:    v_mov_b32_e32 v8, s18
; S_SI-NEXT:    v_mov_b32_e32 v12, s19
; S_SI-NEXT:    v_mov_b32_e32 v13, s8
; S_SI-NEXT:    v_mov_b32_e32 v14, s7
; S_SI-NEXT:    v_mov_b32_e32 v15, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB12_4:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr10
; S_SI-NEXT:    ; implicit-def: $vgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    s_branch .LBB12_2
;
; S_VI-LABEL: bitcast_v4i32_to_v16i8_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB12_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s12, s19, 8
; S_VI-NEXT:    s_lshr_b32 s13, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s21, s17, 8
; S_VI-NEXT:    s_lshr_b32 s22, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_VI-NEXT:    s_cbranch_execnz .LBB12_3
; S_VI-NEXT:  .LBB12_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s17, s17, 3
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s19, s19, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s12, s19, 8
; S_VI-NEXT:    s_lshr_b32 s13, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s21, s17, 8
; S_VI-NEXT:    s_lshr_b32 s22, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:  .LBB12_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s23
; S_VI-NEXT:    v_mov_b32_e32 v2, s22
; S_VI-NEXT:    v_mov_b32_e32 v3, s6
; S_VI-NEXT:    v_mov_b32_e32 v4, s17
; S_VI-NEXT:    v_mov_b32_e32 v5, s21
; S_VI-NEXT:    v_mov_b32_e32 v6, s20
; S_VI-NEXT:    v_mov_b32_e32 v7, s15
; S_VI-NEXT:    v_mov_b32_e32 v8, s18
; S_VI-NEXT:    v_mov_b32_e32 v9, s14
; S_VI-NEXT:    v_mov_b32_e32 v10, s13
; S_VI-NEXT:    v_mov_b32_e32 v11, s4
; S_VI-NEXT:    v_mov_b32_e32 v12, s19
; S_VI-NEXT:    v_mov_b32_e32 v13, s12
; S_VI-NEXT:    v_mov_b32_e32 v14, s11
; S_VI-NEXT:    v_mov_b32_e32 v15, s10
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB12_4:
; S_VI-NEXT:    ; implicit-def: $sgpr23
; S_VI-NEXT:    ; implicit-def: $sgpr22
; S_VI-NEXT:    ; implicit-def: $sgpr6
; S_VI-NEXT:    ; implicit-def: $sgpr21
; S_VI-NEXT:    ; implicit-def: $sgpr20
; S_VI-NEXT:    ; implicit-def: $sgpr15
; S_VI-NEXT:    ; implicit-def: $sgpr14
; S_VI-NEXT:    ; implicit-def: $sgpr13
; S_VI-NEXT:    ; implicit-def: $sgpr4
; S_VI-NEXT:    ; implicit-def: $sgpr12
; S_VI-NEXT:    ; implicit-def: $sgpr11
; S_VI-NEXT:    ; implicit-def: $sgpr10
; S_VI-NEXT:    s_branch .LBB12_2
;
; S_GFX9-LABEL: bitcast_v4i32_to_v16i8_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB12_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_lshr_b32 s10, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s12, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s13, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s14, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s15, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s20, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s21, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s22, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 8
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_GFX9-NEXT:    s_cbranch_execnz .LBB12_3
; S_GFX9-NEXT:  .LBB12_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s17, s17, 3
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_add_i32 s19, s19, 3
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_GFX9-NEXT:    s_lshr_b32 s10, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s12, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s13, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s14, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s15, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s20, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s21, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s22, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 8
; S_GFX9-NEXT:  .LBB12_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s23
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s15
; S_GFX9-NEXT:    v_mov_b32_e32 v8, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v9, s14
; S_GFX9-NEXT:    v_mov_b32_e32 v10, s13
; S_GFX9-NEXT:    v_mov_b32_e32 v11, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v12, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v13, s12
; S_GFX9-NEXT:    v_mov_b32_e32 v14, s11
; S_GFX9-NEXT:    v_mov_b32_e32 v15, s10
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB12_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr23
; S_GFX9-NEXT:    ; implicit-def: $sgpr22
; S_GFX9-NEXT:    ; implicit-def: $sgpr6
; S_GFX9-NEXT:    ; implicit-def: $sgpr21
; S_GFX9-NEXT:    ; implicit-def: $sgpr20
; S_GFX9-NEXT:    ; implicit-def: $sgpr15
; S_GFX9-NEXT:    ; implicit-def: $sgpr14
; S_GFX9-NEXT:    ; implicit-def: $sgpr13
; S_GFX9-NEXT:    ; implicit-def: $sgpr4
; S_GFX9-NEXT:    ; implicit-def: $sgpr12
; S_GFX9-NEXT:    ; implicit-def: $sgpr11
; S_GFX9-NEXT:    ; implicit-def: $sgpr10
; S_GFX9-NEXT:    s_branch .LBB12_2
;
; S_GFX11-LABEL: bitcast_v4i32_to_v16i8_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s18, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB12_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_lshr_b32 s8, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s9, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s10, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s13, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s14, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s15, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s0, 8
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[0:1], 24
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s18
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB12_3
; S_GFX11-NEXT:  .LBB12_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s1, s1, 3
; S_GFX11-NEXT:    s_add_i32 s3, s3, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[0:1], 24
; S_GFX11-NEXT:    s_lshr_b32 s8, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s9, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s10, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s13, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s14, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s15, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s0, 8
; S_GFX11-NEXT:  .LBB12_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s17
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s16 :: v_dual_mov_b32 v3, s6
; S_GFX11-NEXT:    v_dual_mov_b32 v4, s1 :: v_dual_mov_b32 v5, s15
; S_GFX11-NEXT:    v_dual_mov_b32 v6, s14 :: v_dual_mov_b32 v7, s13
; S_GFX11-NEXT:    v_dual_mov_b32 v8, s2 :: v_dual_mov_b32 v9, s12
; S_GFX11-NEXT:    v_dual_mov_b32 v10, s11 :: v_dual_mov_b32 v11, s4
; S_GFX11-NEXT:    v_dual_mov_b32 v12, s3 :: v_dual_mov_b32 v13, s10
; S_GFX11-NEXT:    v_dual_mov_b32 v14, s9 :: v_dual_mov_b32 v15, s8
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB12_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr17
; S_GFX11-NEXT:    ; implicit-def: $sgpr16
; S_GFX11-NEXT:    ; implicit-def: $sgpr6
; S_GFX11-NEXT:    ; implicit-def: $sgpr15
; S_GFX11-NEXT:    ; implicit-def: $sgpr14
; S_GFX11-NEXT:    ; implicit-def: $sgpr13
; S_GFX11-NEXT:    ; implicit-def: $sgpr12
; S_GFX11-NEXT:    ; implicit-def: $sgpr11
; S_GFX11-NEXT:    ; implicit-def: $sgpr4
; S_GFX11-NEXT:    ; implicit-def: $sgpr10
; S_GFX11-NEXT:    ; implicit-def: $sgpr9
; S_GFX11-NEXT:    ; implicit-def: $sgpr8
; S_GFX11-NEXT:    s_branch .LBB12_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i32> %a, splat (i32 3)
  %a2 = bitcast <4 x i32> %a1 to <16 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i32> %a to <16 x i8>
  br label %end

end:
  %phi = phi <16 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i8> %phi
}

define inreg <4 x i32> @bitcast_v16i8_to_v4i32_inreg(<16 x i8> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v16i8_to_v4i32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_SI-NEXT:    v_mov_b32_e32 v4, v0
; S_SI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 24, v1
; S_SI-NEXT:    s_cbranch_scc0 .LBB13_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s5, 16
; S_SI-NEXT:    s_lshl_b32 s6, s19, 24
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_lshl_b32 s7, s23, 24
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_lshl_b32 s8, s27, 24
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v4
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    s_cbranch_execnz .LBB13_3
; S_SI-NEXT:  .LBB13_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s6, s18, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s19, 24
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s7, s22, 0xff
; S_SI-NEXT:    s_addk_i32 s5, 0x300
; S_SI-NEXT:    s_lshl_b32 s6, s23, 24
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_add_i32 s26, s26, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s8, s26, 0xff
; S_SI-NEXT:    s_addk_i32 s6, 0x300
; S_SI-NEXT:    s_lshl_b32 s7, s27, 24
; S_SI-NEXT:    s_lshl_b32 s8, s8, 16
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_add_i32 s28, s28, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_add_i32_e32 v0, vcc, 3, v4
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v0
; S_SI-NEXT:    s_addk_i32 s7, 0x300
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    s_add_i32 s4, s4, 0x3000000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x3000000
; S_SI-NEXT:    v_or_b32_e32 v0, s7, v0
; S_SI-NEXT:    v_add_i32_e32 v3, vcc, 0x3000000, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:  .LBB13_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB13_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB13_2
;
; S_VI-LABEL: bitcast_v16i8_to_v4i32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_VI-NEXT:    v_mov_b32_e32 v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, v0
; S_VI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_VI-NEXT:    s_cbranch_scc0 .LBB13_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_and_b32 s4, s16, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s17, 8
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s19, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    s_lshl_b32 s5, s5, 16
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s20, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s21, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_lshl_b32 s6, s6, 16
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s24, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s25, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s27, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_lshl_b32 s7, s7, 16
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s28, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s29, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 8, v5
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    v_or_b32_sdwa v0, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s4
; S_VI-NEXT:    v_mov_b32_e32 v1, s5
; S_VI-NEXT:    v_mov_b32_e32 v2, s6
; S_VI-NEXT:    s_cbranch_execnz .LBB13_3
; S_VI-NEXT:  .LBB13_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshl_b32 s10, s17, 8
; S_VI-NEXT:    s_and_b32 s11, s16, 0xff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_and_b32 s11, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s9, s19, 24
; S_VI-NEXT:    s_addk_i32 s10, 0x300
; S_VI-NEXT:    s_lshl_b32 s11, s11, 16
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_and_b32 s10, s10, 0xffff
; S_VI-NEXT:    s_or_b32 s9, s9, s11
; S_VI-NEXT:    s_add_i32 s22, s22, 3
; S_VI-NEXT:    s_lshl_b32 s8, s21, 8
; S_VI-NEXT:    s_or_b32 s9, s9, s10
; S_VI-NEXT:    s_and_b32 s10, s20, 0xff
; S_VI-NEXT:    s_or_b32 s8, s8, s10
; S_VI-NEXT:    s_and_b32 s10, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 24
; S_VI-NEXT:    s_addk_i32 s8, 0x300
; S_VI-NEXT:    s_lshl_b32 s10, s10, 16
; S_VI-NEXT:    s_add_i32 s24, s24, 3
; S_VI-NEXT:    s_and_b32 s8, s8, 0xffff
; S_VI-NEXT:    s_or_b32 s7, s7, s10
; S_VI-NEXT:    s_add_i32 s26, s26, 3
; S_VI-NEXT:    s_lshl_b32 s6, s25, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s8, s24, 0xff
; S_VI-NEXT:    s_or_b32 s6, s6, s8
; S_VI-NEXT:    s_and_b32 s8, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s27, 24
; S_VI-NEXT:    s_addk_i32 s6, 0x300
; S_VI-NEXT:    s_lshl_b32 s8, s8, 16
; S_VI-NEXT:    s_add_i32 s28, s28, 3
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_or_b32 s5, s5, s8
; S_VI-NEXT:    v_add_u32_e32 v1, vcc, 3, v4
; S_VI-NEXT:    s_lshl_b32 s4, s29, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s28, 0xff
; S_VI-NEXT:    s_or_b32 s4, s4, s6
; S_VI-NEXT:    v_and_b32_e32 v1, 0xff, v1
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 24, v5
; S_VI-NEXT:    s_addk_i32 s4, 0x300
; S_VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_VI-NEXT:    s_add_i32 s9, s9, 0x3000000
; S_VI-NEXT:    s_add_i32 s7, s7, 0x3000000
; S_VI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_VI-NEXT:    v_or_b32_e32 v0, s4, v0
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x3000000, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s9
; S_VI-NEXT:    v_mov_b32_e32 v1, s7
; S_VI-NEXT:    v_mov_b32_e32 v2, s5
; S_VI-NEXT:  .LBB13_3: ; %end
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB13_4:
; S_VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_VI-NEXT:    s_branch .LBB13_2
;
; S_GFX9-LABEL: bitcast_v16i8_to_v4i32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_GFX9-NEXT:    v_readfirstlane_b32 s10, v1
; S_GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_GFX9-NEXT:    v_readfirstlane_b32 s11, v0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB13_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s8, s9
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_cbranch_execnz .LBB13_3
; S_GFX9-NEXT:  .LBB13_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_or_b32 s4, s5, s4
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_addk_i32 s4, 0x300
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_add_i32 s22, s22, 3
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_add_i32 s24, s24, 3
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_add_i32 s26, s26, 3
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_add_i32 s28, s28, 3
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_add_i32 s11, s11, 3
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s9, s8
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_addk_i32 s8, 0x300
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:  .LBB13_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s5
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s7
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB13_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX9-NEXT:    s_branch .LBB13_2
;
; S_GFX11-LABEL: bitcast_v16i8_to_v4i32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s28, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB13_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_and_b32 s4, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s5, s1, 8
; S_GFX11-NEXT:    s_and_b32 s6, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s3, 8
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s17, 8
; S_GFX11-NEXT:    s_and_b32 s9, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s19, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s21, 8
; S_GFX11-NEXT:    s_and_b32 s9, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s23, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s9, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s25, 8
; S_GFX11-NEXT:    s_and_b32 s11, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s12, s27, 8
; S_GFX11-NEXT:    s_or_b32 s9, s9, s10
; S_GFX11-NEXT:    s_or_b32 s10, s11, s12
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_and_b32 s9, s9, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s10, s10, 16
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB13_3
; S_GFX11-NEXT:  .LBB13_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s18, s18, 3
; S_GFX11-NEXT:    s_or_b32 s4, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s17, 8
; S_GFX11-NEXT:    s_and_b32 s2, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s19, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s20, s20, 3
; S_GFX11-NEXT:    s_or_b32 s5, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s21, 8
; S_GFX11-NEXT:    s_add_i32 s22, s22, 3
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_and_b32 s1, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s2, s23, 8
; S_GFX11-NEXT:    s_add_i32 s24, s24, 3
; S_GFX11-NEXT:    s_add_i32 s26, s26, 3
; S_GFX11-NEXT:    s_or_b32 s1, s2, s1
; S_GFX11-NEXT:    s_and_b32 s2, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s25, 8
; S_GFX11-NEXT:    s_and_b32 s6, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s27, 8
; S_GFX11-NEXT:    s_or_b32 s2, s3, s2
; S_GFX11-NEXT:    s_or_b32 s3, s7, s6
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_addk_i32 s2, 0x300
; S_GFX11-NEXT:    s_addk_i32 s3, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 16
; S_GFX11-NEXT:    s_or_b32 s6, s0, s1
; S_GFX11-NEXT:    s_or_b32 s7, s2, s3
; S_GFX11-NEXT:  .LBB13_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s4 :: v_dual_mov_b32 v1, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s6 :: v_dual_mov_b32 v3, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB13_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX11-NEXT:    s_branch .LBB13_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i8> %a, splat (i8 3)
  %a2 = bitcast <16 x i8> %a1 to <4 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i8> %a to <4 x i32>
  br label %end

end:
  %phi = phi <4 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i32> %phi
}

define inreg <2 x i64> @bitcast_v4f32_to_v2i64_inreg(<4 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4f32_to_v2i64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB14_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB14_4
; S_SI-NEXT:  .LBB14_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_SI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB14_3:
; S_SI-NEXT:    s_branch .LBB14_2
; S_SI-NEXT:  .LBB14_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v4f32_to_v2i64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB14_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB14_4
; S_VI-NEXT:  .LBB14_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB14_3:
; S_VI-NEXT:    s_branch .LBB14_2
; S_VI-NEXT:  .LBB14_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v4f32_to_v2i64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB14_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB14_4
; S_GFX9-NEXT:  .LBB14_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB14_3:
; S_GFX9-NEXT:    s_branch .LBB14_2
; S_GFX9-NEXT:  .LBB14_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v4f32_to_v2i64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB14_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB14_4
; S_GFX11-NEXT:  .LBB14_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB14_3:
; S_GFX11-NEXT:    s_branch .LBB14_2
; S_GFX11-NEXT:  .LBB14_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <4 x float> %a1 to <2 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <4 x float> %a to <2 x i64>
  br label %end

end:
  %phi = phi <2 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i64> %phi
}

define inreg <4 x float> @bitcast_v2i64_to_v4f32_inreg(<2 x i64> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2i64_to_v4f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB15_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB15_3
; S_SI-NEXT:  .LBB15_2: ; %cmp.true
; S_SI-NEXT:    s_add_u32 s18, s18, 3
; S_SI-NEXT:    s_addc_u32 s19, s19, 0
; S_SI-NEXT:    s_add_u32 s16, s16, 3
; S_SI-NEXT:    s_addc_u32 s17, s17, 0
; S_SI-NEXT:  .LBB15_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB15_4:
; S_SI-NEXT:    s_branch .LBB15_2
;
; S_VI-LABEL: bitcast_v2i64_to_v4f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB15_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB15_3
; S_VI-NEXT:  .LBB15_2: ; %cmp.true
; S_VI-NEXT:    s_add_u32 s18, s18, 3
; S_VI-NEXT:    s_addc_u32 s19, s19, 0
; S_VI-NEXT:    s_add_u32 s16, s16, 3
; S_VI-NEXT:    s_addc_u32 s17, s17, 0
; S_VI-NEXT:  .LBB15_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB15_4:
; S_VI-NEXT:    s_branch .LBB15_2
;
; S_GFX9-LABEL: bitcast_v2i64_to_v4f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB15_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB15_3
; S_GFX9-NEXT:  .LBB15_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_u32 s18, s18, 3
; S_GFX9-NEXT:    s_addc_u32 s19, s19, 0
; S_GFX9-NEXT:    s_add_u32 s16, s16, 3
; S_GFX9-NEXT:    s_addc_u32 s17, s17, 0
; S_GFX9-NEXT:  .LBB15_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB15_4:
; S_GFX9-NEXT:    s_branch .LBB15_2
;
; S_GFX11-LABEL: bitcast_v2i64_to_v4f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB15_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB15_3
; S_GFX11-NEXT:  .LBB15_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_u32 s2, s2, 3
; S_GFX11-NEXT:    s_addc_u32 s3, s3, 0
; S_GFX11-NEXT:    s_add_u32 s0, s0, 3
; S_GFX11-NEXT:    s_addc_u32 s1, s1, 0
; S_GFX11-NEXT:  .LBB15_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB15_4:
; S_GFX11-NEXT:    s_branch .LBB15_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i64> %a, splat (i64 3)
  %a2 = bitcast <2 x i64> %a1 to <4 x float>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i64> %a to <4 x float>
  br label %end

end:
  %phi = phi <4 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x float> %phi
}

define inreg <2 x double> @bitcast_v4f32_to_v2f64_inreg(<4 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4f32_to_v2f64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB16_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB16_4
; S_SI-NEXT:  .LBB16_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_SI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB16_3:
; S_SI-NEXT:    s_branch .LBB16_2
; S_SI-NEXT:  .LBB16_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v4f32_to_v2f64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB16_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB16_4
; S_VI-NEXT:  .LBB16_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB16_3:
; S_VI-NEXT:    s_branch .LBB16_2
; S_VI-NEXT:  .LBB16_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v4f32_to_v2f64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB16_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB16_4
; S_GFX9-NEXT:  .LBB16_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB16_3:
; S_GFX9-NEXT:    s_branch .LBB16_2
; S_GFX9-NEXT:  .LBB16_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v4f32_to_v2f64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB16_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB16_4
; S_GFX11-NEXT:  .LBB16_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB16_3:
; S_GFX11-NEXT:    s_branch .LBB16_2
; S_GFX11-NEXT:  .LBB16_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <4 x float> %a1 to <2 x double>
  br label %end

cmp.false:
  %a3 = bitcast <4 x float> %a to <2 x double>
  br label %end

end:
  %phi = phi <2 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x double> %phi
}

define inreg <4 x float> @bitcast_v2f64_to_v4f32_inreg(<2 x double> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2f64_to_v4f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB17_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB17_4
; S_SI-NEXT:  .LBB17_2: ; %cmp.true
; S_SI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_SI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB17_3:
; S_SI-NEXT:    s_branch .LBB17_2
; S_SI-NEXT:  .LBB17_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v2f64_to_v4f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB17_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB17_4
; S_VI-NEXT:  .LBB17_2: ; %cmp.true
; S_VI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_VI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB17_3:
; S_VI-NEXT:    s_branch .LBB17_2
; S_VI-NEXT:  .LBB17_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v2f64_to_v4f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB17_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB17_4
; S_GFX9-NEXT:  .LBB17_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_GFX9-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB17_3:
; S_GFX9-NEXT:    s_branch .LBB17_2
; S_GFX9-NEXT:  .LBB17_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v2f64_to_v4f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB17_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB17_4
; S_GFX11-NEXT:  .LBB17_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f64 v[2:3], s[2:3], 1.0
; S_GFX11-NEXT:    v_add_f64 v[0:1], s[0:1], 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB17_3:
; S_GFX11-NEXT:    s_branch .LBB17_2
; S_GFX11-NEXT:  .LBB17_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <2 x double> %a1 to <4 x float>
  br label %end

cmp.false:
  %a3 = bitcast <2 x double> %a to <4 x float>
  br label %end

end:
  %phi = phi <4 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x float> %phi
}

define inreg <8 x i16> @bitcast_v4f32_to_v8i16_inreg(<4 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4f32_to_v8i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB18_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    s_lshr_b32 s6, s17, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB18_4
; S_SI-NEXT:  .LBB18_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v2, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    v_add_f32_e64 v6, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v4, s18, 1.0
; S_SI-NEXT:    v_alignbit_b32 v5, v6, v4, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v0, 16
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v6
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v2
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB18_3:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    s_branch .LBB18_2
; S_SI-NEXT:  .LBB18_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v2, s17
; S_SI-NEXT:    v_mov_b32_e32 v4, s18
; S_SI-NEXT:    v_mov_b32_e32 v6, s19
; S_SI-NEXT:    v_mov_b32_e32 v3, s6
; S_SI-NEXT:    v_mov_b32_e32 v7, s7
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v4f32_to_v8i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB18_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB18_4
; S_VI-NEXT:  .LBB18_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB18_3:
; S_VI-NEXT:    s_branch .LBB18_2
; S_VI-NEXT:  .LBB18_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v4f32_to_v8i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB18_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB18_4
; S_GFX9-NEXT:  .LBB18_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB18_3:
; S_GFX9-NEXT:    s_branch .LBB18_2
; S_GFX9-NEXT:  .LBB18_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v4f32_to_v8i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB18_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB18_4
; S_GFX11-NEXT:  .LBB18_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB18_3:
; S_GFX11-NEXT:    s_branch .LBB18_2
; S_GFX11-NEXT:  .LBB18_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <4 x float> %a1 to <8 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x float> %a to <8 x i16>
  br label %end

end:
  %phi = phi <8 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i16> %phi
}

define inreg <4 x float> @bitcast_v8i16_to_v4f32_inreg(<8 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8i16_to_v4f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB19_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_cbranch_execnz .LBB19_3
; S_SI-NEXT:  .LBB19_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_add_i32 s4, s4, 0x30000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x30000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x30000
; S_SI-NEXT:    s_add_i32 s7, s7, 0x30000
; S_SI-NEXT:  .LBB19_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB19_4:
; S_SI-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_SI-NEXT:    s_branch .LBB19_2
;
; S_VI-LABEL: bitcast_v8i16_to_v4f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB19_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB19_3
; S_VI-NEXT:  .LBB19_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB19_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB19_4:
; S_VI-NEXT:    s_branch .LBB19_2
;
; S_GFX9-LABEL: bitcast_v8i16_to_v4f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB19_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB19_4
; S_GFX9-NEXT:  .LBB19_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB19_3:
; S_GFX9-NEXT:    s_branch .LBB19_2
; S_GFX9-NEXT:  .LBB19_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8i16_to_v4f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB19_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB19_4
; S_GFX11-NEXT:  .LBB19_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB19_3:
; S_GFX11-NEXT:    s_branch .LBB19_2
; S_GFX11-NEXT:  .LBB19_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i16> %a, splat (i16 3)
  %a2 = bitcast <8 x i16> %a1 to <4 x float>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i16> %a to <4 x float>
  br label %end

end:
  %phi = phi <4 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x float> %phi
}

define inreg <8 x half> @bitcast_v4f32_to_v8f16_inreg(<4 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4f32_to_v8f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB20_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_lshr_b32 s4, s19, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_lshr_b32 s4, s18, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_lshr_b32 s4, s17, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    s_cbranch_execnz .LBB20_3
; S_SI-NEXT:  .LBB20_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    v_add_f32_e64 v2, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v4, s18, 1.0
; S_SI-NEXT:    v_add_f32_e64 v6, s19, 1.0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 16, v4
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v1
; S_SI-NEXT:  .LBB20_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB20_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB20_2
;
; S_VI-LABEL: bitcast_v4f32_to_v8f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB20_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB20_4
; S_VI-NEXT:  .LBB20_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB20_3:
; S_VI-NEXT:    s_branch .LBB20_2
; S_VI-NEXT:  .LBB20_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v4f32_to_v8f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB20_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB20_4
; S_GFX9-NEXT:  .LBB20_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB20_3:
; S_GFX9-NEXT:    s_branch .LBB20_2
; S_GFX9-NEXT:  .LBB20_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v4f32_to_v8f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB20_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB20_4
; S_GFX11-NEXT:  .LBB20_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB20_3:
; S_GFX11-NEXT:    s_branch .LBB20_2
; S_GFX11-NEXT:  .LBB20_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <4 x float> %a1 to <8 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x float> %a to <8 x half>
  br label %end

end:
  %phi = phi <8 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x half> %phi
}

define inreg <4 x float> @bitcast_v8f16_to_v4f32_inreg(<8 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8f16_to_v4f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v11, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v10, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, s22
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB21_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v11
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v9
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v7
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v0, v10, v0
; S_SI-NEXT:    v_or_b32_e32 v1, v8, v1
; S_SI-NEXT:    v_or_b32_e32 v2, v6, v2
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:    s_cbranch_execnz .LBB21_3
; S_SI-NEXT:  .LBB21_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v11
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v10
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v8
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_or_b32_e32 v0, v1, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_or_b32_e32 v1, v3, v1
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v7
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_or_b32_e32 v2, v2, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:  .LBB21_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB21_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB21_2
;
; S_VI-LABEL: bitcast_v8f16_to_v4f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB21_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB21_4
; S_VI-NEXT:  .LBB21_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s19, v0
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_or_b32_e32 v3, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v4, s17, v0
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_or_b32_e32 v1, v4, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, s4
; S_VI-NEXT:    v_add_f16_sdwa v4, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v0, s16, v0
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v4
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB21_3:
; S_VI-NEXT:    s_branch .LBB21_2
; S_VI-NEXT:  .LBB21_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8f16_to_v4f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB21_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB21_4
; S_GFX9-NEXT:  .LBB21_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB21_3:
; S_GFX9-NEXT:    s_branch .LBB21_2
; S_GFX9-NEXT:  .LBB21_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8f16_to_v4f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB21_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB21_4
; S_GFX11-NEXT:  .LBB21_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB21_3:
; S_GFX11-NEXT:    s_branch .LBB21_2
; S_GFX11-NEXT:  .LBB21_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <8 x half> %a1 to <4 x float>
  br label %end

cmp.false:
  %a3 = bitcast <8 x half> %a to <4 x float>
  br label %end

end:
  %phi = phi <4 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x float> %phi
}

define inreg <8 x bfloat> @bitcast_v4f32_to_v8bf16_inreg(<4 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4f32_to_v8bf16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB22_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s6, s19, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s7, s19, 16
; S_SI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s9, s18, 16
; S_SI-NEXT:    s_and_b32 s10, s17, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s11, s17, 16
; S_SI-NEXT:    s_and_b32 s12, s16, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s13, s16, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB22_4
; S_SI-NEXT:  .LBB22_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_SI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_SI-NEXT:    v_and_b32_e32 v7, 0xffff0000, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v6, 16, v3
; S_SI-NEXT:    v_and_b32_e32 v5, 0xffff0000, v2
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v2
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v1
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB22_3:
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    s_branch .LBB22_2
; S_SI-NEXT:  .LBB22_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s13
; S_SI-NEXT:    v_mov_b32_e32 v1, s12
; S_SI-NEXT:    v_mov_b32_e32 v2, s11
; S_SI-NEXT:    v_mov_b32_e32 v3, s10
; S_SI-NEXT:    v_mov_b32_e32 v4, s9
; S_SI-NEXT:    v_mov_b32_e32 v5, s8
; S_SI-NEXT:    v_mov_b32_e32 v6, s7
; S_SI-NEXT:    v_mov_b32_e32 v7, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v4f32_to_v8bf16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB22_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB22_4
; S_VI-NEXT:  .LBB22_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_VI-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB22_3:
; S_VI-NEXT:    s_branch .LBB22_2
; S_VI-NEXT:  .LBB22_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v4f32_to_v8bf16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB22_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB22_4
; S_GFX9-NEXT:  .LBB22_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v3, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v2, s18, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v1, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB22_3:
; S_GFX9-NEXT:    s_branch .LBB22_2
; S_GFX9-NEXT:  .LBB22_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v4f32_to_v8bf16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB22_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB22_4
; S_GFX11-NEXT:  .LBB22_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v3, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v2, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v1, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB22_3:
; S_GFX11-NEXT:    s_branch .LBB22_2
; S_GFX11-NEXT:  .LBB22_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <4 x float> %a1 to <8 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x float> %a to <8 x bfloat>
  br label %end

end:
  %phi = phi <8 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x bfloat> %phi
}

define inreg <4 x float> @bitcast_v8bf16_to_v4f32_inreg(<8 x bfloat> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8bf16_to_v4f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    v_mul_f32_e64 v10, 1.0, s17
; S_SI-NEXT:    v_mul_f32_e64 v11, 1.0, s16
; S_SI-NEXT:    v_mul_f32_e64 v8, 1.0, s19
; S_SI-NEXT:    v_mul_f32_e64 v9, 1.0, s18
; S_SI-NEXT:    v_mul_f32_e64 v6, 1.0, s21
; S_SI-NEXT:    v_mul_f32_e64 v7, 1.0, s20
; S_SI-NEXT:    v_mul_f32_e64 v4, 1.0, s23
; S_SI-NEXT:    v_mul_f32_e64 v5, 1.0, s22
; S_SI-NEXT:    s_cbranch_scc0 .LBB23_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v10
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v8
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v6
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v0, v0, v11, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v1, v9, 16
; S_SI-NEXT:    v_alignbit_b32 v2, v2, v7, 16
; S_SI-NEXT:    v_alignbit_b32 v3, v3, v5, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB23_3
; S_SI-NEXT:  .LBB23_2: ; %cmp.true
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v10
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v11
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v8
; S_SI-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v9
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v6
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v1, 16
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v7
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_and_b32_e32 v4, 0xffff0000, v4
; S_SI-NEXT:    v_alignbit_b32 v2, v3, v2, 16
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x40c00000, v4
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v3, 16
; S_SI-NEXT:  .LBB23_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB23_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB23_2
;
; S_VI-LABEL: bitcast_v8bf16_to_v4f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB23_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB23_4
; S_VI-NEXT:  .LBB23_2: ; %cmp.true
; S_VI-NEXT:    s_lshl_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s19, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s18, 16
; S_VI-NEXT:    v_alignbit_b32 v3, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v4, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v2
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v4, v5, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s17, 16
; S_VI-NEXT:    v_alignbit_b32 v2, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s17, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v4, v5, vcc
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_VI-NEXT:    s_lshl_b32 s4, s16, 16
; S_VI-NEXT:    v_alignbit_b32 v1, v4, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_add_f32_e32 v0, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_bfe_u32 v5, v0, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v0
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v0
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v0, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_VI-NEXT:    v_alignbit_b32 v0, v0, v4, 16
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB23_3:
; S_VI-NEXT:    s_branch .LBB23_2
; S_VI-NEXT:  .LBB23_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8bf16_to_v4f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB23_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB23_4
; S_GFX9-NEXT:  .LBB23_2: ; %cmp.true
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s19, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_GFX9-NEXT:    v_mov_b32_e32 v4, 0xffff
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s18
; S_GFX9-NEXT:    v_lshl_or_b32 v3, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s18, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v5, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v2
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v5, v6, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s17
; S_GFX9-NEXT:    v_lshl_or_b32 v2, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v1
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s17, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v6, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v5, v4, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s16
; S_GFX9-NEXT:    v_lshl_or_b32 v1, v1, 16, v5
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_bfe_u32 v6, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v0
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v4, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshl_or_b32 v0, v5, 16, v0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB23_3:
; S_GFX9-NEXT:    s_branch .LBB23_2
; S_GFX9-NEXT:  .LBB23_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8bf16_to_v4f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB23_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB23_4
; S_GFX11-NEXT:  .LBB23_2: ; %cmp.true
; S_GFX11-NEXT:    s_lshl_b32 s4, s3, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s3
; S_GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s4
; S_GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s2
; S_GFX11-NEXT:    s_lshl_b32 s2, s2, 16
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s4
; S_GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v0
; S_GFX11-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, v4, v1
; S_GFX11-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_GFX11-NEXT:    v_add_f32_e64 v5, 0x40c00000, s2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, 0x7fff, v4
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; S_GFX11-NEXT:    v_bfe_u32 v2, v5, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v8, 0x40c00000, s1
; S_GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s0
; S_GFX11-NEXT:    v_cndmask_b32_e32 v1, v4, v6, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v5
; S_GFX11-NEXT:    v_add_f32_e64 v4, 0x40c00000, s3
; S_GFX11-NEXT:    v_or_b32_e32 v13, 0x400000, v8
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v3, v7, v9 :: v_dual_add_nc_u32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v5, v5
; S_GFX11-NEXT:    v_bfe_u32 v7, v4, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v9, 0x40c00000, s0
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v3
; S_GFX11-NEXT:    v_or_b32_e32 v3, 0x400000, v5
; S_GFX11-NEXT:    v_bfe_u32 v5, v8, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v4
; S_GFX11-NEXT:    v_or_b32_e32 v12, 0x400000, v4
; S_GFX11-NEXT:    v_bfe_u32 v11, v9, 16, 1
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v2, v3, vcc_lo
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, v5, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v8, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v11, v11, v9
; S_GFX11-NEXT:    v_bfe_u32 v10, v3, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, 0x7fff, v5
; S_GFX11-NEXT:    v_or_b32_e32 v14, 0x400000, v3
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v8, 0x7fff, v11
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v5, v5, v13 :: v_dual_add_nc_u32 v10, v10, v3
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_or_b32_e32 v11, 0x400000, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, 0x7fff, v10
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX11-NEXT:    v_and_b32_e32 v0, 0xffff, v0
; S_GFX11-NEXT:    v_and_b32_e32 v2, 0xffff, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v3, v10, v14, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v4, v4
; S_GFX11-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; S_GFX11-NEXT:    v_lshl_or_b32 v2, v6, 16, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_GFX11-NEXT:    v_cndmask_b32_e32 v4, v7, v12, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v9, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_GFX11-NEXT:    v_cndmask_b32_e32 v7, v8, v11, vcc_lo
; S_GFX11-NEXT:    v_and_b32_e32 v8, 0xffff, v3
; S_GFX11-NEXT:    v_lshl_or_b32 v3, v1, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshl_or_b32 v1, v4, 16, v5
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 16, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; S_GFX11-NEXT:    v_lshl_or_b32 v0, v7, 16, v8
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB23_3:
; S_GFX11-NEXT:    s_branch .LBB23_2
; S_GFX11-NEXT:  .LBB23_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <8 x bfloat> %a1 to <4 x float>
  br label %end

cmp.false:
  %a3 = bitcast <8 x bfloat> %a to <4 x float>
  br label %end

end:
  %phi = phi <4 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x float> %phi
}

define inreg <16 x i8> @bitcast_v4f32_to_v16i8_inreg(<4 x float> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v4f32_to_v16i8_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB24_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v11, s19, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s19, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s19, v0, 8
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v3, s17, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s17, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 8
; S_SI-NEXT:    s_lshr_b32 s9, s19, 24
; S_SI-NEXT:    s_lshr_b32 s10, s19, 16
; S_SI-NEXT:    s_lshr_b32 s11, s19, 8
; S_SI-NEXT:    s_lshr_b32 s6, s17, 24
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:    s_lshr_b32 s8, s17, 8
; S_SI-NEXT:    s_cbranch_execnz .LBB24_4
; S_SI-NEXT:  .LBB24_2: ; %cmp.true
; S_SI-NEXT:    v_add_f32_e64 v4, s17, 1.0
; S_SI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; S_SI-NEXT:    v_add_f32_e64 v12, s19, 1.0
; S_SI-NEXT:    v_add_f32_e64 v8, s18, 1.0
; S_SI-NEXT:    v_alignbit_b32 v11, v12, v8, 24
; S_SI-NEXT:    v_alignbit_b32 v10, v12, v8, 16
; S_SI-NEXT:    v_alignbit_b32 v9, v12, v8, 8
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, v4, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v4, v0, 8
; S_SI-NEXT:    v_lshrrev_b32_e32 v15, 24, v12
; S_SI-NEXT:    v_lshrrev_b32_e32 v14, 16, v12
; S_SI-NEXT:    v_lshrrev_b32_e32 v13, 8, v12
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 24, v4
; S_SI-NEXT:    v_lshrrev_b32_e32 v6, 16, v4
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 8, v4
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB24_3:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr10
; S_SI-NEXT:    ; implicit-def: $vgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    s_branch .LBB24_2
; S_SI-NEXT:  .LBB24_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v4, s17
; S_SI-NEXT:    v_mov_b32_e32 v8, s18
; S_SI-NEXT:    v_mov_b32_e32 v12, s19
; S_SI-NEXT:    v_mov_b32_e32 v5, s8
; S_SI-NEXT:    v_mov_b32_e32 v6, s7
; S_SI-NEXT:    v_mov_b32_e32 v7, s6
; S_SI-NEXT:    v_mov_b32_e32 v13, s11
; S_SI-NEXT:    v_mov_b32_e32 v14, s10
; S_SI-NEXT:    v_mov_b32_e32 v15, s9
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v4f32_to_v16i8_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB24_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s13, s19, 8
; S_VI-NEXT:    s_lshr_b32 s12, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s22, s17, 8
; S_VI-NEXT:    s_lshr_b32 s21, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_VI-NEXT:    s_cbranch_execnz .LBB24_4
; S_VI-NEXT:  .LBB24_2: ; %cmp.true
; S_VI-NEXT:    v_add_f32_e64 v19, s17, 1.0
; S_VI-NEXT:    v_add_f32_e64 v18, s16, 1.0
; S_VI-NEXT:    v_add_f32_e64 v17, s19, 1.0
; S_VI-NEXT:    v_add_f32_e64 v16, s18, 1.0
; S_VI-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_VI-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_VI-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_VI-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_VI-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_VI-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_VI-NEXT:    s_branch .LBB24_5
; S_VI-NEXT:  .LBB24_3:
; S_VI-NEXT:    ; implicit-def: $sgpr23
; S_VI-NEXT:    ; implicit-def: $sgpr21
; S_VI-NEXT:    ; implicit-def: $sgpr4
; S_VI-NEXT:    ; implicit-def: $sgpr22
; S_VI-NEXT:    ; implicit-def: $sgpr20
; S_VI-NEXT:    ; implicit-def: $sgpr15
; S_VI-NEXT:    ; implicit-def: $sgpr14
; S_VI-NEXT:    ; implicit-def: $sgpr12
; S_VI-NEXT:    ; implicit-def: $sgpr6
; S_VI-NEXT:    ; implicit-def: $sgpr13
; S_VI-NEXT:    ; implicit-def: $sgpr11
; S_VI-NEXT:    ; implicit-def: $sgpr10
; S_VI-NEXT:    s_branch .LBB24_2
; S_VI-NEXT:  .LBB24_4:
; S_VI-NEXT:    v_mov_b32_e32 v18, s16
; S_VI-NEXT:    v_mov_b32_e32 v19, s17
; S_VI-NEXT:    v_mov_b32_e32 v16, s18
; S_VI-NEXT:    v_mov_b32_e32 v17, s19
; S_VI-NEXT:    v_mov_b32_e32 v1, s23
; S_VI-NEXT:    v_mov_b32_e32 v2, s21
; S_VI-NEXT:    v_mov_b32_e32 v5, s22
; S_VI-NEXT:    v_mov_b32_e32 v6, s20
; S_VI-NEXT:    v_mov_b32_e32 v7, s15
; S_VI-NEXT:    v_mov_b32_e32 v9, s14
; S_VI-NEXT:    v_mov_b32_e32 v10, s12
; S_VI-NEXT:    v_mov_b32_e32 v13, s13
; S_VI-NEXT:    v_mov_b32_e32 v14, s11
; S_VI-NEXT:    v_mov_b32_e32 v15, s10
; S_VI-NEXT:    v_mov_b32_e32 v11, s6
; S_VI-NEXT:    v_mov_b32_e32 v3, s4
; S_VI-NEXT:  .LBB24_5: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, v18
; S_VI-NEXT:    v_mov_b32_e32 v4, v19
; S_VI-NEXT:    v_mov_b32_e32 v8, v16
; S_VI-NEXT:    v_mov_b32_e32 v12, v17
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v4f32_to_v16i8_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB24_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_lshr_b32 s10, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s13, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s12, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s14, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s15, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s20, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s22, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s21, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 8
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_GFX9-NEXT:    s_cbranch_execnz .LBB24_4
; S_GFX9-NEXT:  .LBB24_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f32_e64 v19, s17, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v18, s16, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v17, s19, 1.0
; S_GFX9-NEXT:    v_add_f32_e64 v16, s18, 1.0
; S_GFX9-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX9-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX9-NEXT:    s_branch .LBB24_5
; S_GFX9-NEXT:  .LBB24_3:
; S_GFX9-NEXT:    ; implicit-def: $sgpr23
; S_GFX9-NEXT:    ; implicit-def: $sgpr21
; S_GFX9-NEXT:    ; implicit-def: $sgpr4
; S_GFX9-NEXT:    ; implicit-def: $sgpr22
; S_GFX9-NEXT:    ; implicit-def: $sgpr20
; S_GFX9-NEXT:    ; implicit-def: $sgpr15
; S_GFX9-NEXT:    ; implicit-def: $sgpr14
; S_GFX9-NEXT:    ; implicit-def: $sgpr12
; S_GFX9-NEXT:    ; implicit-def: $sgpr6
; S_GFX9-NEXT:    ; implicit-def: $sgpr13
; S_GFX9-NEXT:    ; implicit-def: $sgpr11
; S_GFX9-NEXT:    ; implicit-def: $sgpr10
; S_GFX9-NEXT:    s_branch .LBB24_2
; S_GFX9-NEXT:  .LBB24_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v18, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v19, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v16, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v17, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s23
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s15
; S_GFX9-NEXT:    v_mov_b32_e32 v9, s14
; S_GFX9-NEXT:    v_mov_b32_e32 v10, s12
; S_GFX9-NEXT:    v_mov_b32_e32 v13, s13
; S_GFX9-NEXT:    v_mov_b32_e32 v14, s11
; S_GFX9-NEXT:    v_mov_b32_e32 v15, s10
; S_GFX9-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX9-NEXT:  .LBB24_5: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX9-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX9-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX9-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v4f32_to_v16i8_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB24_3
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_lshr_b32 s9, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s10, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s13, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s14, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s15, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s18, s0, 8
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[0:1], 24
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB24_4
; S_GFX11-NEXT:  .LBB24_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f32_e64 v19, s1, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v17, s3, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v16, s2, 1.0
; S_GFX11-NEXT:    v_add_f32_e64 v18, s0, 1.0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX11-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX11-NEXT:    s_branch .LBB24_5
; S_GFX11-NEXT:  .LBB24_3:
; S_GFX11-NEXT:    ; implicit-def: $sgpr18
; S_GFX11-NEXT:    ; implicit-def: $sgpr16
; S_GFX11-NEXT:    ; implicit-def: $sgpr4
; S_GFX11-NEXT:    ; implicit-def: $sgpr17
; S_GFX11-NEXT:    ; implicit-def: $sgpr15
; S_GFX11-NEXT:    ; implicit-def: $sgpr14
; S_GFX11-NEXT:    ; implicit-def: $sgpr13
; S_GFX11-NEXT:    ; implicit-def: $sgpr11
; S_GFX11-NEXT:    ; implicit-def: $sgpr6
; S_GFX11-NEXT:    ; implicit-def: $sgpr12
; S_GFX11-NEXT:    ; implicit-def: $sgpr10
; S_GFX11-NEXT:    ; implicit-def: $sgpr9
; S_GFX11-NEXT:    s_branch .LBB24_2
; S_GFX11-NEXT:  .LBB24_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v18, s0 :: v_dual_mov_b32 v19, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v16, s2 :: v_dual_mov_b32 v17, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v1, s18 :: v_dual_mov_b32 v2, s16
; S_GFX11-NEXT:    v_dual_mov_b32 v5, s17 :: v_dual_mov_b32 v6, s15
; S_GFX11-NEXT:    v_dual_mov_b32 v7, s14 :: v_dual_mov_b32 v10, s11
; S_GFX11-NEXT:    v_dual_mov_b32 v9, s13 :: v_dual_mov_b32 v14, s10
; S_GFX11-NEXT:    v_mov_b32_e32 v13, s12
; S_GFX11-NEXT:    v_mov_b32_e32 v15, s9
; S_GFX11-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX11-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX11-NEXT:  .LBB24_5: ; %end
; S_GFX11-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX11-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX11-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX11-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <4 x float> %a1 to <16 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x float> %a to <16 x i8>
  br label %end

end:
  %phi = phi <16 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i8> %phi
}

define inreg <4 x float> @bitcast_v16i8_to_v4f32_inreg(<16 x i8> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v16i8_to_v4f32_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_SI-NEXT:    v_mov_b32_e32 v4, v0
; S_SI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 24, v1
; S_SI-NEXT:    s_cbranch_scc0 .LBB25_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s5, 16
; S_SI-NEXT:    s_lshl_b32 s6, s19, 24
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_lshl_b32 s7, s23, 24
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_lshl_b32 s8, s27, 24
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v4
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    s_cbranch_execnz .LBB25_3
; S_SI-NEXT:  .LBB25_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s6, s18, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s19, 24
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s7, s22, 0xff
; S_SI-NEXT:    s_addk_i32 s5, 0x300
; S_SI-NEXT:    s_lshl_b32 s6, s23, 24
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_add_i32 s26, s26, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s8, s26, 0xff
; S_SI-NEXT:    s_addk_i32 s6, 0x300
; S_SI-NEXT:    s_lshl_b32 s7, s27, 24
; S_SI-NEXT:    s_lshl_b32 s8, s8, 16
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_add_i32 s28, s28, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_add_i32_e32 v0, vcc, 3, v4
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v0
; S_SI-NEXT:    s_addk_i32 s7, 0x300
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    s_add_i32 s4, s4, 0x3000000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x3000000
; S_SI-NEXT:    v_or_b32_e32 v0, s7, v0
; S_SI-NEXT:    v_add_i32_e32 v3, vcc, 0x3000000, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:  .LBB25_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB25_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB25_2
;
; S_VI-LABEL: bitcast_v16i8_to_v4f32_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_VI-NEXT:    v_mov_b32_e32 v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, v0
; S_VI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_VI-NEXT:    s_cbranch_scc0 .LBB25_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_and_b32 s4, s16, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s17, 8
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s19, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    s_lshl_b32 s5, s5, 16
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s20, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s21, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_lshl_b32 s6, s6, 16
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s24, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s25, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s27, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_lshl_b32 s7, s7, 16
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s28, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s29, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 8, v5
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    v_or_b32_sdwa v0, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s4
; S_VI-NEXT:    v_mov_b32_e32 v1, s5
; S_VI-NEXT:    v_mov_b32_e32 v2, s6
; S_VI-NEXT:    s_cbranch_execnz .LBB25_3
; S_VI-NEXT:  .LBB25_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshl_b32 s10, s17, 8
; S_VI-NEXT:    s_and_b32 s11, s16, 0xff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_and_b32 s11, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s9, s19, 24
; S_VI-NEXT:    s_addk_i32 s10, 0x300
; S_VI-NEXT:    s_lshl_b32 s11, s11, 16
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_and_b32 s10, s10, 0xffff
; S_VI-NEXT:    s_or_b32 s9, s9, s11
; S_VI-NEXT:    s_add_i32 s22, s22, 3
; S_VI-NEXT:    s_lshl_b32 s8, s21, 8
; S_VI-NEXT:    s_or_b32 s9, s9, s10
; S_VI-NEXT:    s_and_b32 s10, s20, 0xff
; S_VI-NEXT:    s_or_b32 s8, s8, s10
; S_VI-NEXT:    s_and_b32 s10, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 24
; S_VI-NEXT:    s_addk_i32 s8, 0x300
; S_VI-NEXT:    s_lshl_b32 s10, s10, 16
; S_VI-NEXT:    s_add_i32 s24, s24, 3
; S_VI-NEXT:    s_and_b32 s8, s8, 0xffff
; S_VI-NEXT:    s_or_b32 s7, s7, s10
; S_VI-NEXT:    s_add_i32 s26, s26, 3
; S_VI-NEXT:    s_lshl_b32 s6, s25, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s8, s24, 0xff
; S_VI-NEXT:    s_or_b32 s6, s6, s8
; S_VI-NEXT:    s_and_b32 s8, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s27, 24
; S_VI-NEXT:    s_addk_i32 s6, 0x300
; S_VI-NEXT:    s_lshl_b32 s8, s8, 16
; S_VI-NEXT:    s_add_i32 s28, s28, 3
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_or_b32 s5, s5, s8
; S_VI-NEXT:    v_add_u32_e32 v1, vcc, 3, v4
; S_VI-NEXT:    s_lshl_b32 s4, s29, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s28, 0xff
; S_VI-NEXT:    s_or_b32 s4, s4, s6
; S_VI-NEXT:    v_and_b32_e32 v1, 0xff, v1
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 24, v5
; S_VI-NEXT:    s_addk_i32 s4, 0x300
; S_VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_VI-NEXT:    s_add_i32 s9, s9, 0x3000000
; S_VI-NEXT:    s_add_i32 s7, s7, 0x3000000
; S_VI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_VI-NEXT:    v_or_b32_e32 v0, s4, v0
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x3000000, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s9
; S_VI-NEXT:    v_mov_b32_e32 v1, s7
; S_VI-NEXT:    v_mov_b32_e32 v2, s5
; S_VI-NEXT:  .LBB25_3: ; %end
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB25_4:
; S_VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_VI-NEXT:    s_branch .LBB25_2
;
; S_GFX9-LABEL: bitcast_v16i8_to_v4f32_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_GFX9-NEXT:    v_readfirstlane_b32 s10, v1
; S_GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_GFX9-NEXT:    v_readfirstlane_b32 s11, v0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB25_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s8, s9
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_cbranch_execnz .LBB25_3
; S_GFX9-NEXT:  .LBB25_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_or_b32 s4, s5, s4
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_addk_i32 s4, 0x300
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_add_i32 s22, s22, 3
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_add_i32 s24, s24, 3
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_add_i32 s26, s26, 3
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_add_i32 s28, s28, 3
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_add_i32 s11, s11, 3
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s9, s8
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_addk_i32 s8, 0x300
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:  .LBB25_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s5
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s7
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB25_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX9-NEXT:    s_branch .LBB25_2
;
; S_GFX11-LABEL: bitcast_v16i8_to_v4f32_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s28, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB25_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_and_b32 s4, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s5, s1, 8
; S_GFX11-NEXT:    s_and_b32 s6, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s3, 8
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s17, 8
; S_GFX11-NEXT:    s_and_b32 s9, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s19, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s21, 8
; S_GFX11-NEXT:    s_and_b32 s9, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s23, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s9, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s25, 8
; S_GFX11-NEXT:    s_and_b32 s11, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s12, s27, 8
; S_GFX11-NEXT:    s_or_b32 s9, s9, s10
; S_GFX11-NEXT:    s_or_b32 s10, s11, s12
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_and_b32 s9, s9, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s10, s10, 16
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB25_3
; S_GFX11-NEXT:  .LBB25_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s18, s18, 3
; S_GFX11-NEXT:    s_or_b32 s4, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s17, 8
; S_GFX11-NEXT:    s_and_b32 s2, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s19, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s20, s20, 3
; S_GFX11-NEXT:    s_or_b32 s5, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s21, 8
; S_GFX11-NEXT:    s_add_i32 s22, s22, 3
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_and_b32 s1, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s2, s23, 8
; S_GFX11-NEXT:    s_add_i32 s24, s24, 3
; S_GFX11-NEXT:    s_add_i32 s26, s26, 3
; S_GFX11-NEXT:    s_or_b32 s1, s2, s1
; S_GFX11-NEXT:    s_and_b32 s2, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s25, 8
; S_GFX11-NEXT:    s_and_b32 s6, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s27, 8
; S_GFX11-NEXT:    s_or_b32 s2, s3, s2
; S_GFX11-NEXT:    s_or_b32 s3, s7, s6
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_addk_i32 s2, 0x300
; S_GFX11-NEXT:    s_addk_i32 s3, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 16
; S_GFX11-NEXT:    s_or_b32 s6, s0, s1
; S_GFX11-NEXT:    s_or_b32 s7, s2, s3
; S_GFX11-NEXT:  .LBB25_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s4 :: v_dual_mov_b32 v1, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s6 :: v_dual_mov_b32 v3, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB25_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX11-NEXT:    s_branch .LBB25_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i8> %a, splat (i8 3)
  %a2 = bitcast <16 x i8> %a1 to <4 x float>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i8> %a to <4 x float>
  br label %end

end:
  %phi = phi <4 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x float> %phi
}

define inreg <2 x double> @bitcast_v2i64_to_v2f64_inreg(<2 x i64> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2i64_to_v2f64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB26_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB26_3
; S_SI-NEXT:  .LBB26_2: ; %cmp.true
; S_SI-NEXT:    s_add_u32 s16, s16, 3
; S_SI-NEXT:    s_addc_u32 s17, s17, 0
; S_SI-NEXT:    s_add_u32 s18, s18, 3
; S_SI-NEXT:    s_addc_u32 s19, s19, 0
; S_SI-NEXT:  .LBB26_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB26_4:
; S_SI-NEXT:    s_branch .LBB26_2
;
; S_VI-LABEL: bitcast_v2i64_to_v2f64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB26_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB26_3
; S_VI-NEXT:  .LBB26_2: ; %cmp.true
; S_VI-NEXT:    s_add_u32 s16, s16, 3
; S_VI-NEXT:    s_addc_u32 s17, s17, 0
; S_VI-NEXT:    s_add_u32 s18, s18, 3
; S_VI-NEXT:    s_addc_u32 s19, s19, 0
; S_VI-NEXT:  .LBB26_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB26_4:
; S_VI-NEXT:    s_branch .LBB26_2
;
; S_GFX9-LABEL: bitcast_v2i64_to_v2f64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB26_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB26_3
; S_GFX9-NEXT:  .LBB26_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_u32 s16, s16, 3
; S_GFX9-NEXT:    s_addc_u32 s17, s17, 0
; S_GFX9-NEXT:    s_add_u32 s18, s18, 3
; S_GFX9-NEXT:    s_addc_u32 s19, s19, 0
; S_GFX9-NEXT:  .LBB26_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB26_4:
; S_GFX9-NEXT:    s_branch .LBB26_2
;
; S_GFX11-LABEL: bitcast_v2i64_to_v2f64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB26_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB26_3
; S_GFX11-NEXT:  .LBB26_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_u32 s0, s0, 3
; S_GFX11-NEXT:    s_addc_u32 s1, s1, 0
; S_GFX11-NEXT:    s_add_u32 s2, s2, 3
; S_GFX11-NEXT:    s_addc_u32 s3, s3, 0
; S_GFX11-NEXT:  .LBB26_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB26_4:
; S_GFX11-NEXT:    s_branch .LBB26_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i64> %a, splat (i64 3)
  %a2 = bitcast <2 x i64> %a1 to <2 x double>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i64> %a to <2 x double>
  br label %end

end:
  %phi = phi <2 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x double> %phi
}

define inreg <2 x i64> @bitcast_v2f64_to_v2i64_inreg(<2 x double> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2f64_to_v2i64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB27_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB27_4
; S_SI-NEXT:  .LBB27_2: ; %cmp.true
; S_SI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_SI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB27_3:
; S_SI-NEXT:    s_branch .LBB27_2
; S_SI-NEXT:  .LBB27_4:
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v1, s17
; S_SI-NEXT:    v_mov_b32_e32 v2, s18
; S_SI-NEXT:    v_mov_b32_e32 v3, s19
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v2f64_to_v2i64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB27_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB27_4
; S_VI-NEXT:  .LBB27_2: ; %cmp.true
; S_VI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_VI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB27_3:
; S_VI-NEXT:    s_branch .LBB27_2
; S_VI-NEXT:  .LBB27_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v2f64_to_v2i64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB27_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB27_4
; S_GFX9-NEXT:  .LBB27_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_GFX9-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB27_3:
; S_GFX9-NEXT:    s_branch .LBB27_2
; S_GFX9-NEXT:  .LBB27_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v2f64_to_v2i64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB27_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB27_4
; S_GFX11-NEXT:  .LBB27_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f64 v[0:1], s[0:1], 1.0
; S_GFX11-NEXT:    v_add_f64 v[2:3], s[2:3], 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB27_3:
; S_GFX11-NEXT:    s_branch .LBB27_2
; S_GFX11-NEXT:  .LBB27_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <2 x double> %a1 to <2 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <2 x double> %a to <2 x i64>
  br label %end

end:
  %phi = phi <2 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i64> %phi
}

define inreg <8 x i16> @bitcast_v2i64_to_v8i16_inreg(<2 x i64> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2i64_to_v8i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB28_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s6, s19, 16
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB28_3
; S_SI-NEXT:  .LBB28_2: ; %cmp.true
; S_SI-NEXT:    s_add_u32 s16, s16, 3
; S_SI-NEXT:    s_addc_u32 s17, s17, 0
; S_SI-NEXT:    s_add_u32 s18, s18, 3
; S_SI-NEXT:    s_addc_u32 s19, s19, 0
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s6, s19, 16
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:  .LBB28_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v2, s17
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    v_mov_b32_e32 v4, s18
; S_SI-NEXT:    v_mov_b32_e32 v6, s19
; S_SI-NEXT:    v_mov_b32_e32 v7, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB28_4:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    s_branch .LBB28_2
;
; S_VI-LABEL: bitcast_v2i64_to_v8i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB28_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB28_3
; S_VI-NEXT:  .LBB28_2: ; %cmp.true
; S_VI-NEXT:    s_add_u32 s18, s18, 3
; S_VI-NEXT:    s_addc_u32 s19, s19, 0
; S_VI-NEXT:    s_add_u32 s16, s16, 3
; S_VI-NEXT:    s_addc_u32 s17, s17, 0
; S_VI-NEXT:  .LBB28_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB28_4:
; S_VI-NEXT:    s_branch .LBB28_2
;
; S_GFX9-LABEL: bitcast_v2i64_to_v8i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB28_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB28_3
; S_GFX9-NEXT:  .LBB28_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_u32 s18, s18, 3
; S_GFX9-NEXT:    s_addc_u32 s19, s19, 0
; S_GFX9-NEXT:    s_add_u32 s16, s16, 3
; S_GFX9-NEXT:    s_addc_u32 s17, s17, 0
; S_GFX9-NEXT:  .LBB28_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB28_4:
; S_GFX9-NEXT:    s_branch .LBB28_2
;
; S_GFX11-LABEL: bitcast_v2i64_to_v8i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB28_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB28_3
; S_GFX11-NEXT:  .LBB28_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_u32 s2, s2, 3
; S_GFX11-NEXT:    s_addc_u32 s3, s3, 0
; S_GFX11-NEXT:    s_add_u32 s0, s0, 3
; S_GFX11-NEXT:    s_addc_u32 s1, s1, 0
; S_GFX11-NEXT:  .LBB28_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB28_4:
; S_GFX11-NEXT:    s_branch .LBB28_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i64> %a, splat (i64 3)
  %a2 = bitcast <2 x i64> %a1 to <8 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i64> %a to <8 x i16>
  br label %end

end:
  %phi = phi <8 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i16> %phi
}

define inreg <2 x i64> @bitcast_v8i16_to_v2i64_inreg(<8 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8i16_to_v2i64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB29_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_cbranch_execnz .LBB29_3
; S_SI-NEXT:  .LBB29_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_add_i32 s4, s4, 0x30000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x30000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x30000
; S_SI-NEXT:    s_add_i32 s7, s7, 0x30000
; S_SI-NEXT:  .LBB29_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB29_4:
; S_SI-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_SI-NEXT:    s_branch .LBB29_2
;
; S_VI-LABEL: bitcast_v8i16_to_v2i64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB29_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB29_3
; S_VI-NEXT:  .LBB29_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB29_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB29_4:
; S_VI-NEXT:    s_branch .LBB29_2
;
; S_GFX9-LABEL: bitcast_v8i16_to_v2i64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB29_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB29_4
; S_GFX9-NEXT:  .LBB29_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB29_3:
; S_GFX9-NEXT:    s_branch .LBB29_2
; S_GFX9-NEXT:  .LBB29_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8i16_to_v2i64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB29_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB29_4
; S_GFX11-NEXT:  .LBB29_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB29_3:
; S_GFX11-NEXT:    s_branch .LBB29_2
; S_GFX11-NEXT:  .LBB29_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i16> %a, splat (i16 3)
  %a2 = bitcast <8 x i16> %a1 to <2 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i16> %a to <2 x i64>
  br label %end

end:
  %phi = phi <2 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i64> %phi
}

define inreg <8 x half> @bitcast_v2i64_to_v8f16_inreg(<2 x i64> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2i64_to_v8f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB30_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_lshr_b32 s4, s19, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_lshr_b32 s4, s18, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_lshr_b32 s4, s17, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    s_cbranch_execnz .LBB30_3
; S_SI-NEXT:  .LBB30_2: ; %cmp.true
; S_SI-NEXT:    s_add_u32 s4, s16, 3
; S_SI-NEXT:    s_addc_u32 s5, s17, 0
; S_SI-NEXT:    s_lshr_b32 s6, s4, 16
; S_SI-NEXT:    s_lshr_b32 s7, s5, 16
; S_SI-NEXT:    s_add_u32 s8, s18, 3
; S_SI-NEXT:    s_addc_u32 s9, s19, 0
; S_SI-NEXT:    s_lshr_b32 s10, s8, 16
; S_SI-NEXT:    s_lshr_b32 s11, s9, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s8
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s11
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s10
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s6
; S_SI-NEXT:  .LBB30_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB30_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB30_2
;
; S_VI-LABEL: bitcast_v2i64_to_v8f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB30_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB30_3
; S_VI-NEXT:  .LBB30_2: ; %cmp.true
; S_VI-NEXT:    s_add_u32 s18, s18, 3
; S_VI-NEXT:    s_addc_u32 s19, s19, 0
; S_VI-NEXT:    s_add_u32 s16, s16, 3
; S_VI-NEXT:    s_addc_u32 s17, s17, 0
; S_VI-NEXT:  .LBB30_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB30_4:
; S_VI-NEXT:    s_branch .LBB30_2
;
; S_GFX9-LABEL: bitcast_v2i64_to_v8f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB30_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB30_3
; S_GFX9-NEXT:  .LBB30_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_u32 s18, s18, 3
; S_GFX9-NEXT:    s_addc_u32 s19, s19, 0
; S_GFX9-NEXT:    s_add_u32 s16, s16, 3
; S_GFX9-NEXT:    s_addc_u32 s17, s17, 0
; S_GFX9-NEXT:  .LBB30_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB30_4:
; S_GFX9-NEXT:    s_branch .LBB30_2
;
; S_GFX11-LABEL: bitcast_v2i64_to_v8f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB30_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB30_3
; S_GFX11-NEXT:  .LBB30_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_u32 s2, s2, 3
; S_GFX11-NEXT:    s_addc_u32 s3, s3, 0
; S_GFX11-NEXT:    s_add_u32 s0, s0, 3
; S_GFX11-NEXT:    s_addc_u32 s1, s1, 0
; S_GFX11-NEXT:  .LBB30_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB30_4:
; S_GFX11-NEXT:    s_branch .LBB30_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i64> %a, splat (i64 3)
  %a2 = bitcast <2 x i64> %a1 to <8 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i64> %a to <8 x half>
  br label %end

end:
  %phi = phi <8 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x half> %phi
}

define inreg <2 x i64> @bitcast_v8f16_to_v2i64_inreg(<8 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8f16_to_v2i64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v11, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v10, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, s22
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB31_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v11
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v9
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v7
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v0, v10, v0
; S_SI-NEXT:    v_or_b32_e32 v1, v8, v1
; S_SI-NEXT:    v_or_b32_e32 v2, v6, v2
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:    s_cbranch_execnz .LBB31_3
; S_SI-NEXT:  .LBB31_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v11
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v10
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v8
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_or_b32_e32 v0, v1, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_or_b32_e32 v1, v3, v1
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v7
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_or_b32_e32 v2, v2, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:  .LBB31_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB31_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB31_2
;
; S_VI-LABEL: bitcast_v8f16_to_v2i64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB31_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB31_4
; S_VI-NEXT:  .LBB31_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s19, v0
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_or_b32_e32 v3, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v4, s17, v0
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_or_b32_e32 v1, v4, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, s4
; S_VI-NEXT:    v_add_f16_sdwa v4, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v0, s16, v0
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v4
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB31_3:
; S_VI-NEXT:    s_branch .LBB31_2
; S_VI-NEXT:  .LBB31_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8f16_to_v2i64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB31_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB31_4
; S_GFX9-NEXT:  .LBB31_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB31_3:
; S_GFX9-NEXT:    s_branch .LBB31_2
; S_GFX9-NEXT:  .LBB31_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8f16_to_v2i64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB31_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB31_4
; S_GFX11-NEXT:  .LBB31_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB31_3:
; S_GFX11-NEXT:    s_branch .LBB31_2
; S_GFX11-NEXT:  .LBB31_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <8 x half> %a1 to <2 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <8 x half> %a to <2 x i64>
  br label %end

end:
  %phi = phi <2 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i64> %phi
}

define inreg <8 x bfloat> @bitcast_v2i64_to_v8bf16_inreg(<2 x i64> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2i64_to_v8bf16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB32_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s6, s19, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s7, s19, 16
; S_SI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s9, s18, 16
; S_SI-NEXT:    s_and_b32 s10, s17, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s11, s17, 16
; S_SI-NEXT:    s_and_b32 s12, s16, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s13, s16, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB32_3
; S_SI-NEXT:  .LBB32_2: ; %cmp.true
; S_SI-NEXT:    s_add_u32 s4, s16, 3
; S_SI-NEXT:    s_addc_u32 s5, s17, 0
; S_SI-NEXT:    s_add_u32 s9, s18, 3
; S_SI-NEXT:    s_addc_u32 s7, s19, 0
; S_SI-NEXT:    s_and_b32 s6, s7, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_and_b32 s8, s9, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s9, s9, 16
; S_SI-NEXT:    s_and_b32 s10, s5, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s11, s5, 16
; S_SI-NEXT:    s_and_b32 s12, s4, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s13, s4, 16
; S_SI-NEXT:  .LBB32_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s13
; S_SI-NEXT:    v_mov_b32_e32 v1, s12
; S_SI-NEXT:    v_mov_b32_e32 v2, s11
; S_SI-NEXT:    v_mov_b32_e32 v3, s10
; S_SI-NEXT:    v_mov_b32_e32 v4, s9
; S_SI-NEXT:    v_mov_b32_e32 v5, s8
; S_SI-NEXT:    v_mov_b32_e32 v6, s7
; S_SI-NEXT:    v_mov_b32_e32 v7, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB32_4:
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    s_branch .LBB32_2
;
; S_VI-LABEL: bitcast_v2i64_to_v8bf16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB32_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB32_3
; S_VI-NEXT:  .LBB32_2: ; %cmp.true
; S_VI-NEXT:    s_add_u32 s18, s18, 3
; S_VI-NEXT:    s_addc_u32 s19, s19, 0
; S_VI-NEXT:    s_add_u32 s16, s16, 3
; S_VI-NEXT:    s_addc_u32 s17, s17, 0
; S_VI-NEXT:  .LBB32_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB32_4:
; S_VI-NEXT:    s_branch .LBB32_2
;
; S_GFX9-LABEL: bitcast_v2i64_to_v8bf16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB32_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB32_3
; S_GFX9-NEXT:  .LBB32_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_u32 s18, s18, 3
; S_GFX9-NEXT:    s_addc_u32 s19, s19, 0
; S_GFX9-NEXT:    s_add_u32 s16, s16, 3
; S_GFX9-NEXT:    s_addc_u32 s17, s17, 0
; S_GFX9-NEXT:  .LBB32_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB32_4:
; S_GFX9-NEXT:    s_branch .LBB32_2
;
; S_GFX11-LABEL: bitcast_v2i64_to_v8bf16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB32_4
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB32_3
; S_GFX11-NEXT:  .LBB32_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_u32 s2, s2, 3
; S_GFX11-NEXT:    s_addc_u32 s3, s3, 0
; S_GFX11-NEXT:    s_add_u32 s0, s0, 3
; S_GFX11-NEXT:    s_addc_u32 s1, s1, 0
; S_GFX11-NEXT:  .LBB32_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB32_4:
; S_GFX11-NEXT:    s_branch .LBB32_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i64> %a, splat (i64 3)
  %a2 = bitcast <2 x i64> %a1 to <8 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i64> %a to <8 x bfloat>
  br label %end

end:
  %phi = phi <8 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x bfloat> %phi
}

define inreg <2 x i64> @bitcast_v8bf16_to_v2i64_inreg(<8 x bfloat> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8bf16_to_v2i64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    v_mul_f32_e64 v10, 1.0, s17
; S_SI-NEXT:    v_mul_f32_e64 v11, 1.0, s16
; S_SI-NEXT:    v_mul_f32_e64 v8, 1.0, s19
; S_SI-NEXT:    v_mul_f32_e64 v9, 1.0, s18
; S_SI-NEXT:    v_mul_f32_e64 v6, 1.0, s21
; S_SI-NEXT:    v_mul_f32_e64 v7, 1.0, s20
; S_SI-NEXT:    v_mul_f32_e64 v4, 1.0, s23
; S_SI-NEXT:    v_mul_f32_e64 v5, 1.0, s22
; S_SI-NEXT:    s_cbranch_scc0 .LBB33_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v10
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v8
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v6
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v0, v0, v11, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v1, v9, 16
; S_SI-NEXT:    v_alignbit_b32 v2, v2, v7, 16
; S_SI-NEXT:    v_alignbit_b32 v3, v3, v5, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB33_3
; S_SI-NEXT:  .LBB33_2: ; %cmp.true
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v10
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v11
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v8
; S_SI-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v9
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v6
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v1, 16
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v7
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_and_b32_e32 v4, 0xffff0000, v4
; S_SI-NEXT:    v_alignbit_b32 v2, v3, v2, 16
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x40c00000, v4
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v3, 16
; S_SI-NEXT:  .LBB33_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB33_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB33_2
;
; S_VI-LABEL: bitcast_v8bf16_to_v2i64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB33_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB33_4
; S_VI-NEXT:  .LBB33_2: ; %cmp.true
; S_VI-NEXT:    s_lshl_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s19, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s18, 16
; S_VI-NEXT:    v_alignbit_b32 v3, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v4, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v2
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v4, v5, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s17, 16
; S_VI-NEXT:    v_alignbit_b32 v2, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s17, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v4, v5, vcc
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_VI-NEXT:    s_lshl_b32 s4, s16, 16
; S_VI-NEXT:    v_alignbit_b32 v1, v4, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_add_f32_e32 v0, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_bfe_u32 v5, v0, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v0
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v0
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v0, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_VI-NEXT:    v_alignbit_b32 v0, v0, v4, 16
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB33_3:
; S_VI-NEXT:    s_branch .LBB33_2
; S_VI-NEXT:  .LBB33_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8bf16_to_v2i64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB33_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB33_4
; S_GFX9-NEXT:  .LBB33_2: ; %cmp.true
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s19, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_GFX9-NEXT:    v_mov_b32_e32 v4, 0xffff
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s18
; S_GFX9-NEXT:    v_lshl_or_b32 v3, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s18, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v5, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v2
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v5, v6, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s17
; S_GFX9-NEXT:    v_lshl_or_b32 v2, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v1
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s17, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v6, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v5, v4, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s16
; S_GFX9-NEXT:    v_lshl_or_b32 v1, v1, 16, v5
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_bfe_u32 v6, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v0
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v4, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshl_or_b32 v0, v5, 16, v0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB33_3:
; S_GFX9-NEXT:    s_branch .LBB33_2
; S_GFX9-NEXT:  .LBB33_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8bf16_to_v2i64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB33_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB33_4
; S_GFX11-NEXT:  .LBB33_2: ; %cmp.true
; S_GFX11-NEXT:    s_lshl_b32 s4, s3, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s3
; S_GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s4
; S_GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s2
; S_GFX11-NEXT:    s_lshl_b32 s2, s2, 16
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s4
; S_GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v0
; S_GFX11-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, v4, v1
; S_GFX11-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_GFX11-NEXT:    v_add_f32_e64 v5, 0x40c00000, s2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, 0x7fff, v4
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; S_GFX11-NEXT:    v_bfe_u32 v2, v5, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v8, 0x40c00000, s1
; S_GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s0
; S_GFX11-NEXT:    v_cndmask_b32_e32 v1, v4, v6, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v5
; S_GFX11-NEXT:    v_add_f32_e64 v4, 0x40c00000, s3
; S_GFX11-NEXT:    v_or_b32_e32 v13, 0x400000, v8
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v3, v7, v9 :: v_dual_add_nc_u32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v5, v5
; S_GFX11-NEXT:    v_bfe_u32 v7, v4, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v9, 0x40c00000, s0
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v3
; S_GFX11-NEXT:    v_or_b32_e32 v3, 0x400000, v5
; S_GFX11-NEXT:    v_bfe_u32 v5, v8, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v4
; S_GFX11-NEXT:    v_or_b32_e32 v12, 0x400000, v4
; S_GFX11-NEXT:    v_bfe_u32 v11, v9, 16, 1
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v2, v3, vcc_lo
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, v5, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v8, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v11, v11, v9
; S_GFX11-NEXT:    v_bfe_u32 v10, v3, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, 0x7fff, v5
; S_GFX11-NEXT:    v_or_b32_e32 v14, 0x400000, v3
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v8, 0x7fff, v11
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v5, v5, v13 :: v_dual_add_nc_u32 v10, v10, v3
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_or_b32_e32 v11, 0x400000, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, 0x7fff, v10
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX11-NEXT:    v_and_b32_e32 v0, 0xffff, v0
; S_GFX11-NEXT:    v_and_b32_e32 v2, 0xffff, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v3, v10, v14, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v4, v4
; S_GFX11-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; S_GFX11-NEXT:    v_lshl_or_b32 v2, v6, 16, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_GFX11-NEXT:    v_cndmask_b32_e32 v4, v7, v12, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v9, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_GFX11-NEXT:    v_cndmask_b32_e32 v7, v8, v11, vcc_lo
; S_GFX11-NEXT:    v_and_b32_e32 v8, 0xffff, v3
; S_GFX11-NEXT:    v_lshl_or_b32 v3, v1, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshl_or_b32 v1, v4, 16, v5
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 16, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; S_GFX11-NEXT:    v_lshl_or_b32 v0, v7, 16, v8
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB33_3:
; S_GFX11-NEXT:    s_branch .LBB33_2
; S_GFX11-NEXT:  .LBB33_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <8 x bfloat> %a1 to <2 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <8 x bfloat> %a to <2 x i64>
  br label %end

end:
  %phi = phi <2 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i64> %phi
}

define inreg <16 x i8> @bitcast_v2i64_to_v16i8_inreg(<2 x i64> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2i64_to_v16i8_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB34_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v11, s19, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s19, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s19, v0, 8
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v3, s17, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s17, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 8
; S_SI-NEXT:    s_lshr_b32 s6, s19, 24
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    s_lshr_b32 s8, s19, 8
; S_SI-NEXT:    s_lshr_b32 s9, s17, 24
; S_SI-NEXT:    s_lshr_b32 s10, s17, 16
; S_SI-NEXT:    s_lshr_b32 s11, s17, 8
; S_SI-NEXT:    s_cbranch_execnz .LBB34_3
; S_SI-NEXT:  .LBB34_2: ; %cmp.true
; S_SI-NEXT:    s_add_u32 s16, s16, 3
; S_SI-NEXT:    s_addc_u32 s17, s17, 0
; S_SI-NEXT:    s_add_u32 s18, s18, 3
; S_SI-NEXT:    s_addc_u32 s19, s19, 0
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v11, s19, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s19, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s19, v0, 8
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v3, s17, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s17, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 8
; S_SI-NEXT:    s_lshr_b32 s6, s19, 24
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    s_lshr_b32 s8, s19, 8
; S_SI-NEXT:    s_lshr_b32 s9, s17, 24
; S_SI-NEXT:    s_lshr_b32 s10, s17, 16
; S_SI-NEXT:    s_lshr_b32 s11, s17, 8
; S_SI-NEXT:  .LBB34_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_mov_b32_e32 v4, s17
; S_SI-NEXT:    v_mov_b32_e32 v5, s11
; S_SI-NEXT:    v_mov_b32_e32 v6, s10
; S_SI-NEXT:    v_mov_b32_e32 v7, s9
; S_SI-NEXT:    v_mov_b32_e32 v8, s18
; S_SI-NEXT:    v_mov_b32_e32 v12, s19
; S_SI-NEXT:    v_mov_b32_e32 v13, s8
; S_SI-NEXT:    v_mov_b32_e32 v14, s7
; S_SI-NEXT:    v_mov_b32_e32 v15, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB34_4:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr10
; S_SI-NEXT:    ; implicit-def: $vgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    s_branch .LBB34_2
;
; S_VI-LABEL: bitcast_v2i64_to_v16i8_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB34_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s12, s19, 8
; S_VI-NEXT:    s_lshr_b32 s13, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s21, s17, 8
; S_VI-NEXT:    s_lshr_b32 s22, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_VI-NEXT:    s_cbranch_execnz .LBB34_3
; S_VI-NEXT:  .LBB34_2: ; %cmp.true
; S_VI-NEXT:    s_add_u32 s16, s16, 3
; S_VI-NEXT:    s_addc_u32 s17, s17, 0
; S_VI-NEXT:    s_add_u32 s18, s18, 3
; S_VI-NEXT:    s_addc_u32 s19, s19, 0
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s12, s19, 8
; S_VI-NEXT:    s_lshr_b32 s13, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s21, s17, 8
; S_VI-NEXT:    s_lshr_b32 s22, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:  .LBB34_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s23
; S_VI-NEXT:    v_mov_b32_e32 v2, s22
; S_VI-NEXT:    v_mov_b32_e32 v3, s6
; S_VI-NEXT:    v_mov_b32_e32 v4, s17
; S_VI-NEXT:    v_mov_b32_e32 v5, s21
; S_VI-NEXT:    v_mov_b32_e32 v6, s20
; S_VI-NEXT:    v_mov_b32_e32 v7, s15
; S_VI-NEXT:    v_mov_b32_e32 v8, s18
; S_VI-NEXT:    v_mov_b32_e32 v9, s14
; S_VI-NEXT:    v_mov_b32_e32 v10, s13
; S_VI-NEXT:    v_mov_b32_e32 v11, s4
; S_VI-NEXT:    v_mov_b32_e32 v12, s19
; S_VI-NEXT:    v_mov_b32_e32 v13, s12
; S_VI-NEXT:    v_mov_b32_e32 v14, s11
; S_VI-NEXT:    v_mov_b32_e32 v15, s10
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB34_4:
; S_VI-NEXT:    ; implicit-def: $sgpr23
; S_VI-NEXT:    ; implicit-def: $sgpr22
; S_VI-NEXT:    ; implicit-def: $sgpr6
; S_VI-NEXT:    ; implicit-def: $sgpr21
; S_VI-NEXT:    ; implicit-def: $sgpr20
; S_VI-NEXT:    ; implicit-def: $sgpr15
; S_VI-NEXT:    ; implicit-def: $sgpr14
; S_VI-NEXT:    ; implicit-def: $sgpr13
; S_VI-NEXT:    ; implicit-def: $sgpr4
; S_VI-NEXT:    ; implicit-def: $sgpr12
; S_VI-NEXT:    ; implicit-def: $sgpr11
; S_VI-NEXT:    ; implicit-def: $sgpr10
; S_VI-NEXT:    s_branch .LBB34_2
;
; S_GFX9-LABEL: bitcast_v2i64_to_v16i8_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB34_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_lshr_b32 s10, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s12, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s13, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s14, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s15, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s20, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s21, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s22, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 8
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_GFX9-NEXT:    s_cbranch_execnz .LBB34_3
; S_GFX9-NEXT:  .LBB34_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_u32 s16, s16, 3
; S_GFX9-NEXT:    s_addc_u32 s17, s17, 0
; S_GFX9-NEXT:    s_add_u32 s18, s18, 3
; S_GFX9-NEXT:    s_addc_u32 s19, s19, 0
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_GFX9-NEXT:    s_lshr_b32 s10, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s12, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s13, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s14, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s15, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s20, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s21, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s22, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 8
; S_GFX9-NEXT:  .LBB34_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s23
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v4, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s15
; S_GFX9-NEXT:    v_mov_b32_e32 v8, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v9, s14
; S_GFX9-NEXT:    v_mov_b32_e32 v10, s13
; S_GFX9-NEXT:    v_mov_b32_e32 v11, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v12, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v13, s12
; S_GFX9-NEXT:    v_mov_b32_e32 v14, s11
; S_GFX9-NEXT:    v_mov_b32_e32 v15, s10
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB34_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr23
; S_GFX9-NEXT:    ; implicit-def: $sgpr22
; S_GFX9-NEXT:    ; implicit-def: $sgpr6
; S_GFX9-NEXT:    ; implicit-def: $sgpr21
; S_GFX9-NEXT:    ; implicit-def: $sgpr20
; S_GFX9-NEXT:    ; implicit-def: $sgpr15
; S_GFX9-NEXT:    ; implicit-def: $sgpr14
; S_GFX9-NEXT:    ; implicit-def: $sgpr13
; S_GFX9-NEXT:    ; implicit-def: $sgpr4
; S_GFX9-NEXT:    ; implicit-def: $sgpr12
; S_GFX9-NEXT:    ; implicit-def: $sgpr11
; S_GFX9-NEXT:    ; implicit-def: $sgpr10
; S_GFX9-NEXT:    s_branch .LBB34_2
;
; S_GFX11-LABEL: bitcast_v2i64_to_v16i8_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s18, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB34_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_lshr_b32 s8, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s9, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s10, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s13, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s14, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s15, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s0, 8
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[0:1], 24
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s18
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB34_3
; S_GFX11-NEXT:  .LBB34_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_u32 s0, s0, 3
; S_GFX11-NEXT:    s_addc_u32 s1, s1, 0
; S_GFX11-NEXT:    s_add_u32 s2, s2, 3
; S_GFX11-NEXT:    s_addc_u32 s3, s3, 0
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[0:1], 24
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b32 s8, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s9, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s10, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s13, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s14, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s15, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s0, 8
; S_GFX11-NEXT:  .LBB34_3: ; %end
; S_GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s17
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s16 :: v_dual_mov_b32 v3, s6
; S_GFX11-NEXT:    v_dual_mov_b32 v4, s1 :: v_dual_mov_b32 v5, s15
; S_GFX11-NEXT:    v_dual_mov_b32 v6, s14 :: v_dual_mov_b32 v7, s13
; S_GFX11-NEXT:    v_dual_mov_b32 v8, s2 :: v_dual_mov_b32 v9, s12
; S_GFX11-NEXT:    v_dual_mov_b32 v10, s11 :: v_dual_mov_b32 v11, s4
; S_GFX11-NEXT:    v_dual_mov_b32 v12, s3 :: v_dual_mov_b32 v13, s10
; S_GFX11-NEXT:    v_dual_mov_b32 v14, s9 :: v_dual_mov_b32 v15, s8
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB34_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr17
; S_GFX11-NEXT:    ; implicit-def: $sgpr16
; S_GFX11-NEXT:    ; implicit-def: $sgpr6
; S_GFX11-NEXT:    ; implicit-def: $sgpr15
; S_GFX11-NEXT:    ; implicit-def: $sgpr14
; S_GFX11-NEXT:    ; implicit-def: $sgpr13
; S_GFX11-NEXT:    ; implicit-def: $sgpr12
; S_GFX11-NEXT:    ; implicit-def: $sgpr11
; S_GFX11-NEXT:    ; implicit-def: $sgpr4
; S_GFX11-NEXT:    ; implicit-def: $sgpr10
; S_GFX11-NEXT:    ; implicit-def: $sgpr9
; S_GFX11-NEXT:    ; implicit-def: $sgpr8
; S_GFX11-NEXT:    s_branch .LBB34_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i64> %a, splat (i64 3)
  %a2 = bitcast <2 x i64> %a1 to <16 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i64> %a to <16 x i8>
  br label %end

end:
  %phi = phi <16 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i8> %phi
}

define inreg <2 x i64> @bitcast_v16i8_to_v2i64_inreg(<16 x i8> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v16i8_to_v2i64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_SI-NEXT:    v_mov_b32_e32 v4, v0
; S_SI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 24, v1
; S_SI-NEXT:    s_cbranch_scc0 .LBB35_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s5, 16
; S_SI-NEXT:    s_lshl_b32 s6, s19, 24
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_lshl_b32 s7, s23, 24
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_lshl_b32 s8, s27, 24
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v4
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    s_cbranch_execnz .LBB35_3
; S_SI-NEXT:  .LBB35_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s6, s18, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s19, 24
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s7, s22, 0xff
; S_SI-NEXT:    s_addk_i32 s5, 0x300
; S_SI-NEXT:    s_lshl_b32 s6, s23, 24
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_add_i32 s26, s26, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s8, s26, 0xff
; S_SI-NEXT:    s_addk_i32 s6, 0x300
; S_SI-NEXT:    s_lshl_b32 s7, s27, 24
; S_SI-NEXT:    s_lshl_b32 s8, s8, 16
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_add_i32 s28, s28, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_add_i32_e32 v0, vcc, 3, v4
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v0
; S_SI-NEXT:    s_addk_i32 s7, 0x300
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    s_add_i32 s4, s4, 0x3000000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x3000000
; S_SI-NEXT:    v_or_b32_e32 v0, s7, v0
; S_SI-NEXT:    v_add_i32_e32 v3, vcc, 0x3000000, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:  .LBB35_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB35_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB35_2
;
; S_VI-LABEL: bitcast_v16i8_to_v2i64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_VI-NEXT:    v_mov_b32_e32 v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, v0
; S_VI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_VI-NEXT:    s_cbranch_scc0 .LBB35_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_and_b32 s4, s16, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s17, 8
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s19, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    s_lshl_b32 s5, s5, 16
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s20, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s21, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_lshl_b32 s6, s6, 16
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s24, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s25, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s27, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_lshl_b32 s7, s7, 16
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s28, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s29, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 8, v5
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    v_or_b32_sdwa v0, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s4
; S_VI-NEXT:    v_mov_b32_e32 v1, s5
; S_VI-NEXT:    v_mov_b32_e32 v2, s6
; S_VI-NEXT:    s_cbranch_execnz .LBB35_3
; S_VI-NEXT:  .LBB35_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshl_b32 s10, s17, 8
; S_VI-NEXT:    s_and_b32 s11, s16, 0xff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_and_b32 s11, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s9, s19, 24
; S_VI-NEXT:    s_addk_i32 s10, 0x300
; S_VI-NEXT:    s_lshl_b32 s11, s11, 16
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_and_b32 s10, s10, 0xffff
; S_VI-NEXT:    s_or_b32 s9, s9, s11
; S_VI-NEXT:    s_add_i32 s22, s22, 3
; S_VI-NEXT:    s_lshl_b32 s8, s21, 8
; S_VI-NEXT:    s_or_b32 s9, s9, s10
; S_VI-NEXT:    s_and_b32 s10, s20, 0xff
; S_VI-NEXT:    s_or_b32 s8, s8, s10
; S_VI-NEXT:    s_and_b32 s10, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 24
; S_VI-NEXT:    s_addk_i32 s8, 0x300
; S_VI-NEXT:    s_lshl_b32 s10, s10, 16
; S_VI-NEXT:    s_add_i32 s24, s24, 3
; S_VI-NEXT:    s_and_b32 s8, s8, 0xffff
; S_VI-NEXT:    s_or_b32 s7, s7, s10
; S_VI-NEXT:    s_add_i32 s26, s26, 3
; S_VI-NEXT:    s_lshl_b32 s6, s25, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s8, s24, 0xff
; S_VI-NEXT:    s_or_b32 s6, s6, s8
; S_VI-NEXT:    s_and_b32 s8, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s27, 24
; S_VI-NEXT:    s_addk_i32 s6, 0x300
; S_VI-NEXT:    s_lshl_b32 s8, s8, 16
; S_VI-NEXT:    s_add_i32 s28, s28, 3
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_or_b32 s5, s5, s8
; S_VI-NEXT:    v_add_u32_e32 v1, vcc, 3, v4
; S_VI-NEXT:    s_lshl_b32 s4, s29, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s28, 0xff
; S_VI-NEXT:    s_or_b32 s4, s4, s6
; S_VI-NEXT:    v_and_b32_e32 v1, 0xff, v1
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 24, v5
; S_VI-NEXT:    s_addk_i32 s4, 0x300
; S_VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_VI-NEXT:    s_add_i32 s9, s9, 0x3000000
; S_VI-NEXT:    s_add_i32 s7, s7, 0x3000000
; S_VI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_VI-NEXT:    v_or_b32_e32 v0, s4, v0
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x3000000, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s9
; S_VI-NEXT:    v_mov_b32_e32 v1, s7
; S_VI-NEXT:    v_mov_b32_e32 v2, s5
; S_VI-NEXT:  .LBB35_3: ; %end
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB35_4:
; S_VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_VI-NEXT:    s_branch .LBB35_2
;
; S_GFX9-LABEL: bitcast_v16i8_to_v2i64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_GFX9-NEXT:    v_readfirstlane_b32 s10, v1
; S_GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_GFX9-NEXT:    v_readfirstlane_b32 s11, v0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB35_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s8, s9
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_cbranch_execnz .LBB35_3
; S_GFX9-NEXT:  .LBB35_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_or_b32 s4, s5, s4
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_addk_i32 s4, 0x300
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_add_i32 s22, s22, 3
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_add_i32 s24, s24, 3
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_add_i32 s26, s26, 3
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_add_i32 s28, s28, 3
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_add_i32 s11, s11, 3
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s9, s8
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_addk_i32 s8, 0x300
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:  .LBB35_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s5
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s7
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB35_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX9-NEXT:    s_branch .LBB35_2
;
; S_GFX11-LABEL: bitcast_v16i8_to_v2i64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s28, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB35_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_and_b32 s4, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s5, s1, 8
; S_GFX11-NEXT:    s_and_b32 s6, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s3, 8
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s17, 8
; S_GFX11-NEXT:    s_and_b32 s9, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s19, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s21, 8
; S_GFX11-NEXT:    s_and_b32 s9, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s23, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s9, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s25, 8
; S_GFX11-NEXT:    s_and_b32 s11, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s12, s27, 8
; S_GFX11-NEXT:    s_or_b32 s9, s9, s10
; S_GFX11-NEXT:    s_or_b32 s10, s11, s12
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_and_b32 s9, s9, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s10, s10, 16
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB35_3
; S_GFX11-NEXT:  .LBB35_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s18, s18, 3
; S_GFX11-NEXT:    s_or_b32 s4, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s17, 8
; S_GFX11-NEXT:    s_and_b32 s2, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s19, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s20, s20, 3
; S_GFX11-NEXT:    s_or_b32 s5, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s21, 8
; S_GFX11-NEXT:    s_add_i32 s22, s22, 3
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_and_b32 s1, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s2, s23, 8
; S_GFX11-NEXT:    s_add_i32 s24, s24, 3
; S_GFX11-NEXT:    s_add_i32 s26, s26, 3
; S_GFX11-NEXT:    s_or_b32 s1, s2, s1
; S_GFX11-NEXT:    s_and_b32 s2, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s25, 8
; S_GFX11-NEXT:    s_and_b32 s6, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s27, 8
; S_GFX11-NEXT:    s_or_b32 s2, s3, s2
; S_GFX11-NEXT:    s_or_b32 s3, s7, s6
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_addk_i32 s2, 0x300
; S_GFX11-NEXT:    s_addk_i32 s3, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 16
; S_GFX11-NEXT:    s_or_b32 s6, s0, s1
; S_GFX11-NEXT:    s_or_b32 s7, s2, s3
; S_GFX11-NEXT:  .LBB35_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s4 :: v_dual_mov_b32 v1, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s6 :: v_dual_mov_b32 v3, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB35_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX11-NEXT:    s_branch .LBB35_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i8> %a, splat (i8 3)
  %a2 = bitcast <16 x i8> %a1 to <2 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i8> %a to <2 x i64>
  br label %end

end:
  %phi = phi <2 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i64> %phi
}

define inreg <8 x i16> @bitcast_v2f64_to_v8i16_inreg(<2 x double> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2f64_to_v8i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB36_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v5, s19, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 16
; S_SI-NEXT:    s_lshr_b32 s7, s19, 16
; S_SI-NEXT:    s_lshr_b32 s6, s17, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB36_4
; S_SI-NEXT:  .LBB36_2: ; %cmp.true
; S_SI-NEXT:    v_add_f64 v[8:9], s[18:19], 1.0
; S_SI-NEXT:    v_add_f64 v[10:11], s[16:17], 1.0
; S_SI-NEXT:    v_alignbit_b32 v5, v9, v8, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v11, v10, 16
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v9
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v11
; S_SI-NEXT:    s_branch .LBB36_5
; S_SI-NEXT:  .LBB36_3:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    s_branch .LBB36_2
; S_SI-NEXT:  .LBB36_4:
; S_SI-NEXT:    v_mov_b32_e32 v11, s17
; S_SI-NEXT:    v_mov_b32_e32 v9, s19
; S_SI-NEXT:    v_mov_b32_e32 v8, s18
; S_SI-NEXT:    v_mov_b32_e32 v10, s16
; S_SI-NEXT:    v_mov_b32_e32 v3, s6
; S_SI-NEXT:    v_mov_b32_e32 v7, s7
; S_SI-NEXT:  .LBB36_5: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, v10
; S_SI-NEXT:    v_mov_b32_e32 v2, v11
; S_SI-NEXT:    v_mov_b32_e32 v4, v8
; S_SI-NEXT:    v_mov_b32_e32 v6, v9
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v2f64_to_v8i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB36_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB36_4
; S_VI-NEXT:  .LBB36_2: ; %cmp.true
; S_VI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_VI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB36_3:
; S_VI-NEXT:    s_branch .LBB36_2
; S_VI-NEXT:  .LBB36_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v2f64_to_v8i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB36_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB36_4
; S_GFX9-NEXT:  .LBB36_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_GFX9-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB36_3:
; S_GFX9-NEXT:    s_branch .LBB36_2
; S_GFX9-NEXT:  .LBB36_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v2f64_to_v8i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB36_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB36_4
; S_GFX11-NEXT:  .LBB36_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f64 v[2:3], s[2:3], 1.0
; S_GFX11-NEXT:    v_add_f64 v[0:1], s[0:1], 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB36_3:
; S_GFX11-NEXT:    s_branch .LBB36_2
; S_GFX11-NEXT:  .LBB36_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <2 x double> %a1 to <8 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x double> %a to <8 x i16>
  br label %end

end:
  %phi = phi <8 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i16> %phi
}

define inreg <2 x double> @bitcast_v8i16_to_v2f64_inreg(<8 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8i16_to_v2f64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB37_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_cbranch_execnz .LBB37_3
; S_SI-NEXT:  .LBB37_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s19, 16
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 16
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s8, s23, 16
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_add_i32 s4, s4, 0x30000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x30000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x30000
; S_SI-NEXT:    s_add_i32 s7, s7, 0x30000
; S_SI-NEXT:  .LBB37_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    v_mov_b32_e32 v3, s7
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB37_4:
; S_SI-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_SI-NEXT:    s_branch .LBB37_2
;
; S_VI-LABEL: bitcast_v8i16_to_v2f64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB37_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB37_3
; S_VI-NEXT:  .LBB37_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB37_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB37_4:
; S_VI-NEXT:    s_branch .LBB37_2
;
; S_GFX9-LABEL: bitcast_v8i16_to_v2f64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB37_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB37_4
; S_GFX9-NEXT:  .LBB37_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB37_3:
; S_GFX9-NEXT:    s_branch .LBB37_2
; S_GFX9-NEXT:  .LBB37_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8i16_to_v2f64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB37_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB37_4
; S_GFX11-NEXT:  .LBB37_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB37_3:
; S_GFX11-NEXT:    s_branch .LBB37_2
; S_GFX11-NEXT:  .LBB37_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i16> %a, splat (i16 3)
  %a2 = bitcast <8 x i16> %a1 to <2 x double>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i16> %a to <2 x double>
  br label %end

end:
  %phi = phi <2 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x double> %phi
}

define inreg <8 x half> @bitcast_v2f64_to_v8f16_inreg(<2 x double> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2f64_to_v8f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB38_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_lshr_b32 s4, s19, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_lshr_b32 s4, s18, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_lshr_b32 s4, s17, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_lshr_b32 s4, s16, 16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    s_cbranch_execnz .LBB38_3
; S_SI-NEXT:  .LBB38_2: ; %cmp.true
; S_SI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_SI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_SI-NEXT:    v_lshrrev_b32_e32 v8, 16, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v9, 16, v1
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 16, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v8
; S_SI-NEXT:  .LBB38_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB38_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB38_2
;
; S_VI-LABEL: bitcast_v2f64_to_v8f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB38_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB38_4
; S_VI-NEXT:  .LBB38_2: ; %cmp.true
; S_VI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_VI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB38_3:
; S_VI-NEXT:    s_branch .LBB38_2
; S_VI-NEXT:  .LBB38_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v2f64_to_v8f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB38_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB38_4
; S_GFX9-NEXT:  .LBB38_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_GFX9-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB38_3:
; S_GFX9-NEXT:    s_branch .LBB38_2
; S_GFX9-NEXT:  .LBB38_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v2f64_to_v8f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB38_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB38_4
; S_GFX11-NEXT:  .LBB38_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f64 v[2:3], s[2:3], 1.0
; S_GFX11-NEXT:    v_add_f64 v[0:1], s[0:1], 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB38_3:
; S_GFX11-NEXT:    s_branch .LBB38_2
; S_GFX11-NEXT:  .LBB38_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <2 x double> %a1 to <8 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x double> %a to <8 x half>
  br label %end

end:
  %phi = phi <8 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x half> %phi
}

define inreg <2 x double> @bitcast_v8f16_to_v2f64_inreg(<8 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8f16_to_v2f64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v11, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v10, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, s22
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB39_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v11
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v9
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v7
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v0, v10, v0
; S_SI-NEXT:    v_or_b32_e32 v1, v8, v1
; S_SI-NEXT:    v_or_b32_e32 v2, v6, v2
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:    s_cbranch_execnz .LBB39_3
; S_SI-NEXT:  .LBB39_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v11
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v10
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v8
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_or_b32_e32 v0, v1, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_or_b32_e32 v1, v3, v1
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v7
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_or_b32_e32 v2, v2, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v3, v4, v3
; S_SI-NEXT:  .LBB39_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB39_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB39_2
;
; S_VI-LABEL: bitcast_v8f16_to_v2f64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB39_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB39_4
; S_VI-NEXT:  .LBB39_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s19, v0
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_or_b32_e32 v3, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v1
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v4, s17, v0
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_or_b32_e32 v1, v4, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, s4
; S_VI-NEXT:    v_add_f16_sdwa v4, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v0, s16, v0
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v4
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB39_3:
; S_VI-NEXT:    s_branch .LBB39_2
; S_VI-NEXT:  .LBB39_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8f16_to_v2f64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB39_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB39_4
; S_GFX9-NEXT:  .LBB39_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB39_3:
; S_GFX9-NEXT:    s_branch .LBB39_2
; S_GFX9-NEXT:  .LBB39_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8f16_to_v2f64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB39_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB39_4
; S_GFX11-NEXT:  .LBB39_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB39_3:
; S_GFX11-NEXT:    s_branch .LBB39_2
; S_GFX11-NEXT:  .LBB39_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <8 x half> %a1 to <2 x double>
  br label %end

cmp.false:
  %a3 = bitcast <8 x half> %a to <2 x double>
  br label %end

end:
  %phi = phi <2 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x double> %phi
}

define inreg <8 x bfloat> @bitcast_v2f64_to_v8bf16_inreg(<2 x double> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2f64_to_v8bf16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB40_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s13, s19, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s12, s19, 16
; S_SI-NEXT:    s_and_b32 s11, s18, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s10, s18, 16
; S_SI-NEXT:    s_and_b32 s9, s17, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s8, s17, 16
; S_SI-NEXT:    s_and_b32 s7, s16, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s6, s16, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB40_4
; S_SI-NEXT:  .LBB40_2: ; %cmp.true
; S_SI-NEXT:    v_add_f64 v[0:1], s[18:19], 1.0
; S_SI-NEXT:    v_add_f64 v[8:9], s[16:17], 1.0
; S_SI-NEXT:    v_and_b32_e32 v7, 0xffff0000, v1
; S_SI-NEXT:    v_lshlrev_b32_e32 v6, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v5, 0xffff0000, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v9
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v9
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v8
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB40_3:
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    s_branch .LBB40_2
; S_SI-NEXT:  .LBB40_4:
; S_SI-NEXT:    v_mov_b32_e32 v7, s13
; S_SI-NEXT:    v_mov_b32_e32 v6, s12
; S_SI-NEXT:    v_mov_b32_e32 v5, s11
; S_SI-NEXT:    v_mov_b32_e32 v4, s10
; S_SI-NEXT:    v_mov_b32_e32 v3, s9
; S_SI-NEXT:    v_mov_b32_e32 v2, s8
; S_SI-NEXT:    v_mov_b32_e32 v1, s7
; S_SI-NEXT:    v_mov_b32_e32 v0, s6
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v2f64_to_v8bf16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB40_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB40_4
; S_VI-NEXT:  .LBB40_2: ; %cmp.true
; S_VI-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_VI-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB40_3:
; S_VI-NEXT:    s_branch .LBB40_2
; S_VI-NEXT:  .LBB40_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v2f64_to_v8bf16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB40_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB40_4
; S_GFX9-NEXT:  .LBB40_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f64 v[2:3], s[18:19], 1.0
; S_GFX9-NEXT:    v_add_f64 v[0:1], s[16:17], 1.0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB40_3:
; S_GFX9-NEXT:    s_branch .LBB40_2
; S_GFX9-NEXT:  .LBB40_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v2f64_to_v8bf16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB40_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB40_4
; S_GFX11-NEXT:  .LBB40_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f64 v[2:3], s[2:3], 1.0
; S_GFX11-NEXT:    v_add_f64 v[0:1], s[0:1], 1.0
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB40_3:
; S_GFX11-NEXT:    s_branch .LBB40_2
; S_GFX11-NEXT:  .LBB40_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <2 x double> %a1 to <8 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x double> %a to <8 x bfloat>
  br label %end

end:
  %phi = phi <8 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x bfloat> %phi
}

define inreg <2 x double> @bitcast_v8bf16_to_v2f64_inreg(<8 x bfloat> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8bf16_to_v2f64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    v_mul_f32_e64 v10, 1.0, s17
; S_SI-NEXT:    v_mul_f32_e64 v11, 1.0, s16
; S_SI-NEXT:    v_mul_f32_e64 v8, 1.0, s19
; S_SI-NEXT:    v_mul_f32_e64 v9, 1.0, s18
; S_SI-NEXT:    v_mul_f32_e64 v6, 1.0, s21
; S_SI-NEXT:    v_mul_f32_e64 v7, 1.0, s20
; S_SI-NEXT:    v_mul_f32_e64 v4, 1.0, s23
; S_SI-NEXT:    v_mul_f32_e64 v5, 1.0, s22
; S_SI-NEXT:    s_cbranch_scc0 .LBB41_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v10
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v8
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v6
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v0, v0, v11, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v1, v9, 16
; S_SI-NEXT:    v_alignbit_b32 v2, v2, v7, 16
; S_SI-NEXT:    v_alignbit_b32 v3, v3, v5, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB41_3
; S_SI-NEXT:  .LBB41_2: ; %cmp.true
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v10
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v11
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v8
; S_SI-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v9
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v6
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v1, 16
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v7
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_and_b32_e32 v4, 0xffff0000, v4
; S_SI-NEXT:    v_alignbit_b32 v2, v3, v2, 16
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x40c00000, v4
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v3, 16
; S_SI-NEXT:  .LBB41_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB41_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB41_2
;
; S_VI-LABEL: bitcast_v8bf16_to_v2f64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB41_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB41_4
; S_VI-NEXT:  .LBB41_2: ; %cmp.true
; S_VI-NEXT:    s_lshl_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s19, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s18, 16
; S_VI-NEXT:    v_alignbit_b32 v3, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v4, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v2
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v4, v5, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s17, 16
; S_VI-NEXT:    v_alignbit_b32 v2, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, v4, v1
; S_VI-NEXT:    v_add_u32_e32 v4, vcc, 0x7fff, v4
; S_VI-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s17, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v4, v5, vcc
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_VI-NEXT:    s_lshl_b32 s4, s16, 16
; S_VI-NEXT:    v_alignbit_b32 v1, v4, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v4, s4, v0
; S_VI-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v4
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v4
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_VI-NEXT:    v_add_f32_e32 v0, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v5, v6, vcc
; S_VI-NEXT:    v_bfe_u32 v5, v0, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, v5, v0
; S_VI-NEXT:    v_add_u32_e32 v5, vcc, 0x7fff, v5
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v0
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v0, v5, v6, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_VI-NEXT:    v_alignbit_b32 v0, v0, v4, 16
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB41_3:
; S_VI-NEXT:    s_branch .LBB41_2
; S_VI-NEXT:  .LBB41_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8bf16_to_v2f64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB41_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB41_4
; S_GFX9-NEXT:  .LBB41_2: ; %cmp.true
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s19, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_GFX9-NEXT:    v_mov_b32_e32 v4, 0xffff
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s18
; S_GFX9-NEXT:    v_lshl_or_b32 v3, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s18, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v5, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v2
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v5, v6, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v2, v4, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s17
; S_GFX9-NEXT:    v_lshl_or_b32 v2, v1, 16, v2
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v5, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v1
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s17, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v6, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_and_b32_sdwa v5, v4, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s16
; S_GFX9-NEXT:    v_lshl_or_b32 v1, v1, 16, v5
; S_GFX9-NEXT:    v_add_f32_e32 v5, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v6, v5, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v5
; S_GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v5
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v5, v5
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v6, v7, vcc
; S_GFX9-NEXT:    v_bfe_u32 v6, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v6, v6, v0
; S_GFX9-NEXT:    v_add_u32_e32 v6, 0x7fff, v6
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v6, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v4, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshl_or_b32 v0, v5, 16, v0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB41_3:
; S_GFX9-NEXT:    s_branch .LBB41_2
; S_GFX9-NEXT:  .LBB41_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8bf16_to_v2f64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB41_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB41_4
; S_GFX11-NEXT:  .LBB41_2: ; %cmp.true
; S_GFX11-NEXT:    s_lshl_b32 s4, s3, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s3
; S_GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s4
; S_GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s2
; S_GFX11-NEXT:    s_lshl_b32 s2, s2, 16
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s4
; S_GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v0
; S_GFX11-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, v4, v1
; S_GFX11-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_GFX11-NEXT:    v_add_f32_e64 v5, 0x40c00000, s2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v3
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s3, 0, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, 0x7fff, v4
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; S_GFX11-NEXT:    v_bfe_u32 v2, v5, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v8, 0x40c00000, s1
; S_GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s0
; S_GFX11-NEXT:    v_cndmask_b32_e32 v1, v4, v6, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v5
; S_GFX11-NEXT:    v_add_f32_e64 v4, 0x40c00000, s3
; S_GFX11-NEXT:    v_or_b32_e32 v13, 0x400000, v8
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v3, v7, v9 :: v_dual_add_nc_u32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v5, v5
; S_GFX11-NEXT:    v_bfe_u32 v7, v4, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v9, 0x40c00000, s0
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v3
; S_GFX11-NEXT:    v_or_b32_e32 v3, 0x400000, v5
; S_GFX11-NEXT:    v_bfe_u32 v5, v8, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, v7, v4
; S_GFX11-NEXT:    v_or_b32_e32 v12, 0x400000, v4
; S_GFX11-NEXT:    v_bfe_u32 v11, v9, 16, 1
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v2, v3, vcc_lo
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, v5, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v8, v8
; S_GFX11-NEXT:    v_add_nc_u32_e32 v11, v11, v9
; S_GFX11-NEXT:    v_bfe_u32 v10, v3, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, 0x7fff, v5
; S_GFX11-NEXT:    v_or_b32_e32 v14, 0x400000, v3
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v8, 0x7fff, v11
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_dual_cndmask_b32 v5, v5, v13 :: v_dual_add_nc_u32 v10, v10, v3
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_or_b32_e32 v11, 0x400000, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, 0x7fff, v10
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 16, v5
; S_GFX11-NEXT:    v_and_b32_e32 v0, 0xffff, v0
; S_GFX11-NEXT:    v_and_b32_e32 v2, 0xffff, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v3, v10, v14, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v4, v4
; S_GFX11-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; S_GFX11-NEXT:    v_lshl_or_b32 v2, v6, 16, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_GFX11-NEXT:    v_cndmask_b32_e32 v4, v7, v12, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v9, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_GFX11-NEXT:    v_cndmask_b32_e32 v7, v8, v11, vcc_lo
; S_GFX11-NEXT:    v_and_b32_e32 v8, 0xffff, v3
; S_GFX11-NEXT:    v_lshl_or_b32 v3, v1, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshl_or_b32 v1, v4, 16, v5
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 16, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; S_GFX11-NEXT:    v_lshl_or_b32 v0, v7, 16, v8
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB41_3:
; S_GFX11-NEXT:    s_branch .LBB41_2
; S_GFX11-NEXT:  .LBB41_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <8 x bfloat> %a1 to <2 x double>
  br label %end

cmp.false:
  %a3 = bitcast <8 x bfloat> %a to <2 x double>
  br label %end

end:
  %phi = phi <2 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x double> %phi
}

define inreg <16 x i8> @bitcast_v2f64_to_v16i8_inreg(<2 x double> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v2f64_to_v16i8_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s20, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB42_3
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_mov_b32_e32 v0, s18
; S_SI-NEXT:    v_alignbit_b32 v11, s19, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s19, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s19, v0, 8
; S_SI-NEXT:    v_mov_b32_e32 v0, s16
; S_SI-NEXT:    v_alignbit_b32 v3, s17, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s17, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s17, v0, 8
; S_SI-NEXT:    s_lshr_b32 s11, s19, 24
; S_SI-NEXT:    s_lshr_b32 s10, s19, 16
; S_SI-NEXT:    s_lshr_b32 s9, s19, 8
; S_SI-NEXT:    s_lshr_b32 s8, s17, 24
; S_SI-NEXT:    s_lshr_b32 s7, s17, 16
; S_SI-NEXT:    s_lshr_b32 s6, s17, 8
; S_SI-NEXT:    s_cbranch_execnz .LBB42_4
; S_SI-NEXT:  .LBB42_2: ; %cmp.true
; S_SI-NEXT:    v_add_f64 v[16:17], s[18:19], 1.0
; S_SI-NEXT:    v_add_f64 v[18:19], s[16:17], 1.0
; S_SI-NEXT:    v_alignbit_b32 v11, v17, v16, 24
; S_SI-NEXT:    v_alignbit_b32 v10, v17, v16, 16
; S_SI-NEXT:    v_alignbit_b32 v9, v17, v16, 8
; S_SI-NEXT:    v_alignbit_b32 v3, v19, v18, 24
; S_SI-NEXT:    v_alignbit_b32 v2, v19, v18, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v19, v18, 8
; S_SI-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_SI-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_SI-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_SI-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_SI-NEXT:    s_branch .LBB42_5
; S_SI-NEXT:  .LBB42_3:
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr10
; S_SI-NEXT:    ; implicit-def: $vgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    s_branch .LBB42_2
; S_SI-NEXT:  .LBB42_4:
; S_SI-NEXT:    v_mov_b32_e32 v19, s17
; S_SI-NEXT:    v_mov_b32_e32 v17, s19
; S_SI-NEXT:    v_mov_b32_e32 v16, s18
; S_SI-NEXT:    v_mov_b32_e32 v18, s16
; S_SI-NEXT:    v_mov_b32_e32 v7, s8
; S_SI-NEXT:    v_mov_b32_e32 v6, s7
; S_SI-NEXT:    v_mov_b32_e32 v5, s6
; S_SI-NEXT:    v_mov_b32_e32 v15, s11
; S_SI-NEXT:    v_mov_b32_e32 v14, s10
; S_SI-NEXT:    v_mov_b32_e32 v13, s9
; S_SI-NEXT:  .LBB42_5: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, v18
; S_SI-NEXT:    v_mov_b32_e32 v4, v19
; S_SI-NEXT:    v_mov_b32_e32 v8, v16
; S_SI-NEXT:    v_mov_b32_e32 v12, v17
; S_SI-NEXT:    s_setpc_b64 s[30:31]
;
; S_VI-LABEL: bitcast_v2f64_to_v16i8_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB42_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_lshr_b32 s15, s19, 24
; S_VI-NEXT:    s_lshr_b32 s14, s19, 16
; S_VI-NEXT:    s_lshr_b32 s13, s19, 8
; S_VI-NEXT:    s_lshr_b32 s21, s18, 16
; S_VI-NEXT:    s_lshr_b32 s20, s18, 8
; S_VI-NEXT:    s_lshr_b32 s12, s17, 24
; S_VI-NEXT:    s_lshr_b32 s11, s17, 16
; S_VI-NEXT:    s_lshr_b32 s10, s17, 8
; S_VI-NEXT:    s_lshr_b32 s23, s16, 16
; S_VI-NEXT:    s_lshr_b32 s22, s16, 8
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_VI-NEXT:    s_cbranch_execnz .LBB42_4
; S_VI-NEXT:  .LBB42_2: ; %cmp.true
; S_VI-NEXT:    v_add_f64 v[16:17], s[18:19], 1.0
; S_VI-NEXT:    v_add_f64 v[18:19], s[16:17], 1.0
; S_VI-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_VI-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_VI-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_VI-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_VI-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_VI-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_VI-NEXT:    s_branch .LBB42_5
; S_VI-NEXT:  .LBB42_3:
; S_VI-NEXT:    ; implicit-def: $sgpr22
; S_VI-NEXT:    ; implicit-def: $sgpr23
; S_VI-NEXT:    ; implicit-def: $sgpr4
; S_VI-NEXT:    ; implicit-def: $sgpr10
; S_VI-NEXT:    ; implicit-def: $sgpr11
; S_VI-NEXT:    ; implicit-def: $sgpr12
; S_VI-NEXT:    ; implicit-def: $sgpr20
; S_VI-NEXT:    ; implicit-def: $sgpr21
; S_VI-NEXT:    ; implicit-def: $sgpr6
; S_VI-NEXT:    ; implicit-def: $sgpr13
; S_VI-NEXT:    ; implicit-def: $sgpr14
; S_VI-NEXT:    ; implicit-def: $sgpr15
; S_VI-NEXT:    s_branch .LBB42_2
; S_VI-NEXT:  .LBB42_4:
; S_VI-NEXT:    v_mov_b32_e32 v18, s16
; S_VI-NEXT:    v_mov_b32_e32 v16, s18
; S_VI-NEXT:    v_mov_b32_e32 v17, s19
; S_VI-NEXT:    v_mov_b32_e32 v19, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s23
; S_VI-NEXT:    v_mov_b32_e32 v1, s22
; S_VI-NEXT:    v_mov_b32_e32 v10, s21
; S_VI-NEXT:    v_mov_b32_e32 v9, s20
; S_VI-NEXT:    v_mov_b32_e32 v3, s4
; S_VI-NEXT:    v_mov_b32_e32 v11, s6
; S_VI-NEXT:    v_mov_b32_e32 v15, s15
; S_VI-NEXT:    v_mov_b32_e32 v14, s14
; S_VI-NEXT:    v_mov_b32_e32 v13, s13
; S_VI-NEXT:    v_mov_b32_e32 v7, s12
; S_VI-NEXT:    v_mov_b32_e32 v6, s11
; S_VI-NEXT:    v_mov_b32_e32 v5, s10
; S_VI-NEXT:  .LBB42_5: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, v18
; S_VI-NEXT:    v_mov_b32_e32 v4, v19
; S_VI-NEXT:    v_mov_b32_e32 v8, v16
; S_VI-NEXT:    v_mov_b32_e32 v12, v17
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v2f64_to_v16i8_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB42_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_lshr_b32 s15, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s14, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s13, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s21, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s20, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s12, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s10, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s22, s16, 8
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_GFX9-NEXT:    s_cbranch_execnz .LBB42_4
; S_GFX9-NEXT:  .LBB42_2: ; %cmp.true
; S_GFX9-NEXT:    v_add_f64 v[16:17], s[18:19], 1.0
; S_GFX9-NEXT:    v_add_f64 v[18:19], s[16:17], 1.0
; S_GFX9-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX9-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX9-NEXT:    s_branch .LBB42_5
; S_GFX9-NEXT:  .LBB42_3:
; S_GFX9-NEXT:    ; implicit-def: $sgpr22
; S_GFX9-NEXT:    ; implicit-def: $sgpr23
; S_GFX9-NEXT:    ; implicit-def: $sgpr4
; S_GFX9-NEXT:    ; implicit-def: $sgpr10
; S_GFX9-NEXT:    ; implicit-def: $sgpr11
; S_GFX9-NEXT:    ; implicit-def: $sgpr12
; S_GFX9-NEXT:    ; implicit-def: $sgpr20
; S_GFX9-NEXT:    ; implicit-def: $sgpr21
; S_GFX9-NEXT:    ; implicit-def: $sgpr6
; S_GFX9-NEXT:    ; implicit-def: $sgpr13
; S_GFX9-NEXT:    ; implicit-def: $sgpr14
; S_GFX9-NEXT:    ; implicit-def: $sgpr15
; S_GFX9-NEXT:    s_branch .LBB42_2
; S_GFX9-NEXT:  .LBB42_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v18, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v16, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v17, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v19, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s23
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v10, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v9, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v15, s15
; S_GFX9-NEXT:    v_mov_b32_e32 v14, s14
; S_GFX9-NEXT:    v_mov_b32_e32 v13, s13
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s12
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s11
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s10
; S_GFX9-NEXT:  .LBB42_5: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX9-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX9-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX9-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v2f64_to_v16i8_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB42_3
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_lshr_b32 s14, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s13, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s15, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s10, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s9, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s18, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s0, 8
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[0:1], 24
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB42_4
; S_GFX11-NEXT:  .LBB42_2: ; %cmp.true
; S_GFX11-NEXT:    v_add_f64 v[16:17], s[2:3], 1.0
; S_GFX11-NEXT:    v_add_f64 v[18:19], s[0:1], 1.0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX11-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX11-NEXT:    s_branch .LBB42_5
; S_GFX11-NEXT:  .LBB42_3:
; S_GFX11-NEXT:    ; implicit-def: $sgpr17
; S_GFX11-NEXT:    ; implicit-def: $sgpr18
; S_GFX11-NEXT:    ; implicit-def: $sgpr4
; S_GFX11-NEXT:    ; implicit-def: $sgpr9
; S_GFX11-NEXT:    ; implicit-def: $sgpr10
; S_GFX11-NEXT:    ; implicit-def: $sgpr11
; S_GFX11-NEXT:    ; implicit-def: $sgpr15
; S_GFX11-NEXT:    ; implicit-def: $sgpr16
; S_GFX11-NEXT:    ; implicit-def: $sgpr6
; S_GFX11-NEXT:    ; implicit-def: $sgpr12
; S_GFX11-NEXT:    ; implicit-def: $sgpr13
; S_GFX11-NEXT:    ; implicit-def: $sgpr14
; S_GFX11-NEXT:    s_branch .LBB42_2
; S_GFX11-NEXT:  .LBB42_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v18, s0 :: v_dual_mov_b32 v17, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v16, s2 :: v_dual_mov_b32 v19, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s18 :: v_dual_mov_b32 v1, s17
; S_GFX11-NEXT:    v_dual_mov_b32 v10, s16 :: v_dual_mov_b32 v9, s15
; S_GFX11-NEXT:    v_dual_mov_b32 v3, s4 :: v_dual_mov_b32 v14, s13
; S_GFX11-NEXT:    v_dual_mov_b32 v11, s6 :: v_dual_mov_b32 v6, s10
; S_GFX11-NEXT:    v_mov_b32_e32 v15, s14
; S_GFX11-NEXT:    v_mov_b32_e32 v13, s12
; S_GFX11-NEXT:    v_mov_b32_e32 v7, s11
; S_GFX11-NEXT:    v_mov_b32_e32 v5, s9
; S_GFX11-NEXT:  .LBB42_5: ; %end
; S_GFX11-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX11-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX11-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX11-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <2 x double> %a1 to <16 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x double> %a to <16 x i8>
  br label %end

end:
  %phi = phi <16 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i8> %phi
}

define inreg <2 x double> @bitcast_v16i8_to_v2f64_inreg(<16 x i8> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v16i8_to_v2f64_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_SI-NEXT:    v_mov_b32_e32 v4, v0
; S_SI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 24, v1
; S_SI-NEXT:    s_cbranch_scc0 .LBB43_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s5, 16
; S_SI-NEXT:    s_lshl_b32 s6, s19, 24
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_lshl_b32 s7, s23, 24
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_lshl_b32 s8, s27, 24
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v4
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:    s_cbranch_execnz .LBB43_3
; S_SI-NEXT:  .LBB43_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s6, s18, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s19, 24
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 8
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s7, s22, 0xff
; S_SI-NEXT:    s_addk_i32 s5, 0x300
; S_SI-NEXT:    s_lshl_b32 s6, s23, 24
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s25, 8
; S_SI-NEXT:    s_add_i32 s26, s26, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s8, s26, 0xff
; S_SI-NEXT:    s_addk_i32 s6, 0x300
; S_SI-NEXT:    s_lshl_b32 s7, s27, 24
; S_SI-NEXT:    s_lshl_b32 s8, s8, 16
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_add_i32 s28, s28, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s29, 8
; S_SI-NEXT:    v_add_i32_e32 v0, vcc, 3, v4
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    v_and_b32_e32 v0, 0xff, v0
; S_SI-NEXT:    s_addk_i32 s7, 0x300
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    v_or_b32_e32 v0, v5, v0
; S_SI-NEXT:    s_add_i32 s4, s4, 0x3000000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x3000000
; S_SI-NEXT:    v_or_b32_e32 v0, s7, v0
; S_SI-NEXT:    v_add_i32_e32 v3, vcc, 0x3000000, v0
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    v_mov_b32_e32 v1, s5
; S_SI-NEXT:    v_mov_b32_e32 v2, s6
; S_SI-NEXT:  .LBB43_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB43_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_SI-NEXT:    s_branch .LBB43_2
;
; S_VI-LABEL: bitcast_v16i8_to_v2f64_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_VI-NEXT:    v_mov_b32_e32 v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, v0
; S_VI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_VI-NEXT:    s_cbranch_scc0 .LBB43_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_and_b32 s4, s16, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s17, 8
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s19, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    s_lshl_b32 s5, s5, 16
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s20, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s21, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_lshl_b32 s6, s6, 16
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s24, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s25, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s27, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_lshl_b32 s7, s7, 16
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s28, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s29, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 8, v5
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    v_or_b32_sdwa v0, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s4
; S_VI-NEXT:    v_mov_b32_e32 v1, s5
; S_VI-NEXT:    v_mov_b32_e32 v2, s6
; S_VI-NEXT:    s_cbranch_execnz .LBB43_3
; S_VI-NEXT:  .LBB43_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshl_b32 s10, s17, 8
; S_VI-NEXT:    s_and_b32 s11, s16, 0xff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_and_b32 s11, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s9, s19, 24
; S_VI-NEXT:    s_addk_i32 s10, 0x300
; S_VI-NEXT:    s_lshl_b32 s11, s11, 16
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_and_b32 s10, s10, 0xffff
; S_VI-NEXT:    s_or_b32 s9, s9, s11
; S_VI-NEXT:    s_add_i32 s22, s22, 3
; S_VI-NEXT:    s_lshl_b32 s8, s21, 8
; S_VI-NEXT:    s_or_b32 s9, s9, s10
; S_VI-NEXT:    s_and_b32 s10, s20, 0xff
; S_VI-NEXT:    s_or_b32 s8, s8, s10
; S_VI-NEXT:    s_and_b32 s10, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 24
; S_VI-NEXT:    s_addk_i32 s8, 0x300
; S_VI-NEXT:    s_lshl_b32 s10, s10, 16
; S_VI-NEXT:    s_add_i32 s24, s24, 3
; S_VI-NEXT:    s_and_b32 s8, s8, 0xffff
; S_VI-NEXT:    s_or_b32 s7, s7, s10
; S_VI-NEXT:    s_add_i32 s26, s26, 3
; S_VI-NEXT:    s_lshl_b32 s6, s25, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s8, s24, 0xff
; S_VI-NEXT:    s_or_b32 s6, s6, s8
; S_VI-NEXT:    s_and_b32 s8, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s27, 24
; S_VI-NEXT:    s_addk_i32 s6, 0x300
; S_VI-NEXT:    s_lshl_b32 s8, s8, 16
; S_VI-NEXT:    s_add_i32 s28, s28, 3
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_or_b32 s5, s5, s8
; S_VI-NEXT:    v_add_u32_e32 v1, vcc, 3, v4
; S_VI-NEXT:    s_lshl_b32 s4, s29, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s28, 0xff
; S_VI-NEXT:    s_or_b32 s4, s4, s6
; S_VI-NEXT:    v_and_b32_e32 v1, 0xff, v1
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 24, v5
; S_VI-NEXT:    s_addk_i32 s4, 0x300
; S_VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_VI-NEXT:    s_add_i32 s9, s9, 0x3000000
; S_VI-NEXT:    s_add_i32 s7, s7, 0x3000000
; S_VI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_VI-NEXT:    v_or_b32_e32 v0, s4, v0
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x3000000, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s9
; S_VI-NEXT:    v_mov_b32_e32 v1, s7
; S_VI-NEXT:    v_mov_b32_e32 v2, s5
; S_VI-NEXT:  .LBB43_3: ; %end
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB43_4:
; S_VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_VI-NEXT:    s_branch .LBB43_2
;
; S_GFX9-LABEL: bitcast_v16i8_to_v2f64_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_GFX9-NEXT:    v_readfirstlane_b32 s10, v1
; S_GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_GFX9-NEXT:    v_readfirstlane_b32 s11, v0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB43_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s8, s9
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_cbranch_execnz .LBB43_3
; S_GFX9-NEXT:  .LBB43_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_or_b32 s4, s5, s4
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_addk_i32 s4, 0x300
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_add_i32 s22, s22, 3
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_add_i32 s24, s24, 3
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_add_i32 s26, s26, 3
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_add_i32 s28, s28, 3
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_add_i32 s11, s11, 3
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s9, s8
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_addk_i32 s8, 0x300
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:  .LBB43_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s5
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s7
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB43_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX9-NEXT:    s_branch .LBB43_2
;
; S_GFX11-LABEL: bitcast_v16i8_to_v2f64_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s28, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB43_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_and_b32 s4, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s5, s1, 8
; S_GFX11-NEXT:    s_and_b32 s6, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s3, 8
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s17, 8
; S_GFX11-NEXT:    s_and_b32 s9, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s19, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s21, 8
; S_GFX11-NEXT:    s_and_b32 s9, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s23, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s9, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s25, 8
; S_GFX11-NEXT:    s_and_b32 s11, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s12, s27, 8
; S_GFX11-NEXT:    s_or_b32 s9, s9, s10
; S_GFX11-NEXT:    s_or_b32 s10, s11, s12
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_and_b32 s9, s9, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s10, s10, 16
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB43_3
; S_GFX11-NEXT:  .LBB43_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s18, s18, 3
; S_GFX11-NEXT:    s_or_b32 s4, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s17, 8
; S_GFX11-NEXT:    s_and_b32 s2, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s19, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s20, s20, 3
; S_GFX11-NEXT:    s_or_b32 s5, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s21, 8
; S_GFX11-NEXT:    s_add_i32 s22, s22, 3
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_and_b32 s1, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s2, s23, 8
; S_GFX11-NEXT:    s_add_i32 s24, s24, 3
; S_GFX11-NEXT:    s_add_i32 s26, s26, 3
; S_GFX11-NEXT:    s_or_b32 s1, s2, s1
; S_GFX11-NEXT:    s_and_b32 s2, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s25, 8
; S_GFX11-NEXT:    s_and_b32 s6, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s27, 8
; S_GFX11-NEXT:    s_or_b32 s2, s3, s2
; S_GFX11-NEXT:    s_or_b32 s3, s7, s6
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_addk_i32 s2, 0x300
; S_GFX11-NEXT:    s_addk_i32 s3, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 16
; S_GFX11-NEXT:    s_or_b32 s6, s0, s1
; S_GFX11-NEXT:    s_or_b32 s7, s2, s3
; S_GFX11-NEXT:  .LBB43_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s4 :: v_dual_mov_b32 v1, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s6 :: v_dual_mov_b32 v3, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB43_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX11-NEXT:    s_branch .LBB43_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i8> %a, splat (i8 3)
  %a2 = bitcast <16 x i8> %a1 to <2 x double>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i8> %a to <2 x double>
  br label %end

end:
  %phi = phi <2 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x double> %phi
}

define inreg <8 x half> @bitcast_v8i16_to_v8f16_inreg(<8 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8i16_to_v8f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB44_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s21
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s22
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s23
; S_SI-NEXT:    s_cbranch_execnz .LBB44_3
; S_SI-NEXT:  .LBB44_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s23, s23, 3
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_add_i32 s21, s21, 3
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_add_i32 s19, s19, 3
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s17, s17, 3
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s16
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s18
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s19
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s21
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s22
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s23
; S_SI-NEXT:  .LBB44_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB44_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB44_2
;
; S_VI-LABEL: bitcast_v8i16_to_v8f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB44_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB44_3
; S_VI-NEXT:  .LBB44_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB44_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB44_4:
; S_VI-NEXT:    s_branch .LBB44_2
;
; S_GFX9-LABEL: bitcast_v8i16_to_v8f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB44_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB44_4
; S_GFX9-NEXT:  .LBB44_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB44_3:
; S_GFX9-NEXT:    s_branch .LBB44_2
; S_GFX9-NEXT:  .LBB44_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8i16_to_v8f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB44_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB44_4
; S_GFX11-NEXT:  .LBB44_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB44_3:
; S_GFX11-NEXT:    s_branch .LBB44_2
; S_GFX11-NEXT:  .LBB44_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i16> %a, splat (i16 3)
  %a2 = bitcast <8 x i16> %a1 to <8 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i16> %a to <8 x half>
  br label %end

end:
  %phi = phi <8 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x half> %phi
}

define inreg <8 x i16> @bitcast_v8f16_to_v8i16_inreg(<8 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8f16_to_v8i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s22
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, s23
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB45_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_cbranch_execnz .LBB45_3
; S_SI-NEXT:  .LBB45_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_add_f32_e32 v7, 0x38000000, v7
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, v7
; S_SI-NEXT:    v_add_f32_e32 v6, 0x38000000, v6
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, v6
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v5, v5
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v4
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v4, v4
; S_SI-NEXT:    v_lshlrev_b32_e32 v8, 16, v7
; S_SI-NEXT:    v_or_b32_e32 v6, v6, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v8, 16, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 16, v5
; S_SI-NEXT:    v_or_b32_e32 v2, v2, v8
; S_SI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_SI-NEXT:    v_or_b32_e32 v4, v4, v5
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v1, 16
; S_SI-NEXT:    v_alignbit_b32 v5, v6, v5, 16
; S_SI-NEXT:  .LBB45_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB45_4:
; S_SI-NEXT:    s_branch .LBB45_2
;
; S_VI-LABEL: bitcast_v8f16_to_v8i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB45_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB45_4
; S_VI-NEXT:  .LBB45_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_mov_b32_e32 v2, s4
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_mov_b32_e32 v3, s4
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v8, s4
; S_VI-NEXT:    v_add_f16_e32 v4, s16, v0
; S_VI-NEXT:    v_add_f16_sdwa v5, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v1, s17, v0
; S_VI-NEXT:    v_add_f16_sdwa v6, v2, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    v_add_f16_sdwa v7, v3, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v3, s19, v0
; S_VI-NEXT:    v_add_f16_sdwa v0, v8, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, v3, v0
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v7
; S_VI-NEXT:    v_or_b32_e32 v1, v1, v6
; S_VI-NEXT:    v_or_b32_e32 v0, v4, v5
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB45_3:
; S_VI-NEXT:    s_branch .LBB45_2
; S_VI-NEXT:  .LBB45_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8f16_to_v8i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB45_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB45_4
; S_GFX9-NEXT:  .LBB45_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB45_3:
; S_GFX9-NEXT:    s_branch .LBB45_2
; S_GFX9-NEXT:  .LBB45_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8f16_to_v8i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB45_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB45_4
; S_GFX11-NEXT:  .LBB45_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB45_3:
; S_GFX11-NEXT:    s_branch .LBB45_2
; S_GFX11-NEXT:  .LBB45_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <8 x half> %a1 to <8 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x half> %a to <8 x i16>
  br label %end

end:
  %phi = phi <8 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i16> %phi
}

define inreg <8 x bfloat> @bitcast_v8i16_to_v8bf16_inreg(<8 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8i16_to_v8bf16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB46_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_lshl_b32 s6, s16, 16
; S_SI-NEXT:    s_lshl_b32 s7, s17, 16
; S_SI-NEXT:    s_lshl_b32 s8, s18, 16
; S_SI-NEXT:    s_lshl_b32 s9, s19, 16
; S_SI-NEXT:    s_lshl_b32 s10, s20, 16
; S_SI-NEXT:    s_lshl_b32 s11, s21, 16
; S_SI-NEXT:    s_lshl_b32 s13, s22, 16
; S_SI-NEXT:    s_lshl_b32 s12, s23, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB46_3
; S_SI-NEXT:  .LBB46_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_and_b32 s4, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s23, 16
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s6, s21, 16
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s19, 16
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s8, s6, 0x30000
; S_SI-NEXT:    s_and_b32 s6, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s7, s17, 16
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_add_i32 s4, s4, 0x30000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x30000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x30000
; S_SI-NEXT:    s_and_b32 s7, s6, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s9, s8, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s8, s8, 16
; S_SI-NEXT:    s_and_b32 s11, s5, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s10, s5, 16
; S_SI-NEXT:    s_and_b32 s12, s4, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s13, s4, 16
; S_SI-NEXT:  .LBB46_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s6
; S_SI-NEXT:    v_mov_b32_e32 v1, s7
; S_SI-NEXT:    v_mov_b32_e32 v2, s8
; S_SI-NEXT:    v_mov_b32_e32 v3, s9
; S_SI-NEXT:    v_mov_b32_e32 v4, s10
; S_SI-NEXT:    v_mov_b32_e32 v5, s11
; S_SI-NEXT:    v_mov_b32_e32 v6, s13
; S_SI-NEXT:    v_mov_b32_e32 v7, s12
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB46_4:
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    s_branch .LBB46_2
;
; S_VI-LABEL: bitcast_v8i16_to_v8bf16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB46_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB46_3
; S_VI-NEXT:  .LBB46_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s16, 3
; S_VI-NEXT:    s_add_i32 s7, s17, 3
; S_VI-NEXT:    s_add_i32 s9, s18, 3
; S_VI-NEXT:    s_add_i32 s11, s19, 3
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s19, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s17, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s4, 0x30000
; S_VI-NEXT:  .LBB46_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB46_4:
; S_VI-NEXT:    s_branch .LBB46_2
;
; S_GFX9-LABEL: bitcast_v8i16_to_v8bf16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB46_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB46_4
; S_GFX9-NEXT:  .LBB46_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v3, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v2, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v1, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB46_3:
; S_GFX9-NEXT:    s_branch .LBB46_2
; S_GFX9-NEXT:  .LBB46_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8i16_to_v8bf16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB46_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB46_4
; S_GFX11-NEXT:  .LBB46_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v3, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v2, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v1, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB46_3:
; S_GFX11-NEXT:    s_branch .LBB46_2
; S_GFX11-NEXT:  .LBB46_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i16> %a, splat (i16 3)
  %a2 = bitcast <8 x i16> %a1 to <8 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i16> %a to <8 x bfloat>
  br label %end

end:
  %phi = phi <8 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x bfloat> %phi
}

define inreg <8 x i16> @bitcast_v8bf16_to_v8i16_inreg(<8 x bfloat> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8bf16_to_v8i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    v_mul_f32_e64 v15, 1.0, s16
; S_SI-NEXT:    v_mul_f32_e64 v14, 1.0, s17
; S_SI-NEXT:    v_mul_f32_e64 v9, 1.0, s18
; S_SI-NEXT:    v_mul_f32_e64 v8, 1.0, s19
; S_SI-NEXT:    v_mul_f32_e64 v13, 1.0, s20
; S_SI-NEXT:    v_mul_f32_e64 v12, 1.0, s21
; S_SI-NEXT:    v_mul_f32_e64 v11, 1.0, s22
; S_SI-NEXT:    v_mul_f32_e64 v10, 1.0, s23
; S_SI-NEXT:    s_cbranch_scc0 .LBB47_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v15
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v14
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v9
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v8
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v13
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 16, v12
; S_SI-NEXT:    v_lshrrev_b32_e32 v6, 16, v11
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v10
; S_SI-NEXT:    s_cbranch_execnz .LBB47_3
; S_SI-NEXT:  .LBB47_2: ; %cmp.true
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v14
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v15
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v12
; S_SI-NEXT:    v_alignbit_b32 v0, v2, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v13
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v3
; S_SI-NEXT:    v_and_b32_e32 v5, 0xffff0000, v10
; S_SI-NEXT:    v_alignbit_b32 v4, v4, v2, 16
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v11
; S_SI-NEXT:    v_add_f32_e32 v5, 0x40c00000, v5
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v5
; S_SI-NEXT:    v_and_b32_e32 v5, 0xffff0000, v3
; S_SI-NEXT:    v_and_b32_e32 v3, 0xffff0000, v8
; S_SI-NEXT:    v_alignbit_b32 v6, v7, v2, 16
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v9
; S_SI-NEXT:    v_add_f32_e32 v3, 0x40c00000, v3
; S_SI-NEXT:    v_add_f32_e32 v2, 0x40c00000, v2
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_SI-NEXT:    v_alignbit_b32 v2, v3, v2, 16
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v1
; S_SI-NEXT:    v_alignbit_b32 v1, v2, v1, 16
; S_SI-NEXT:    v_alignbit_b32 v5, v6, v5, 16
; S_SI-NEXT:  .LBB47_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB47_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB47_2
;
; S_VI-LABEL: bitcast_v8bf16_to_v8i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB47_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB47_4
; S_VI-NEXT:  .LBB47_2: ; %cmp.true
; S_VI-NEXT:    s_lshl_b32 s4, s16, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v2, v3, vcc
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    s_lshl_b32 s4, s17, 16
; S_VI-NEXT:    v_lshrrev_b32_e32 v5, 16, v1
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s17, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v6, vcc
; S_VI-NEXT:    s_lshl_b32 s4, s18, 16
; S_VI-NEXT:    v_lshrrev_b32_e32 v6, 16, v2
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v7, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v7, vcc
; S_VI-NEXT:    v_add_f32_e32 v3, s4, v0
; S_VI-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v7, vcc, v7, v3
; S_VI-NEXT:    v_add_u32_e32 v7, vcc, 0x7fff, v7
; S_VI-NEXT:    v_or_b32_e32 v8, 0x400000, v3
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_VI-NEXT:    v_cndmask_b32_e32 v3, v7, v8, vcc
; S_VI-NEXT:    s_lshl_b32 s4, s19, 16
; S_VI-NEXT:    v_lshrrev_b32_e32 v7, 16, v3
; S_VI-NEXT:    v_add_f32_e32 v3, s4, v0
; S_VI-NEXT:    v_bfe_u32 v8, v3, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, v8, v3
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, 0x7fff, v8
; S_VI-NEXT:    s_and_b32 s4, s19, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_VI-NEXT:    v_add_f32_e32 v0, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v3, v8, v9, vcc
; S_VI-NEXT:    v_bfe_u32 v8, v0, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, v8, v0
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, 0x7fff, v8
; S_VI-NEXT:    v_or_b32_e32 v9, 0x400000, v0
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v0, v8, v9, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_VI-NEXT:    v_alignbit_b32 v3, v0, v3, 16
; S_VI-NEXT:    v_alignbit_b32 v2, v7, v2, 16
; S_VI-NEXT:    v_alignbit_b32 v1, v6, v1, 16
; S_VI-NEXT:    v_alignbit_b32 v0, v5, v4, 16
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB47_3:
; S_VI-NEXT:    s_branch .LBB47_2
; S_VI-NEXT:  .LBB47_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8bf16_to_v8i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB47_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB47_4
; S_GFX9-NEXT:  .LBB47_2: ; %cmp.true
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v4, v2, v3, vcc
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s17
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v2, v3, vcc
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s17, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s18
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v6, v3, v6, vcc
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    s_lshl_b32 s4, s18, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v3, v7, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v3, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v7, v7, v3
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s19
; S_GFX9-NEXT:    v_add_u32_e32 v7, 0x7fff, v7
; S_GFX9-NEXT:    v_or_b32_e32 v8, 0x400000, v3
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_GFX9-NEXT:    v_add_f32_e32 v3, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v7, v7, v8, vcc
; S_GFX9-NEXT:    v_bfe_u32 v8, v3, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v8, v8, v3
; S_GFX9-NEXT:    s_lshl_b32 s4, s19, 16
; S_GFX9-NEXT:    v_add_u32_e32 v8, 0x7fff, v8
; S_GFX9-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v3, v8, v9, vcc
; S_GFX9-NEXT:    v_bfe_u32 v8, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v8, v8, v0
; S_GFX9-NEXT:    v_add_u32_e32 v8, 0x7fff, v8
; S_GFX9-NEXT:    v_or_b32_e32 v9, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v8, v9, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX9-NEXT:    v_mov_b32_e32 v8, 0xffff0000
; S_GFX9-NEXT:    v_and_or_b32 v3, v3, v8, v0
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v0, 16, v7
; S_GFX9-NEXT:    v_and_or_b32 v2, v2, v8, v0
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v0, 16, v6
; S_GFX9-NEXT:    v_and_or_b32 v1, v1, v8, v0
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v0, 16, v5
; S_GFX9-NEXT:    v_and_or_b32 v0, v4, v8, v0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB47_3:
; S_GFX9-NEXT:    s_branch .LBB47_2
; S_GFX9-NEXT:  .LBB47_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8bf16_to_v8i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB47_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB47_4
; S_GFX11-NEXT:  .LBB47_2: ; %cmp.true
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s0, 16
; S_GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s4
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s1
; S_GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; S_GFX11-NEXT:    v_add_f32_e64 v2, 0x40c00000, s4
; S_GFX11-NEXT:    s_lshl_b32 s0, s1, 16
; S_GFX11-NEXT:    v_bfe_u32 v3, v0, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v7, 0x400000, v0
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v1
; S_GFX11-NEXT:    v_bfe_u32 v6, v2, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v5, v1, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v9, 0x400000, v2
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; S_GFX11-NEXT:    v_add_f32_e64 v4, 0x40c00000, s0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v6, v6, v2
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_bfe_u32 v10, v4, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v6, 0x7fff, v6
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; S_GFX11-NEXT:    v_dual_cndmask_b32 v0, v3, v7 :: v_dual_add_nc_u32 v5, v5, v1
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, 0x7fff, v5
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; S_GFX11-NEXT:    v_cndmask_b32_e32 v1, v5, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v2, v2
; S_GFX11-NEXT:    v_add_f32_e64 v5, 0x40c00000, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s2, 16
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v4
; S_GFX11-NEXT:    v_add_f32_e64 v7, 0x40c00000, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s3, 16
; S_GFX11-NEXT:    v_cndmask_b32_e32 v6, v6, v9, vcc_lo
; S_GFX11-NEXT:    v_add_f32_e64 v9, 0x40c00000, s0
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v4, v4
; S_GFX11-NEXT:    v_or_b32_e32 v13, 0x400000, v7
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, v10, v4
; S_GFX11-NEXT:    v_bfe_u32 v10, v7, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v12, v9, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v14, 0x400000, v9
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s3
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_3) | instskip(NEXT) | instid1(VALU_DEP_3)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, v10, v7
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, v12, v9
; S_GFX11-NEXT:    v_add_f32_e64 v11, 0x40c00000, s0
; S_GFX11-NEXT:    v_or_b32_e32 v12, 0x400000, v5
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, 0x7fff, v4
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, 0x7fff, v10
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v3
; S_GFX11-NEXT:    v_bfe_u32 v3, v5, 16, 1
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(SKIP_1) | instid1(VALU_DEP_3)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v2, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v7, v7
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v5
; S_GFX11-NEXT:    v_bfe_u32 v8, v11, 16, 1
; S_GFX11-NEXT:    v_cndmask_b32_e32 v4, v4, v13, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v9, v9
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v8, v8, v11
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_2) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_GFX11-NEXT:    v_cndmask_b32_e32 v9, v10, v14, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v5, v5
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v8
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v11
; S_GFX11-NEXT:    v_cndmask_b32_e32 v5, v3, v12, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v11, v11
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_3) | instskip(SKIP_4) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v3, v7, v8, vcc_lo
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 16, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v8, 16, v2
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v9, 16, v1
; S_GFX11-NEXT:    v_and_or_b32 v2, 0xffff0000, v5, v4
; S_GFX11-NEXT:    v_and_or_b32 v3, 0xffff0000, v3, v7
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_and_or_b32 v1, 0xffff0000, v6, v8
; S_GFX11-NEXT:    v_and_or_b32 v0, 0xffff0000, v0, v9
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB47_3:
; S_GFX11-NEXT:    s_branch .LBB47_2
; S_GFX11-NEXT:  .LBB47_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <8 x bfloat> %a1 to <8 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x bfloat> %a to <8 x i16>
  br label %end

end:
  %phi = phi <8 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i16> %phi
}

define inreg <16 x i8> @bitcast_v8i16_to_v16i8_inreg(<8 x i16> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8i16_to_v16i8_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB48_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s6, s4, s5
; S_SI-NEXT:    s_and_b32 s4, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s19, 16
; S_SI-NEXT:    s_or_b32 s8, s4, s5
; S_SI-NEXT:    s_and_b32 s4, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s21, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s6
; S_SI-NEXT:    s_or_b32 s7, s4, s5
; S_SI-NEXT:    s_and_b32 s4, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s23, 16
; S_SI-NEXT:    v_alignbit_b32 v3, s8, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s8, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s8, v0, 8
; S_SI-NEXT:    s_or_b32 s9, s4, s5
; S_SI-NEXT:    v_mov_b32_e32 v0, s7
; S_SI-NEXT:    v_alignbit_b32 v11, s9, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s9, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s9, v0, 8
; S_SI-NEXT:    s_lshr_b32 s10, s8, 8
; S_SI-NEXT:    s_lshr_b32 s13, s9, 8
; S_SI-NEXT:    s_and_b32 s11, s19, 0xffff
; S_SI-NEXT:    s_and_b32 s14, s23, 0xffff
; S_SI-NEXT:    s_bfe_u32 s12, s19, 0x80008
; S_SI-NEXT:    s_bfe_u32 s15, s23, 0x80008
; S_SI-NEXT:    s_cbranch_execnz .LBB48_3
; S_SI-NEXT:  .LBB48_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_and_b32 s4, s20, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s21, 16
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_add_i32 s7, s4, 0x30000
; S_SI-NEXT:    s_and_b32 s4, s22, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s23, 16
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s9, s4, 0x30000
; S_SI-NEXT:    s_and_b32 s4, s16, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 16
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_add_i32 s6, s4, 0x30000
; S_SI-NEXT:    s_and_b32 s4, s18, 0xffff
; S_SI-NEXT:    s_lshl_b32 s5, s19, 16
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s8, s4, 0x30000
; S_SI-NEXT:    v_mov_b32_e32 v0, s6
; S_SI-NEXT:    v_alignbit_b32 v3, s8, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, s8, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, s8, v0, 8
; S_SI-NEXT:    v_mov_b32_e32 v0, s7
; S_SI-NEXT:    v_alignbit_b32 v11, s9, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v10, s9, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v9, s9, v0, 8
; S_SI-NEXT:    s_lshr_b32 s12, s8, 24
; S_SI-NEXT:    s_lshr_b32 s11, s8, 16
; S_SI-NEXT:    s_lshr_b32 s10, s8, 8
; S_SI-NEXT:    s_lshr_b32 s15, s9, 24
; S_SI-NEXT:    s_lshr_b32 s14, s9, 16
; S_SI-NEXT:    s_lshr_b32 s13, s9, 8
; S_SI-NEXT:  .LBB48_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s6
; S_SI-NEXT:    v_mov_b32_e32 v4, s8
; S_SI-NEXT:    v_mov_b32_e32 v5, s10
; S_SI-NEXT:    v_mov_b32_e32 v6, s11
; S_SI-NEXT:    v_mov_b32_e32 v7, s12
; S_SI-NEXT:    v_mov_b32_e32 v8, s7
; S_SI-NEXT:    v_mov_b32_e32 v12, s9
; S_SI-NEXT:    v_mov_b32_e32 v13, s13
; S_SI-NEXT:    v_mov_b32_e32 v14, s14
; S_SI-NEXT:    v_mov_b32_e32 v15, s15
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB48_4:
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr10
; S_SI-NEXT:    ; implicit-def: $vgpr11
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    ; implicit-def: $sgpr14
; S_SI-NEXT:    ; implicit-def: $sgpr15
; S_SI-NEXT:    s_branch .LBB48_2
;
; S_VI-LABEL: bitcast_v8i16_to_v16i8_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB48_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s12, s19, 8
; S_VI-NEXT:    s_lshr_b32 s13, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s21, s17, 8
; S_VI-NEXT:    s_lshr_b32 s22, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_VI-NEXT:    s_cbranch_execnz .LBB48_3
; S_VI-NEXT:  .LBB48_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s5, s18, 3
; S_VI-NEXT:    s_add_i32 s7, s19, 3
; S_VI-NEXT:    s_add_i32 s9, s16, 3
; S_VI-NEXT:    s_add_i32 s11, s17, 3
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    s_and_b32 s6, s19, 0xffff0000
; S_VI-NEXT:    s_and_b32 s8, s16, 0xffff0000
; S_VI-NEXT:    s_and_b32 s10, s17, 0xffff0000
; S_VI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_VI-NEXT:    s_and_b32 s9, s9, 0xffff
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_or_b32 s8, s8, s9
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_add_i32 s17, s10, 0x30000
; S_VI-NEXT:    s_add_i32 s16, s8, 0x30000
; S_VI-NEXT:    s_add_i32 s19, s6, 0x30000
; S_VI-NEXT:    s_add_i32 s18, s4, 0x30000
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[16:17], 24
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s12, s19, 8
; S_VI-NEXT:    s_lshr_b32 s13, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s21, s17, 8
; S_VI-NEXT:    s_lshr_b32 s22, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:  .LBB48_3: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s23
; S_VI-NEXT:    v_mov_b32_e32 v2, s22
; S_VI-NEXT:    v_mov_b32_e32 v3, s6
; S_VI-NEXT:    v_mov_b32_e32 v4, s17
; S_VI-NEXT:    v_mov_b32_e32 v5, s21
; S_VI-NEXT:    v_mov_b32_e32 v6, s20
; S_VI-NEXT:    v_mov_b32_e32 v7, s15
; S_VI-NEXT:    v_mov_b32_e32 v8, s18
; S_VI-NEXT:    v_mov_b32_e32 v9, s14
; S_VI-NEXT:    v_mov_b32_e32 v10, s13
; S_VI-NEXT:    v_mov_b32_e32 v11, s4
; S_VI-NEXT:    v_mov_b32_e32 v12, s19
; S_VI-NEXT:    v_mov_b32_e32 v13, s12
; S_VI-NEXT:    v_mov_b32_e32 v14, s11
; S_VI-NEXT:    v_mov_b32_e32 v15, s10
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB48_4:
; S_VI-NEXT:    ; implicit-def: $sgpr23
; S_VI-NEXT:    ; implicit-def: $sgpr22
; S_VI-NEXT:    ; implicit-def: $sgpr6
; S_VI-NEXT:    ; implicit-def: $sgpr21
; S_VI-NEXT:    ; implicit-def: $sgpr20
; S_VI-NEXT:    ; implicit-def: $sgpr15
; S_VI-NEXT:    ; implicit-def: $sgpr14
; S_VI-NEXT:    ; implicit-def: $sgpr13
; S_VI-NEXT:    ; implicit-def: $sgpr4
; S_VI-NEXT:    ; implicit-def: $sgpr12
; S_VI-NEXT:    ; implicit-def: $sgpr11
; S_VI-NEXT:    ; implicit-def: $sgpr10
; S_VI-NEXT:    s_branch .LBB48_2
;
; S_GFX9-LABEL: bitcast_v8i16_to_v16i8_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB48_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_lshr_b32 s10, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s13, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s12, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s14, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s15, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s20, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s22, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s21, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 8
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_GFX9-NEXT:    s_cbranch_execnz .LBB48_4
; S_GFX9-NEXT:  .LBB48_2: ; %cmp.true
; S_GFX9-NEXT:    v_pk_add_u16 v19, s17, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v18, s16, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v17, s19, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_u16 v16, s18, 3 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX9-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX9-NEXT:    s_branch .LBB48_5
; S_GFX9-NEXT:  .LBB48_3:
; S_GFX9-NEXT:    ; implicit-def: $sgpr23
; S_GFX9-NEXT:    ; implicit-def: $sgpr21
; S_GFX9-NEXT:    ; implicit-def: $sgpr4
; S_GFX9-NEXT:    ; implicit-def: $sgpr22
; S_GFX9-NEXT:    ; implicit-def: $sgpr20
; S_GFX9-NEXT:    ; implicit-def: $sgpr15
; S_GFX9-NEXT:    ; implicit-def: $sgpr14
; S_GFX9-NEXT:    ; implicit-def: $sgpr12
; S_GFX9-NEXT:    ; implicit-def: $sgpr6
; S_GFX9-NEXT:    ; implicit-def: $sgpr13
; S_GFX9-NEXT:    ; implicit-def: $sgpr11
; S_GFX9-NEXT:    ; implicit-def: $sgpr10
; S_GFX9-NEXT:    s_branch .LBB48_2
; S_GFX9-NEXT:  .LBB48_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v18, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v19, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v16, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v17, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s23
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s15
; S_GFX9-NEXT:    v_mov_b32_e32 v9, s14
; S_GFX9-NEXT:    v_mov_b32_e32 v10, s12
; S_GFX9-NEXT:    v_mov_b32_e32 v13, s13
; S_GFX9-NEXT:    v_mov_b32_e32 v14, s11
; S_GFX9-NEXT:    v_mov_b32_e32 v15, s10
; S_GFX9-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX9-NEXT:  .LBB48_5: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX9-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX9-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX9-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8i16_to_v16i8_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB48_3
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_lshr_b32 s9, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s10, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s13, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s14, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s15, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s18, s0, 8
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[0:1], 24
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB48_4
; S_GFX11-NEXT:  .LBB48_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_u16 v19, s1, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v17, s3, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v16, s2, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    v_pk_add_u16 v18, s0, 3 op_sel_hi:[1,0]
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX11-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX11-NEXT:    s_branch .LBB48_5
; S_GFX11-NEXT:  .LBB48_3:
; S_GFX11-NEXT:    ; implicit-def: $sgpr18
; S_GFX11-NEXT:    ; implicit-def: $sgpr16
; S_GFX11-NEXT:    ; implicit-def: $sgpr4
; S_GFX11-NEXT:    ; implicit-def: $sgpr17
; S_GFX11-NEXT:    ; implicit-def: $sgpr15
; S_GFX11-NEXT:    ; implicit-def: $sgpr14
; S_GFX11-NEXT:    ; implicit-def: $sgpr13
; S_GFX11-NEXT:    ; implicit-def: $sgpr11
; S_GFX11-NEXT:    ; implicit-def: $sgpr6
; S_GFX11-NEXT:    ; implicit-def: $sgpr12
; S_GFX11-NEXT:    ; implicit-def: $sgpr10
; S_GFX11-NEXT:    ; implicit-def: $sgpr9
; S_GFX11-NEXT:    s_branch .LBB48_2
; S_GFX11-NEXT:  .LBB48_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v18, s0 :: v_dual_mov_b32 v19, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v16, s2 :: v_dual_mov_b32 v17, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v1, s18 :: v_dual_mov_b32 v2, s16
; S_GFX11-NEXT:    v_dual_mov_b32 v5, s17 :: v_dual_mov_b32 v6, s15
; S_GFX11-NEXT:    v_dual_mov_b32 v7, s14 :: v_dual_mov_b32 v10, s11
; S_GFX11-NEXT:    v_dual_mov_b32 v9, s13 :: v_dual_mov_b32 v14, s10
; S_GFX11-NEXT:    v_mov_b32_e32 v13, s12
; S_GFX11-NEXT:    v_mov_b32_e32 v15, s9
; S_GFX11-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX11-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX11-NEXT:  .LBB48_5: ; %end
; S_GFX11-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX11-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX11-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX11-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i16> %a, splat (i16 3)
  %a2 = bitcast <8 x i16> %a1 to <16 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i16> %a to <16 x i8>
  br label %end

end:
  %phi = phi <16 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i8> %phi
}

define inreg <8 x i16> @bitcast_v16i8_to_v8i16_inreg(<16 x i8> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v16i8_to_v8i16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_SI-NEXT:    v_readfirstlane_b32 s6, v1
; S_SI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_SI-NEXT:    v_readfirstlane_b32 s8, v0
; S_SI-NEXT:    s_cbranch_scc0 .LBB49_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s21, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_and_b32 s5, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s5, 16
; S_SI-NEXT:    s_lshl_b32 s7, s23, 24
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s7, s5
; S_SI-NEXT:    s_or_b32 s10, s4, s5
; S_SI-NEXT:    s_and_b32 s4, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s4, s4, 16
; S_SI-NEXT:    s_lshl_b32 s7, s19, 24
; S_SI-NEXT:    s_or_b32 s4, s7, s4
; S_SI-NEXT:    s_and_b32 s7, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s9, s29, 8
; S_SI-NEXT:    s_or_b32 s7, s7, s9
; S_SI-NEXT:    s_and_b32 s9, s8, 0xff
; S_SI-NEXT:    s_lshl_b32 s9, s9, 16
; S_SI-NEXT:    s_lshl_b32 s11, s6, 24
; S_SI-NEXT:    s_or_b32 s13, s11, s9
; S_SI-NEXT:    s_and_b32 s9, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s9, s9, 16
; S_SI-NEXT:    s_lshl_b32 s11, s27, 24
; S_SI-NEXT:    s_or_b32 s9, s11, s9
; S_SI-NEXT:    s_and_b32 s11, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s12, s17, 8
; S_SI-NEXT:    s_or_b32 s11, s11, s12
; S_SI-NEXT:    s_and_b32 s11, s11, 0xffff
; S_SI-NEXT:    v_mov_b32_e32 v0, s4
; S_SI-NEXT:    s_or_b32 s11, s11, s4
; S_SI-NEXT:    s_and_b32 s4, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s12, s25, 8
; S_SI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_SI-NEXT:    s_or_b32 s4, s4, s12
; S_SI-NEXT:    v_alignbit_b32 v1, s10, v0, 16
; S_SI-NEXT:    s_or_b32 s7, s7, s13
; S_SI-NEXT:    v_mov_b32_e32 v0, s9
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    v_alignbit_b32 v5, s7, v0, 16
; S_SI-NEXT:    s_or_b32 s9, s4, s9
; S_SI-NEXT:    s_lshr_b32 s12, s5, 16
; S_SI-NEXT:    s_lshr_b32 s13, s13, 16
; S_SI-NEXT:    s_cbranch_execnz .LBB49_3
; S_SI-NEXT:  .LBB49_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_and_b32 s4, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s25, 8
; S_SI-NEXT:    s_add_i32 s26, s26, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s7, s26, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s27, 24
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s7
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s28, s28, 3
; S_SI-NEXT:    s_add_i32 s9, s4, 0x3000000
; S_SI-NEXT:    s_and_b32 s4, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s29, 8
; S_SI-NEXT:    s_add_i32 s8, s8, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_lshl_b32 s5, s6, 24
; S_SI-NEXT:    s_and_b32 s6, s8, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s7, s4, 0x3000000
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s6, s18, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s19, 24
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_add_i32 s11, s4, 0x3000000
; S_SI-NEXT:    s_and_b32 s4, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s21, 8
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s6, s22, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s23, 24
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_add_i32 s10, s4, 0x3000000
; S_SI-NEXT:    v_mov_b32_e32 v0, s11
; S_SI-NEXT:    v_alignbit_b32 v1, s10, v0, 16
; S_SI-NEXT:    v_mov_b32_e32 v0, s9
; S_SI-NEXT:    v_alignbit_b32 v5, s7, v0, 16
; S_SI-NEXT:    s_lshr_b32 s12, s10, 16
; S_SI-NEXT:    s_lshr_b32 s13, s7, 16
; S_SI-NEXT:  .LBB49_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s11
; S_SI-NEXT:    v_mov_b32_e32 v2, s10
; S_SI-NEXT:    v_mov_b32_e32 v3, s12
; S_SI-NEXT:    v_mov_b32_e32 v4, s9
; S_SI-NEXT:    v_mov_b32_e32 v6, s7
; S_SI-NEXT:    v_mov_b32_e32 v7, s13
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB49_4:
; S_SI-NEXT:    ; implicit-def: $sgpr11
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    ; implicit-def: $sgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    s_branch .LBB49_2
;
; S_VI-LABEL: bitcast_v16i8_to_v8i16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_VI-NEXT:    v_mov_b32_e32 v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, v0
; S_VI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_VI-NEXT:    s_cbranch_scc0 .LBB49_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_and_b32 s4, s16, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s17, 8
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s19, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    s_lshl_b32 s5, s5, 16
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s20, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s21, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_lshl_b32 s6, s6, 16
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s24, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s25, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s27, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_lshl_b32 s7, s7, 16
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s28, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s29, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 8, v5
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    v_or_b32_sdwa v0, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s4
; S_VI-NEXT:    v_mov_b32_e32 v1, s5
; S_VI-NEXT:    v_mov_b32_e32 v2, s6
; S_VI-NEXT:    s_cbranch_execnz .LBB49_3
; S_VI-NEXT:  .LBB49_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshl_b32 s10, s17, 8
; S_VI-NEXT:    s_and_b32 s11, s16, 0xff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_and_b32 s11, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s9, s19, 24
; S_VI-NEXT:    s_addk_i32 s10, 0x300
; S_VI-NEXT:    s_lshl_b32 s11, s11, 16
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_and_b32 s10, s10, 0xffff
; S_VI-NEXT:    s_or_b32 s9, s9, s11
; S_VI-NEXT:    s_add_i32 s22, s22, 3
; S_VI-NEXT:    s_lshl_b32 s8, s21, 8
; S_VI-NEXT:    s_or_b32 s9, s9, s10
; S_VI-NEXT:    s_and_b32 s10, s20, 0xff
; S_VI-NEXT:    s_or_b32 s8, s8, s10
; S_VI-NEXT:    s_and_b32 s10, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 24
; S_VI-NEXT:    s_addk_i32 s8, 0x300
; S_VI-NEXT:    s_lshl_b32 s10, s10, 16
; S_VI-NEXT:    s_add_i32 s24, s24, 3
; S_VI-NEXT:    s_and_b32 s8, s8, 0xffff
; S_VI-NEXT:    s_or_b32 s7, s7, s10
; S_VI-NEXT:    s_add_i32 s26, s26, 3
; S_VI-NEXT:    s_lshl_b32 s6, s25, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s8, s24, 0xff
; S_VI-NEXT:    s_or_b32 s6, s6, s8
; S_VI-NEXT:    s_and_b32 s8, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s27, 24
; S_VI-NEXT:    s_addk_i32 s6, 0x300
; S_VI-NEXT:    s_lshl_b32 s8, s8, 16
; S_VI-NEXT:    s_add_i32 s28, s28, 3
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_or_b32 s5, s5, s8
; S_VI-NEXT:    v_add_u32_e32 v1, vcc, 3, v4
; S_VI-NEXT:    s_lshl_b32 s4, s29, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s28, 0xff
; S_VI-NEXT:    s_or_b32 s4, s4, s6
; S_VI-NEXT:    v_and_b32_e32 v1, 0xff, v1
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 24, v5
; S_VI-NEXT:    s_addk_i32 s4, 0x300
; S_VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_VI-NEXT:    s_add_i32 s9, s9, 0x3000000
; S_VI-NEXT:    s_add_i32 s7, s7, 0x3000000
; S_VI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_VI-NEXT:    v_or_b32_e32 v0, s4, v0
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x3000000, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s9
; S_VI-NEXT:    v_mov_b32_e32 v1, s7
; S_VI-NEXT:    v_mov_b32_e32 v2, s5
; S_VI-NEXT:  .LBB49_3: ; %end
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB49_4:
; S_VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_VI-NEXT:    s_branch .LBB49_2
;
; S_GFX9-LABEL: bitcast_v16i8_to_v8i16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_GFX9-NEXT:    v_readfirstlane_b32 s10, v1
; S_GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_GFX9-NEXT:    v_readfirstlane_b32 s11, v0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB49_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s8, s9
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_cbranch_execnz .LBB49_3
; S_GFX9-NEXT:  .LBB49_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_or_b32 s4, s5, s4
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_addk_i32 s4, 0x300
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_add_i32 s22, s22, 3
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_add_i32 s24, s24, 3
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_add_i32 s26, s26, 3
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_add_i32 s28, s28, 3
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_add_i32 s11, s11, 3
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s9, s8
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_addk_i32 s8, 0x300
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:  .LBB49_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s5
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s7
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB49_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX9-NEXT:    s_branch .LBB49_2
;
; S_GFX11-LABEL: bitcast_v16i8_to_v8i16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s28, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB49_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_and_b32 s4, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s5, s1, 8
; S_GFX11-NEXT:    s_and_b32 s6, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s3, 8
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s17, 8
; S_GFX11-NEXT:    s_and_b32 s9, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s19, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s21, 8
; S_GFX11-NEXT:    s_and_b32 s9, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s23, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s9, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s25, 8
; S_GFX11-NEXT:    s_and_b32 s11, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s12, s27, 8
; S_GFX11-NEXT:    s_or_b32 s9, s9, s10
; S_GFX11-NEXT:    s_or_b32 s10, s11, s12
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_and_b32 s9, s9, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s10, s10, 16
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB49_3
; S_GFX11-NEXT:  .LBB49_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s18, s18, 3
; S_GFX11-NEXT:    s_or_b32 s4, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s17, 8
; S_GFX11-NEXT:    s_and_b32 s2, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s19, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s20, s20, 3
; S_GFX11-NEXT:    s_or_b32 s5, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s21, 8
; S_GFX11-NEXT:    s_add_i32 s22, s22, 3
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_and_b32 s1, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s2, s23, 8
; S_GFX11-NEXT:    s_add_i32 s24, s24, 3
; S_GFX11-NEXT:    s_add_i32 s26, s26, 3
; S_GFX11-NEXT:    s_or_b32 s1, s2, s1
; S_GFX11-NEXT:    s_and_b32 s2, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s25, 8
; S_GFX11-NEXT:    s_and_b32 s6, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s27, 8
; S_GFX11-NEXT:    s_or_b32 s2, s3, s2
; S_GFX11-NEXT:    s_or_b32 s3, s7, s6
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_addk_i32 s2, 0x300
; S_GFX11-NEXT:    s_addk_i32 s3, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 16
; S_GFX11-NEXT:    s_or_b32 s6, s0, s1
; S_GFX11-NEXT:    s_or_b32 s7, s2, s3
; S_GFX11-NEXT:  .LBB49_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s4 :: v_dual_mov_b32 v1, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s6 :: v_dual_mov_b32 v3, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB49_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX11-NEXT:    s_branch .LBB49_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i8> %a, splat (i8 3)
  %a2 = bitcast <16 x i8> %a1 to <8 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i8> %a to <8 x i16>
  br label %end

end:
  %phi = phi <8 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i16> %phi
}

define inreg <8 x bfloat> @bitcast_v8f16_to_v8bf16_inreg(<8 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8f16_to_v8bf16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v10, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v11, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v12, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v13, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v14, s22
; S_SI-NEXT:    v_cvt_f16_f32_e32 v15, s23
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB50_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v9
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v10
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v11
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v12
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 16, v13
; S_SI-NEXT:    v_lshlrev_b32_e32 v6, 16, v14
; S_SI-NEXT:    v_lshlrev_b32_e32 v7, 16, v15
; S_SI-NEXT:    s_cbranch_execnz .LBB50_3
; S_SI-NEXT:  .LBB50_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v15
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v14
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v13
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v12
; S_SI-NEXT:    v_add_f32_e32 v4, 0x38000000, v0
; S_SI-NEXT:    v_add_f32_e32 v5, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v6, 0x38000000, v2
; S_SI-NEXT:    v_add_f32_e32 v7, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v11
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v10
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v8
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_add_f32_e32 v3, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v3, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v3
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; S_SI-NEXT:    v_lshlrev_b32_e32 v2, 16, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v3, 16, v9
; S_SI-NEXT:    v_cvt_f16_f32_e32 v7, v7
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, v6
; S_SI-NEXT:    v_cvt_f16_f32_e32 v8, v5
; S_SI-NEXT:    v_cvt_f16_f32_e32 v9, v4
; S_SI-NEXT:    v_lshlrev_b32_e32 v4, 16, v7
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 16, v6
; S_SI-NEXT:    v_lshlrev_b32_e32 v6, 16, v8
; S_SI-NEXT:    v_lshlrev_b32_e32 v7, 16, v9
; S_SI-NEXT:  .LBB50_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB50_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB50_2
;
; S_VI-LABEL: bitcast_v8f16_to_v8bf16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB50_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB50_4
; S_VI-NEXT:  .LBB50_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_mov_b32_e32 v1, s4
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_mov_b32_e32 v2, s4
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_mov_b32_e32 v3, s4
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x200
; S_VI-NEXT:    v_mov_b32_e32 v8, s4
; S_VI-NEXT:    v_add_f16_e32 v4, s16, v0
; S_VI-NEXT:    v_add_f16_sdwa v5, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v1, s17, v0
; S_VI-NEXT:    v_add_f16_sdwa v6, v2, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v2, s18, v0
; S_VI-NEXT:    v_add_f16_sdwa v7, v3, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_add_f16_e32 v3, s19, v0
; S_VI-NEXT:    v_add_f16_sdwa v0, v8, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, v3, v0
; S_VI-NEXT:    v_or_b32_e32 v2, v2, v7
; S_VI-NEXT:    v_or_b32_e32 v1, v1, v6
; S_VI-NEXT:    v_or_b32_e32 v0, v4, v5
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB50_3:
; S_VI-NEXT:    s_branch .LBB50_2
; S_VI-NEXT:  .LBB50_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8f16_to_v8bf16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB50_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB50_4
; S_GFX9-NEXT:  .LBB50_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v3, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v2, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v1, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB50_3:
; S_GFX9-NEXT:    s_branch .LBB50_2
; S_GFX9-NEXT:  .LBB50_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8f16_to_v8bf16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB50_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB50_4
; S_GFX11-NEXT:  .LBB50_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v3, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v2, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v1, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB50_3:
; S_GFX11-NEXT:    s_branch .LBB50_2
; S_GFX11-NEXT:  .LBB50_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <8 x half> %a1 to <8 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x half> %a to <8 x bfloat>
  br label %end

end:
  %phi = phi <8 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x bfloat> %phi
}

define inreg <8 x half> @bitcast_v8bf16_to_v8f16_inreg(<8 x bfloat> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8bf16_to_v8f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    v_mul_f32_e64 v8, 1.0, s16
; S_SI-NEXT:    v_mul_f32_e64 v9, 1.0, s17
; S_SI-NEXT:    v_mul_f32_e64 v10, 1.0, s18
; S_SI-NEXT:    v_mul_f32_e64 v11, 1.0, s19
; S_SI-NEXT:    v_mul_f32_e64 v12, 1.0, s20
; S_SI-NEXT:    v_mul_f32_e64 v13, 1.0, s21
; S_SI-NEXT:    v_mul_f32_e64 v14, 1.0, s22
; S_SI-NEXT:    v_mul_f32_e64 v15, 1.0, s23
; S_SI-NEXT:    s_cbranch_scc0 .LBB51_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v8
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v9
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v10
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v11
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v12
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 16, v13
; S_SI-NEXT:    v_lshrrev_b32_e32 v6, 16, v14
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v15
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:    s_cbranch_execnz .LBB51_3
; S_SI-NEXT:  .LBB51_2: ; %cmp.true
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v15
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v14
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v6, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v13
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v12
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v4, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v11
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v3, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v10
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v9
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v0
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v8
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v2
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v3
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, v4
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, v5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, v7
; S_SI-NEXT:  .LBB51_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB51_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB51_2
;
; S_VI-LABEL: bitcast_v8bf16_to_v8f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB51_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_cbranch_execnz .LBB51_4
; S_VI-NEXT:  .LBB51_2: ; %cmp.true
; S_VI-NEXT:    s_lshl_b32 s4, s16, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v4, v2, v3, vcc
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    s_lshl_b32 s4, s17, 16
; S_VI-NEXT:    v_lshrrev_b32_e32 v5, 16, v1
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s17, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v6, vcc
; S_VI-NEXT:    s_lshl_b32 s4, s18, 16
; S_VI-NEXT:    v_lshrrev_b32_e32 v6, 16, v2
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v7, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v7, vcc
; S_VI-NEXT:    v_add_f32_e32 v3, s4, v0
; S_VI-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v7, vcc, v7, v3
; S_VI-NEXT:    v_add_u32_e32 v7, vcc, 0x7fff, v7
; S_VI-NEXT:    v_or_b32_e32 v8, 0x400000, v3
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_VI-NEXT:    v_cndmask_b32_e32 v3, v7, v8, vcc
; S_VI-NEXT:    s_lshl_b32 s4, s19, 16
; S_VI-NEXT:    v_lshrrev_b32_e32 v7, 16, v3
; S_VI-NEXT:    v_add_f32_e32 v3, s4, v0
; S_VI-NEXT:    v_bfe_u32 v8, v3, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, v8, v3
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, 0x7fff, v8
; S_VI-NEXT:    s_and_b32 s4, s19, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_VI-NEXT:    v_add_f32_e32 v0, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v3, v8, v9, vcc
; S_VI-NEXT:    v_bfe_u32 v8, v0, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, v8, v0
; S_VI-NEXT:    v_add_u32_e32 v8, vcc, 0x7fff, v8
; S_VI-NEXT:    v_or_b32_e32 v9, 0x400000, v0
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v0, v8, v9, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_VI-NEXT:    v_alignbit_b32 v3, v0, v3, 16
; S_VI-NEXT:    v_alignbit_b32 v2, v7, v2, 16
; S_VI-NEXT:    v_alignbit_b32 v1, v6, v1, 16
; S_VI-NEXT:    v_alignbit_b32 v0, v5, v4, 16
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB51_3:
; S_VI-NEXT:    s_branch .LBB51_2
; S_VI-NEXT:  .LBB51_4:
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v1, s17
; S_VI-NEXT:    v_mov_b32_e32 v2, s18
; S_VI-NEXT:    v_mov_b32_e32 v3, s19
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8bf16_to_v8f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB51_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_cbranch_execnz .LBB51_4
; S_GFX9-NEXT:  .LBB51_2: ; %cmp.true
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v4, 16, v1
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s17
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v5, v2, v3, vcc
; S_GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; S_GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; S_GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_GFX9-NEXT:    s_lshl_b32 s4, s17, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s18
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v6, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    v_add_f32_e32 v2, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v6, v3, v6, vcc
; S_GFX9-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v3, v3, v2
; S_GFX9-NEXT:    v_add_u32_e32 v3, 0x7fff, v3
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v2
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_GFX9-NEXT:    s_lshl_b32 s4, s18, 16
; S_GFX9-NEXT:    v_cndmask_b32_e32 v2, v3, v7, vcc
; S_GFX9-NEXT:    v_add_f32_e32 v3, s4, v0
; S_GFX9-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v7, v7, v3
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s19
; S_GFX9-NEXT:    v_add_u32_e32 v7, 0x7fff, v7
; S_GFX9-NEXT:    v_or_b32_e32 v8, 0x400000, v3
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_GFX9-NEXT:    v_add_f32_e32 v3, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v7, v7, v8, vcc
; S_GFX9-NEXT:    v_bfe_u32 v8, v3, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v8, v8, v3
; S_GFX9-NEXT:    s_lshl_b32 s4, s19, 16
; S_GFX9-NEXT:    v_add_u32_e32 v8, 0x7fff, v8
; S_GFX9-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v3, v8, v9, vcc
; S_GFX9-NEXT:    v_bfe_u32 v8, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v8, v8, v0
; S_GFX9-NEXT:    v_add_u32_e32 v8, 0x7fff, v8
; S_GFX9-NEXT:    v_or_b32_e32 v9, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v8, v9, vcc
; S_GFX9-NEXT:    v_mov_b32_e32 v8, 0xffff
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v8, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_GFX9-NEXT:    v_lshl_or_b32 v3, v3, 16, v0
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v8, v7 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX9-NEXT:    v_lshl_or_b32 v2, v2, 16, v0
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v8, v6 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshl_or_b32 v1, v1, 16, v0
; S_GFX9-NEXT:    v_and_b32_sdwa v0, v8, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; S_GFX9-NEXT:    v_lshl_or_b32 v0, v4, 16, v0
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB51_3:
; S_GFX9-NEXT:    s_branch .LBB51_2
; S_GFX9-NEXT:  .LBB51_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s19
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8bf16_to_v8f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s4, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB51_3
; S_GFX11-NEXT:  ; %bb.1: ; %Flow
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB51_4
; S_GFX11-NEXT:  .LBB51_2: ; %cmp.true
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s0, 16
; S_GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s4
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s1
; S_GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; S_GFX11-NEXT:    v_add_f32_e64 v2, 0x40c00000, s4
; S_GFX11-NEXT:    s_lshl_b32 s0, s1, 16
; S_GFX11-NEXT:    v_bfe_u32 v3, v0, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v7, 0x400000, v0
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v1
; S_GFX11-NEXT:    v_bfe_u32 v6, v2, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v5, v1, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v9, 0x400000, v2
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; S_GFX11-NEXT:    v_add_f32_e64 v4, 0x40c00000, s0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v6, v6, v2
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; S_GFX11-NEXT:    v_bfe_u32 v10, v4, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v6, 0x7fff, v6
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; S_GFX11-NEXT:    v_dual_cndmask_b32 v0, v3, v7 :: v_dual_add_nc_u32 v5, v5, v1
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_3)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, 0x7fff, v5
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_3)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v1, v5, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v2, v2
; S_GFX11-NEXT:    v_add_f32_e64 v5, 0x40c00000, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s2, 16
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v4
; S_GFX11-NEXT:    v_add_f32_e64 v7, 0x40c00000, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s3, 16
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v6, v9, vcc_lo
; S_GFX11-NEXT:    v_add_f32_e64 v9, 0x40c00000, s0
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v4, v4
; S_GFX11-NEXT:    v_or_b32_e32 v13, 0x400000, v7
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, v10, v4
; S_GFX11-NEXT:    v_bfe_u32 v10, v7, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v12, v9, 16, 1
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v2
; S_GFX11-NEXT:    v_or_b32_e32 v14, 0x400000, v9
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, v10, v7
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, v12, v9
; S_GFX11-NEXT:    v_add_f32_e64 v11, 0x40c00000, s0
; S_GFX11-NEXT:    v_or_b32_e32 v12, 0x400000, v5
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, 0x7fff, v4
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, 0x7fff, v10
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v3
; S_GFX11-NEXT:    v_bfe_u32 v3, v5, 16, 1
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(SKIP_1) | instid1(VALU_DEP_3)
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v2, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v7, v7
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v5
; S_GFX11-NEXT:    v_bfe_u32 v8, v11, 16, 1
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_4) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_GFX11-NEXT:    v_cndmask_b32_e32 v4, v4, v13, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v9, v9
; S_GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v8, v8, v11
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_GFX11-NEXT:    v_cndmask_b32_e32 v9, v10, v14, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v5, v5
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_4) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v8
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v11
; S_GFX11-NEXT:    v_and_b32_e32 v4, 0xffff, v4
; S_GFX11-NEXT:    v_cndmask_b32_e32 v3, v3, v12, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v11, v11
; S_GFX11-NEXT:    v_cndmask_b32_e32 v5, v7, v8, vcc_lo
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 16, v9
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_1) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v8, 16, v3
; S_GFX11-NEXT:    v_and_b32_e32 v9, 0xffff, v1
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v3, 16, v5
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_3) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_and_b32_e32 v5, 0xffff, v7
; S_GFX11-NEXT:    v_and_b32_e32 v7, 0xffff, v2
; S_GFX11-NEXT:    v_lshl_or_b32 v2, v8, 16, v4
; S_GFX11-NEXT:    v_lshl_or_b32 v0, v0, 16, v9
; S_GFX11-NEXT:    v_lshl_or_b32 v3, v3, 16, v5
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshl_or_b32 v1, v6, 16, v7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB51_3:
; S_GFX11-NEXT:    s_branch .LBB51_2
; S_GFX11-NEXT:  .LBB51_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s3
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <8 x bfloat> %a1 to <8 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x bfloat> %a to <8 x half>
  br label %end

end:
  %phi = phi <8 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x half> %phi
}

define inreg <16 x i8> @bitcast_v8f16_to_v16i8_inreg(<8 x half> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8f16_to_v16i8_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cvt_f16_f32_e32 v18, s17
; S_SI-NEXT:    v_cvt_f16_f32_e32 v17, s16
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, s19
; S_SI-NEXT:    v_cvt_f16_f32_e32 v16, s18
; S_SI-NEXT:    v_cvt_f16_f32_e32 v21, s21
; S_SI-NEXT:    v_cvt_f16_f32_e32 v20, s20
; S_SI-NEXT:    v_cvt_f16_f32_e32 v14, s23
; S_SI-NEXT:    v_cvt_f16_f32_e32 v19, s22
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    s_cbranch_scc0 .LBB52_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 16, v21
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v18
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v6
; S_SI-NEXT:    v_or_b32_e32 v8, v20, v5
; S_SI-NEXT:    v_lshlrev_b32_e32 v5, 16, v14
; S_SI-NEXT:    v_or_b32_e32 v0, v17, v0
; S_SI-NEXT:    v_or_b32_e32 v4, v16, v1
; S_SI-NEXT:    v_or_b32_e32 v12, v19, v5
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, v4, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v4, v0, 8
; S_SI-NEXT:    v_alignbit_b32 v11, v12, v8, 24
; S_SI-NEXT:    v_alignbit_b32 v10, v12, v8, 16
; S_SI-NEXT:    v_alignbit_b32 v9, v12, v8, 8
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 8, v4
; S_SI-NEXT:    v_lshrrev_b32_e32 v13, 8, v12
; S_SI-NEXT:    v_bfe_u32 v7, v6, 8, 8
; S_SI-NEXT:    v_bfe_u32 v15, v14, 8, 8
; S_SI-NEXT:    s_cbranch_execnz .LBB52_3
; S_SI-NEXT:  .LBB52_2: ; %cmp.true
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v21
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v20
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v14
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v19
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v14, v2
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_or_b32_e32 v8, v1, v0
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, v18
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v14
; S_SI-NEXT:    v_or_b32_e32 v12, v2, v1
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, v17
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, v6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, v16
; S_SI-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; S_SI-NEXT:    v_cvt_f16_f32_e32 v0, v0
; S_SI-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v2
; S_SI-NEXT:    v_cvt_f16_f32_e32 v1, v1
; S_SI-NEXT:    v_cvt_f16_f32_e32 v6, v2
; S_SI-NEXT:    v_add_f32_e32 v2, 0x38000000, v3
; S_SI-NEXT:    v_cvt_f16_f32_e32 v2, v2
; S_SI-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; S_SI-NEXT:    v_or_b32_e32 v0, v1, v0
; S_SI-NEXT:    v_lshlrev_b32_e32 v1, 16, v6
; S_SI-NEXT:    v_or_b32_e32 v4, v2, v1
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, v4, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v4, v0, 8
; S_SI-NEXT:    v_alignbit_b32 v11, v12, v8, 24
; S_SI-NEXT:    v_alignbit_b32 v10, v12, v8, 16
; S_SI-NEXT:    v_alignbit_b32 v9, v12, v8, 8
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 8, v4
; S_SI-NEXT:    v_lshrrev_b32_e32 v13, 8, v12
; S_SI-NEXT:    v_bfe_u32 v7, v6, 8, 8
; S_SI-NEXT:    v_bfe_u32 v15, v14, 8, 8
; S_SI-NEXT:  .LBB52_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB52_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr8
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr10
; S_SI-NEXT:    ; implicit-def: $vgpr11
; S_SI-NEXT:    ; implicit-def: $vgpr12
; S_SI-NEXT:    ; implicit-def: $vgpr13
; S_SI-NEXT:    ; implicit-def: $vgpr15
; S_SI-NEXT:    s_branch .LBB52_2
;
; S_VI-LABEL: bitcast_v8f16_to_v16i8_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB52_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_lshr_b32 s14, s19, 24
; S_VI-NEXT:    s_lshr_b32 s20, s19, 16
; S_VI-NEXT:    s_lshr_b32 s11, s19, 8
; S_VI-NEXT:    s_lshr_b32 s21, s18, 16
; S_VI-NEXT:    s_lshr_b32 s13, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s22, s17, 16
; S_VI-NEXT:    s_lshr_b32 s10, s17, 8
; S_VI-NEXT:    s_lshr_b32 s23, s16, 16
; S_VI-NEXT:    s_lshr_b32 s12, s16, 8
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_VI-NEXT:    s_cbranch_execnz .LBB52_4
; S_VI-NEXT:  .LBB52_2: ; %cmp.true
; S_VI-NEXT:    s_lshr_b32 s4, s17, 16
; S_VI-NEXT:    v_mov_b32_e32 v1, 0x200
; S_VI-NEXT:    v_add_f16_e32 v6, s4, v1
; S_VI-NEXT:    s_lshr_b32 s4, s16, 16
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 16, v6
; S_VI-NEXT:    v_add_f16_e32 v17, s17, v1
; S_VI-NEXT:    v_add_f16_e32 v2, s4, v1
; S_VI-NEXT:    s_lshr_b32 s4, s19, 16
; S_VI-NEXT:    v_or_b32_e32 v19, v17, v0
; S_VI-NEXT:    v_lshlrev_b32_e32 v3, 16, v2
; S_VI-NEXT:    v_add_f16_e32 v0, s16, v1
; S_VI-NEXT:    v_add_f16_e32 v14, s4, v1
; S_VI-NEXT:    s_lshr_b32 s4, s18, 16
; S_VI-NEXT:    v_or_b32_e32 v18, v0, v3
; S_VI-NEXT:    v_lshlrev_b32_e32 v3, 16, v14
; S_VI-NEXT:    v_add_f16_e32 v16, s19, v1
; S_VI-NEXT:    v_add_f16_e32 v10, s4, v1
; S_VI-NEXT:    v_or_b32_e32 v21, v16, v3
; S_VI-NEXT:    v_lshlrev_b32_e32 v3, 16, v10
; S_VI-NEXT:    v_add_f16_e32 v8, s18, v1
; S_VI-NEXT:    v_or_b32_e32 v20, v8, v3
; S_VI-NEXT:    v_lshrrev_b64 v[11:12], 24, v[20:21]
; S_VI-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_VI-NEXT:    v_lshrrev_b32_e32 v13, 8, v21
; S_VI-NEXT:    v_lshrrev_b32_e32 v9, 8, v20
; S_VI-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_VI-NEXT:    v_bfe_u32 v15, v14, 8, 8
; S_VI-NEXT:    v_bfe_u32 v7, v6, 8, 8
; S_VI-NEXT:    s_branch .LBB52_5
; S_VI-NEXT:  .LBB52_3:
; S_VI-NEXT:    ; implicit-def: $sgpr12
; S_VI-NEXT:    ; implicit-def: $sgpr23
; S_VI-NEXT:    ; implicit-def: $sgpr4
; S_VI-NEXT:    ; implicit-def: $sgpr10
; S_VI-NEXT:    ; implicit-def: $sgpr22
; S_VI-NEXT:    ; implicit-def: $sgpr15
; S_VI-NEXT:    ; implicit-def: $sgpr13
; S_VI-NEXT:    ; implicit-def: $sgpr21
; S_VI-NEXT:    ; implicit-def: $sgpr6
; S_VI-NEXT:    ; implicit-def: $sgpr11
; S_VI-NEXT:    ; implicit-def: $sgpr20
; S_VI-NEXT:    ; implicit-def: $sgpr14
; S_VI-NEXT:    s_branch .LBB52_2
; S_VI-NEXT:  .LBB52_4:
; S_VI-NEXT:    v_mov_b32_e32 v2, s23
; S_VI-NEXT:    v_mov_b32_e32 v6, s22
; S_VI-NEXT:    v_mov_b32_e32 v10, s21
; S_VI-NEXT:    v_mov_b32_e32 v14, s20
; S_VI-NEXT:    v_mov_b32_e32 v0, s16
; S_VI-NEXT:    v_mov_b32_e32 v17, s17
; S_VI-NEXT:    v_mov_b32_e32 v8, s18
; S_VI-NEXT:    v_mov_b32_e32 v16, s19
; S_VI-NEXT:    v_mov_b32_e32 v15, s14
; S_VI-NEXT:    v_mov_b32_e32 v7, s15
; S_VI-NEXT:    v_mov_b32_e32 v9, s13
; S_VI-NEXT:    v_mov_b32_e32 v13, s11
; S_VI-NEXT:    v_mov_b32_e32 v1, s12
; S_VI-NEXT:    v_mov_b32_e32 v5, s10
; S_VI-NEXT:    v_mov_b32_e32 v11, s6
; S_VI-NEXT:    v_mov_b32_e32 v3, s4
; S_VI-NEXT:  .LBB52_5: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v4, v17
; S_VI-NEXT:    v_mov_b32_e32 v12, v16
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8f16_to_v16i8_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB52_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_lshr_b32 s10, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s11, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s13, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s12, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s14, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s15, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s20, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s22, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s21, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s23, s16, 8
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_GFX9-NEXT:    s_cbranch_execnz .LBB52_4
; S_GFX9-NEXT:  .LBB52_2: ; %cmp.true
; S_GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; S_GFX9-NEXT:    v_pk_add_f16 v19, s17, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v18, s16, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v17, s19, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_pk_add_f16 v16, s18, v0 op_sel_hi:[1,0]
; S_GFX9-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX9-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX9-NEXT:    s_branch .LBB52_5
; S_GFX9-NEXT:  .LBB52_3:
; S_GFX9-NEXT:    ; implicit-def: $sgpr23
; S_GFX9-NEXT:    ; implicit-def: $sgpr21
; S_GFX9-NEXT:    ; implicit-def: $sgpr4
; S_GFX9-NEXT:    ; implicit-def: $sgpr22
; S_GFX9-NEXT:    ; implicit-def: $sgpr20
; S_GFX9-NEXT:    ; implicit-def: $sgpr15
; S_GFX9-NEXT:    ; implicit-def: $sgpr14
; S_GFX9-NEXT:    ; implicit-def: $sgpr12
; S_GFX9-NEXT:    ; implicit-def: $sgpr6
; S_GFX9-NEXT:    ; implicit-def: $sgpr13
; S_GFX9-NEXT:    ; implicit-def: $sgpr11
; S_GFX9-NEXT:    ; implicit-def: $sgpr10
; S_GFX9-NEXT:    s_branch .LBB52_2
; S_GFX9-NEXT:  .LBB52_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v18, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v19, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v16, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v17, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s23
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s15
; S_GFX9-NEXT:    v_mov_b32_e32 v9, s14
; S_GFX9-NEXT:    v_mov_b32_e32 v10, s12
; S_GFX9-NEXT:    v_mov_b32_e32 v13, s13
; S_GFX9-NEXT:    v_mov_b32_e32 v14, s11
; S_GFX9-NEXT:    v_mov_b32_e32 v15, s10
; S_GFX9-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX9-NEXT:  .LBB52_5: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX9-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX9-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX9-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8f16_to_v16i8_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB52_3
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_lshr_b32 s9, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s10, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s11, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s13, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s14, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s15, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s17, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s18, s0, 8
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[0:1], 24
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB52_4
; S_GFX11-NEXT:  .LBB52_2: ; %cmp.true
; S_GFX11-NEXT:    v_pk_add_f16 v19, 0x200, s1 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v17, 0x200, s3 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v16, 0x200, s2 op_sel_hi:[0,1]
; S_GFX11-NEXT:    v_pk_add_f16 v18, 0x200, s0 op_sel_hi:[0,1]
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_GFX11-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_GFX11-NEXT:    s_branch .LBB52_5
; S_GFX11-NEXT:  .LBB52_3:
; S_GFX11-NEXT:    ; implicit-def: $sgpr18
; S_GFX11-NEXT:    ; implicit-def: $sgpr16
; S_GFX11-NEXT:    ; implicit-def: $sgpr4
; S_GFX11-NEXT:    ; implicit-def: $sgpr17
; S_GFX11-NEXT:    ; implicit-def: $sgpr15
; S_GFX11-NEXT:    ; implicit-def: $sgpr14
; S_GFX11-NEXT:    ; implicit-def: $sgpr13
; S_GFX11-NEXT:    ; implicit-def: $sgpr11
; S_GFX11-NEXT:    ; implicit-def: $sgpr6
; S_GFX11-NEXT:    ; implicit-def: $sgpr12
; S_GFX11-NEXT:    ; implicit-def: $sgpr10
; S_GFX11-NEXT:    ; implicit-def: $sgpr9
; S_GFX11-NEXT:    s_branch .LBB52_2
; S_GFX11-NEXT:  .LBB52_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v18, s0 :: v_dual_mov_b32 v19, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v16, s2 :: v_dual_mov_b32 v17, s3
; S_GFX11-NEXT:    v_dual_mov_b32 v1, s18 :: v_dual_mov_b32 v2, s16
; S_GFX11-NEXT:    v_dual_mov_b32 v5, s17 :: v_dual_mov_b32 v6, s15
; S_GFX11-NEXT:    v_dual_mov_b32 v7, s14 :: v_dual_mov_b32 v10, s11
; S_GFX11-NEXT:    v_dual_mov_b32 v9, s13 :: v_dual_mov_b32 v14, s10
; S_GFX11-NEXT:    v_mov_b32_e32 v13, s12
; S_GFX11-NEXT:    v_mov_b32_e32 v15, s9
; S_GFX11-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX11-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX11-NEXT:  .LBB52_5: ; %end
; S_GFX11-NEXT:    v_mov_b32_e32 v0, v18
; S_GFX11-NEXT:    v_mov_b32_e32 v4, v19
; S_GFX11-NEXT:    v_mov_b32_e32 v8, v16
; S_GFX11-NEXT:    v_mov_b32_e32 v12, v17
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <8 x half> %a1 to <16 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <8 x half> %a to <16 x i8>
  br label %end

end:
  %phi = phi <16 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i8> %phi
}

define inreg <8 x half> @bitcast_v16i8_to_v8f16_inreg(<16 x i8> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v16i8_to_v8f16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_SI-NEXT:    v_readfirstlane_b32 s6, v1
; S_SI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_SI-NEXT:    v_readfirstlane_b32 s7, v0
; S_SI-NEXT:    s_cbranch_scc0 .LBB53_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s17, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s4
; S_SI-NEXT:    s_and_b32 s4, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s19, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s4
; S_SI-NEXT:    s_and_b32 s4, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s21, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s4
; S_SI-NEXT:    s_and_b32 s4, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s23, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s4
; S_SI-NEXT:    s_and_b32 s4, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s25, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s4
; S_SI-NEXT:    s_and_b32 s4, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s27, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s4
; S_SI-NEXT:    s_and_b32 s4, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s29, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s4
; S_SI-NEXT:    s_and_b32 s4, s7, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s6, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:    s_cbranch_execnz .LBB53_3
; S_SI-NEXT:  .LBB53_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s7, s7, 3
; S_SI-NEXT:    s_and_b32 s4, s7, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s6, 8
; S_SI-NEXT:    s_add_i32 s28, s28, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s29, 8
; S_SI-NEXT:    s_add_i32 s26, s26, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s27, 8
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s7, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s8, s25, 8
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s7, s8, s7
; S_SI-NEXT:    s_and_b32 s8, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s9, s23, 8
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s8, s9, s8
; S_SI-NEXT:    s_and_b32 s9, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s10, s21, 8
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s9, s10, s9
; S_SI-NEXT:    s_and_b32 s10, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s11, s19, 8
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_or_b32 s10, s11, s10
; S_SI-NEXT:    s_and_b32 s11, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s12, s17, 8
; S_SI-NEXT:    s_or_b32 s11, s12, s11
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_addk_i32 s5, 0x300
; S_SI-NEXT:    s_addk_i32 s6, 0x300
; S_SI-NEXT:    s_addk_i32 s7, 0x300
; S_SI-NEXT:    s_addk_i32 s8, 0x300
; S_SI-NEXT:    s_addk_i32 s9, 0x300
; S_SI-NEXT:    s_addk_i32 s10, 0x300
; S_SI-NEXT:    s_addk_i32 s11, 0x300
; S_SI-NEXT:    v_cvt_f32_f16_e32 v0, s11
; S_SI-NEXT:    v_cvt_f32_f16_e32 v1, s10
; S_SI-NEXT:    v_cvt_f32_f16_e32 v2, s9
; S_SI-NEXT:    v_cvt_f32_f16_e32 v3, s8
; S_SI-NEXT:    v_cvt_f32_f16_e32 v4, s7
; S_SI-NEXT:    v_cvt_f32_f16_e32 v5, s6
; S_SI-NEXT:    v_cvt_f32_f16_e32 v6, s5
; S_SI-NEXT:    v_cvt_f32_f16_e32 v7, s4
; S_SI-NEXT:  .LBB53_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB53_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    s_branch .LBB53_2
;
; S_VI-LABEL: bitcast_v16i8_to_v8f16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_VI-NEXT:    v_mov_b32_e32 v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, v0
; S_VI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_VI-NEXT:    s_cbranch_scc0 .LBB53_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_and_b32 s4, s16, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s17, 8
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s19, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    s_lshl_b32 s5, s5, 16
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s20, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s21, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_lshl_b32 s6, s6, 16
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s24, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s25, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s27, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_lshl_b32 s7, s7, 16
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s28, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s29, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 8, v5
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    v_or_b32_sdwa v0, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s4
; S_VI-NEXT:    v_mov_b32_e32 v1, s5
; S_VI-NEXT:    v_mov_b32_e32 v2, s6
; S_VI-NEXT:    s_cbranch_execnz .LBB53_3
; S_VI-NEXT:  .LBB53_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshl_b32 s10, s17, 8
; S_VI-NEXT:    s_and_b32 s11, s16, 0xff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_and_b32 s11, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s9, s19, 24
; S_VI-NEXT:    s_addk_i32 s10, 0x300
; S_VI-NEXT:    s_lshl_b32 s11, s11, 16
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_and_b32 s10, s10, 0xffff
; S_VI-NEXT:    s_or_b32 s9, s9, s11
; S_VI-NEXT:    s_add_i32 s22, s22, 3
; S_VI-NEXT:    s_lshl_b32 s8, s21, 8
; S_VI-NEXT:    s_or_b32 s9, s9, s10
; S_VI-NEXT:    s_and_b32 s10, s20, 0xff
; S_VI-NEXT:    s_or_b32 s8, s8, s10
; S_VI-NEXT:    s_and_b32 s10, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 24
; S_VI-NEXT:    s_addk_i32 s8, 0x300
; S_VI-NEXT:    s_lshl_b32 s10, s10, 16
; S_VI-NEXT:    s_add_i32 s24, s24, 3
; S_VI-NEXT:    s_and_b32 s8, s8, 0xffff
; S_VI-NEXT:    s_or_b32 s7, s7, s10
; S_VI-NEXT:    s_add_i32 s26, s26, 3
; S_VI-NEXT:    s_lshl_b32 s6, s25, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s8, s24, 0xff
; S_VI-NEXT:    s_or_b32 s6, s6, s8
; S_VI-NEXT:    s_and_b32 s8, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s27, 24
; S_VI-NEXT:    s_addk_i32 s6, 0x300
; S_VI-NEXT:    s_lshl_b32 s8, s8, 16
; S_VI-NEXT:    s_add_i32 s28, s28, 3
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_or_b32 s5, s5, s8
; S_VI-NEXT:    v_add_u32_e32 v1, vcc, 3, v4
; S_VI-NEXT:    s_lshl_b32 s4, s29, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s28, 0xff
; S_VI-NEXT:    s_or_b32 s4, s4, s6
; S_VI-NEXT:    v_and_b32_e32 v1, 0xff, v1
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 24, v5
; S_VI-NEXT:    s_addk_i32 s4, 0x300
; S_VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_VI-NEXT:    s_add_i32 s9, s9, 0x3000000
; S_VI-NEXT:    s_add_i32 s7, s7, 0x3000000
; S_VI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_VI-NEXT:    v_or_b32_e32 v0, s4, v0
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x3000000, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s9
; S_VI-NEXT:    v_mov_b32_e32 v1, s7
; S_VI-NEXT:    v_mov_b32_e32 v2, s5
; S_VI-NEXT:  .LBB53_3: ; %end
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB53_4:
; S_VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_VI-NEXT:    s_branch .LBB53_2
;
; S_GFX9-LABEL: bitcast_v16i8_to_v8f16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_GFX9-NEXT:    v_readfirstlane_b32 s10, v1
; S_GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_GFX9-NEXT:    v_readfirstlane_b32 s11, v0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB53_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s8, s9
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_cbranch_execnz .LBB53_3
; S_GFX9-NEXT:  .LBB53_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_or_b32 s4, s5, s4
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_addk_i32 s4, 0x300
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_add_i32 s22, s22, 3
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_add_i32 s24, s24, 3
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_add_i32 s26, s26, 3
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_add_i32 s28, s28, 3
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_add_i32 s11, s11, 3
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s9, s8
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_addk_i32 s8, 0x300
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:  .LBB53_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s5
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s7
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB53_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX9-NEXT:    s_branch .LBB53_2
;
; S_GFX11-LABEL: bitcast_v16i8_to_v8f16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s28, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB53_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_and_b32 s4, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s5, s1, 8
; S_GFX11-NEXT:    s_and_b32 s6, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s3, 8
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s17, 8
; S_GFX11-NEXT:    s_and_b32 s9, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s19, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s21, 8
; S_GFX11-NEXT:    s_and_b32 s9, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s23, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s9, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s25, 8
; S_GFX11-NEXT:    s_and_b32 s11, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s12, s27, 8
; S_GFX11-NEXT:    s_or_b32 s9, s9, s10
; S_GFX11-NEXT:    s_or_b32 s10, s11, s12
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_and_b32 s9, s9, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s10, s10, 16
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB53_3
; S_GFX11-NEXT:  .LBB53_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s18, s18, 3
; S_GFX11-NEXT:    s_or_b32 s4, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s17, 8
; S_GFX11-NEXT:    s_and_b32 s2, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s19, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s20, s20, 3
; S_GFX11-NEXT:    s_or_b32 s5, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s21, 8
; S_GFX11-NEXT:    s_add_i32 s22, s22, 3
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_and_b32 s1, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s2, s23, 8
; S_GFX11-NEXT:    s_add_i32 s24, s24, 3
; S_GFX11-NEXT:    s_add_i32 s26, s26, 3
; S_GFX11-NEXT:    s_or_b32 s1, s2, s1
; S_GFX11-NEXT:    s_and_b32 s2, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s25, 8
; S_GFX11-NEXT:    s_and_b32 s6, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s27, 8
; S_GFX11-NEXT:    s_or_b32 s2, s3, s2
; S_GFX11-NEXT:    s_or_b32 s3, s7, s6
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_addk_i32 s2, 0x300
; S_GFX11-NEXT:    s_addk_i32 s3, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 16
; S_GFX11-NEXT:    s_or_b32 s6, s0, s1
; S_GFX11-NEXT:    s_or_b32 s7, s2, s3
; S_GFX11-NEXT:  .LBB53_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s4 :: v_dual_mov_b32 v1, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s6 :: v_dual_mov_b32 v3, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB53_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX11-NEXT:    s_branch .LBB53_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i8> %a, splat (i8 3)
  %a2 = bitcast <16 x i8> %a1 to <8 x half>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i8> %a to <8 x half>
  br label %end

end:
  %phi = phi <8 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x half> %phi
}

define inreg <16 x i8> @bitcast_v8bf16_to_v16i8_inreg(<8 x bfloat> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v8bf16_to_v16i8_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    s_cmp_lg_u32 s24, 0
; S_SI-NEXT:    v_mul_f32_e64 v18, 1.0, s17
; S_SI-NEXT:    v_mul_f32_e64 v19, 1.0, s16
; S_SI-NEXT:    v_mul_f32_e64 v16, 1.0, s19
; S_SI-NEXT:    v_mul_f32_e64 v17, 1.0, s18
; S_SI-NEXT:    v_mul_f32_e64 v22, 1.0, s21
; S_SI-NEXT:    v_mul_f32_e64 v23, 1.0, s20
; S_SI-NEXT:    v_mul_f32_e64 v20, 1.0, s23
; S_SI-NEXT:    v_mul_f32_e64 v21, 1.0, s22
; S_SI-NEXT:    s_cbranch_scc0 .LBB54_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    v_lshrrev_b32_e32 v0, 16, v18
; S_SI-NEXT:    v_lshrrev_b32_e32 v6, 16, v16
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 16, v22
; S_SI-NEXT:    v_lshrrev_b32_e32 v14, 16, v20
; S_SI-NEXT:    v_alignbit_b32 v0, v0, v19, 16
; S_SI-NEXT:    v_alignbit_b32 v4, v6, v17, 16
; S_SI-NEXT:    v_alignbit_b32 v8, v5, v23, 16
; S_SI-NEXT:    v_alignbit_b32 v12, v14, v21, 16
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, v4, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v4, v0, 8
; S_SI-NEXT:    v_alignbit_b32 v11, v12, v8, 24
; S_SI-NEXT:    v_alignbit_b32 v10, v12, v8, 16
; S_SI-NEXT:    v_alignbit_b32 v9, v12, v8, 8
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 24, v16
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 8, v4
; S_SI-NEXT:    v_lshrrev_b32_e32 v15, 24, v20
; S_SI-NEXT:    v_lshrrev_b32_e32 v13, 8, v12
; S_SI-NEXT:    s_cbranch_execnz .LBB54_3
; S_SI-NEXT:  .LBB54_2: ; %cmp.true
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v22
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v23
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_alignbit_b32 v8, v1, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v20
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v21
; S_SI-NEXT:    v_add_f32_e32 v15, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v14, 16, v15
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v18
; S_SI-NEXT:    v_alignbit_b32 v12, v14, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v0, 0xffff0000, v19
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; S_SI-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; S_SI-NEXT:    v_and_b32_e32 v2, 0xffff0000, v16
; S_SI-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; S_SI-NEXT:    v_and_b32_e32 v1, 0xffff0000, v17
; S_SI-NEXT:    v_add_f32_e32 v7, 0x40c00000, v2
; S_SI-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; S_SI-NEXT:    v_lshrrev_b32_e32 v6, 16, v7
; S_SI-NEXT:    v_alignbit_b32 v4, v6, v1, 16
; S_SI-NEXT:    v_alignbit_b32 v3, v4, v0, 24
; S_SI-NEXT:    v_alignbit_b32 v2, v4, v0, 16
; S_SI-NEXT:    v_alignbit_b32 v1, v4, v0, 8
; S_SI-NEXT:    v_alignbit_b32 v11, v12, v8, 24
; S_SI-NEXT:    v_alignbit_b32 v10, v12, v8, 16
; S_SI-NEXT:    v_alignbit_b32 v9, v12, v8, 8
; S_SI-NEXT:    v_lshrrev_b32_e32 v5, 8, v4
; S_SI-NEXT:    v_lshrrev_b32_e32 v13, 8, v12
; S_SI-NEXT:    v_lshrrev_b32_e32 v7, 24, v7
; S_SI-NEXT:    v_lshrrev_b32_e32 v15, 24, v15
; S_SI-NEXT:  .LBB54_3: ; %end
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB54_4:
; S_SI-NEXT:    ; implicit-def: $vgpr0
; S_SI-NEXT:    ; implicit-def: $vgpr1
; S_SI-NEXT:    ; implicit-def: $vgpr2
; S_SI-NEXT:    ; implicit-def: $vgpr3
; S_SI-NEXT:    ; implicit-def: $vgpr4
; S_SI-NEXT:    ; implicit-def: $vgpr5
; S_SI-NEXT:    ; implicit-def: $vgpr6
; S_SI-NEXT:    ; implicit-def: $vgpr7
; S_SI-NEXT:    ; implicit-def: $vgpr8
; S_SI-NEXT:    ; implicit-def: $vgpr9
; S_SI-NEXT:    ; implicit-def: $vgpr10
; S_SI-NEXT:    ; implicit-def: $vgpr11
; S_SI-NEXT:    ; implicit-def: $vgpr12
; S_SI-NEXT:    ; implicit-def: $vgpr13
; S_SI-NEXT:    ; implicit-def: $vgpr14
; S_SI-NEXT:    ; implicit-def: $vgpr15
; S_SI-NEXT:    s_branch .LBB54_2
;
; S_VI-LABEL: bitcast_v8bf16_to_v16i8_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    s_cmp_lg_u32 s20, 0
; S_VI-NEXT:    s_cbranch_scc0 .LBB54_3
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_lshr_b32 s10, s19, 24
; S_VI-NEXT:    s_lshr_b32 s11, s19, 16
; S_VI-NEXT:    s_lshr_b32 s13, s19, 8
; S_VI-NEXT:    s_lshr_b32 s12, s18, 16
; S_VI-NEXT:    s_lshr_b32 s14, s18, 8
; S_VI-NEXT:    s_lshr_b32 s15, s17, 24
; S_VI-NEXT:    s_lshr_b32 s20, s17, 16
; S_VI-NEXT:    s_lshr_b32 s22, s17, 8
; S_VI-NEXT:    s_lshr_b32 s21, s16, 16
; S_VI-NEXT:    s_lshr_b32 s23, s16, 8
; S_VI-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_VI-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_VI-NEXT:    s_cbranch_execnz .LBB54_4
; S_VI-NEXT:  .LBB54_2: ; %cmp.true
; S_VI-NEXT:    s_lshl_b32 s4, s17, 16
; S_VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s17, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s16, 16
; S_VI-NEXT:    v_alignbit_b32 v19, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s19, 16
; S_VI-NEXT:    v_alignbit_b32 v18, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    s_and_b32 s4, s19, 0xffff0000
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_add_f32_e32 v2, s4, v0
; S_VI-NEXT:    v_bfe_u32 v3, v2, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, v3, v2
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x7fff, v3
; S_VI-NEXT:    v_or_b32_e32 v4, 0x400000, v2
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v2, v2
; S_VI-NEXT:    v_cndmask_b32_e32 v2, v3, v4, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v2
; S_VI-NEXT:    s_lshl_b32 s4, s18, 16
; S_VI-NEXT:    v_alignbit_b32 v17, v2, v1, 16
; S_VI-NEXT:    v_add_f32_e32 v1, s4, v0
; S_VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    s_and_b32 s4, s18, 0xffff0000
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; S_VI-NEXT:    v_add_f32_e32 v0, s4, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; S_VI-NEXT:    v_bfe_u32 v2, v0, 16, 1
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v0
; S_VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; S_VI-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; S_VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_VI-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; S_VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_VI-NEXT:    v_alignbit_b32 v16, v0, v1, 16
; S_VI-NEXT:    v_lshrrev_b64 v[11:12], 24, v[16:17]
; S_VI-NEXT:    v_lshrrev_b64 v[3:4], 24, v[18:19]
; S_VI-NEXT:    v_lshrrev_b32_e32 v15, 24, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v14, 16, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v13, 8, v17
; S_VI-NEXT:    v_lshrrev_b32_e32 v10, 16, v16
; S_VI-NEXT:    v_lshrrev_b32_e32 v9, 8, v16
; S_VI-NEXT:    v_lshrrev_b32_e32 v7, 24, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v6, 16, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v5, 8, v19
; S_VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v18
; S_VI-NEXT:    v_lshrrev_b32_e32 v1, 8, v18
; S_VI-NEXT:    s_branch .LBB54_5
; S_VI-NEXT:  .LBB54_3:
; S_VI-NEXT:    ; implicit-def: $sgpr23
; S_VI-NEXT:    ; implicit-def: $sgpr21
; S_VI-NEXT:    ; implicit-def: $sgpr4
; S_VI-NEXT:    ; implicit-def: $sgpr22
; S_VI-NEXT:    ; implicit-def: $sgpr20
; S_VI-NEXT:    ; implicit-def: $sgpr15
; S_VI-NEXT:    ; implicit-def: $sgpr14
; S_VI-NEXT:    ; implicit-def: $sgpr12
; S_VI-NEXT:    ; implicit-def: $sgpr6
; S_VI-NEXT:    ; implicit-def: $sgpr13
; S_VI-NEXT:    ; implicit-def: $sgpr11
; S_VI-NEXT:    ; implicit-def: $sgpr10
; S_VI-NEXT:    s_branch .LBB54_2
; S_VI-NEXT:  .LBB54_4:
; S_VI-NEXT:    v_mov_b32_e32 v18, s16
; S_VI-NEXT:    v_mov_b32_e32 v19, s17
; S_VI-NEXT:    v_mov_b32_e32 v16, s18
; S_VI-NEXT:    v_mov_b32_e32 v17, s19
; S_VI-NEXT:    v_mov_b32_e32 v1, s23
; S_VI-NEXT:    v_mov_b32_e32 v2, s21
; S_VI-NEXT:    v_mov_b32_e32 v5, s22
; S_VI-NEXT:    v_mov_b32_e32 v6, s20
; S_VI-NEXT:    v_mov_b32_e32 v7, s15
; S_VI-NEXT:    v_mov_b32_e32 v9, s14
; S_VI-NEXT:    v_mov_b32_e32 v10, s12
; S_VI-NEXT:    v_mov_b32_e32 v13, s13
; S_VI-NEXT:    v_mov_b32_e32 v14, s11
; S_VI-NEXT:    v_mov_b32_e32 v15, s10
; S_VI-NEXT:    v_mov_b32_e32 v11, s6
; S_VI-NEXT:    v_mov_b32_e32 v3, s4
; S_VI-NEXT:  .LBB54_5: ; %end
; S_VI-NEXT:    v_mov_b32_e32 v0, v18
; S_VI-NEXT:    v_mov_b32_e32 v4, v19
; S_VI-NEXT:    v_mov_b32_e32 v8, v16
; S_VI-NEXT:    v_mov_b32_e32 v12, v17
; S_VI-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX9-LABEL: bitcast_v8bf16_to_v16i8_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB54_3
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_lshr_b32 s12, s19, 24
; S_GFX9-NEXT:    s_lshr_b32 s23, s19, 16
; S_GFX9-NEXT:    s_lshr_b32 s15, s19, 8
; S_GFX9-NEXT:    s_lshr_b32 s21, s18, 16
; S_GFX9-NEXT:    s_lshr_b32 s20, s18, 8
; S_GFX9-NEXT:    s_lshr_b32 s10, s17, 24
; S_GFX9-NEXT:    s_lshr_b32 s22, s17, 16
; S_GFX9-NEXT:    s_lshr_b32 s11, s17, 8
; S_GFX9-NEXT:    s_lshr_b32 s14, s16, 16
; S_GFX9-NEXT:    s_lshr_b32 s13, s16, 8
; S_GFX9-NEXT:    s_lshr_b64 s[6:7], s[18:19], 24
; S_GFX9-NEXT:    s_lshr_b64 s[4:5], s[16:17], 24
; S_GFX9-NEXT:    s_cbranch_execnz .LBB54_4
; S_GFX9-NEXT:  .LBB54_2: ; %cmp.true
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v3, 0x40c00000
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v3
; S_GFX9-NEXT:    v_bfe_u32 v1, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v1, v1, v0
; S_GFX9-NEXT:    v_add_u32_e32 v1, 0x7fff, v1
; S_GFX9-NEXT:    v_or_b32_e32 v2, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v1, v2, vcc
; S_GFX9-NEXT:    s_lshl_b32 s4, s17, 16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v6, 16, v0
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v3
; S_GFX9-NEXT:    v_bfe_u32 v1, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v1, v1, v0
; S_GFX9-NEXT:    v_add_u32_e32 v1, 0x7fff, v1
; S_GFX9-NEXT:    v_or_b32_e32 v2, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v1, v2, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v17, 16, v0
; S_GFX9-NEXT:    v_and_b32_e32 v0, 0xffff, v17
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s16
; S_GFX9-NEXT:    v_lshl_or_b32 v2, v6, 16, v0
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v3
; S_GFX9-NEXT:    v_bfe_u32 v1, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v1, v1, v0
; S_GFX9-NEXT:    v_add_u32_e32 v1, 0x7fff, v1
; S_GFX9-NEXT:    v_or_b32_e32 v4, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v1, v4, vcc
; S_GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v0
; S_GFX9-NEXT:    v_add_f32_e32 v0, s4, v3
; S_GFX9-NEXT:    v_bfe_u32 v4, v0, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v4, v4, v0
; S_GFX9-NEXT:    v_add_u32_e32 v4, 0x7fff, v4
; S_GFX9-NEXT:    v_or_b32_e32 v5, 0x400000, v0
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; S_GFX9-NEXT:    v_cndmask_b32_e32 v0, v4, v5, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX9-NEXT:    v_and_b32_e32 v4, 0xffff, v0
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s19
; S_GFX9-NEXT:    v_lshl_or_b32 v1, v1, 16, v4
; S_GFX9-NEXT:    v_add_f32_e32 v4, s4, v3
; S_GFX9-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v4
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v4
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_GFX9-NEXT:    v_cndmask_b32_e32 v4, v5, v7, vcc
; S_GFX9-NEXT:    s_lshl_b32 s4, s19, 16
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v14, 16, v4
; S_GFX9-NEXT:    v_add_f32_e32 v4, s4, v3
; S_GFX9-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v4
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v4
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_GFX9-NEXT:    v_cndmask_b32_e32 v4, v5, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v16, 16, v4
; S_GFX9-NEXT:    v_and_b32_e32 v4, 0xffff, v16
; S_GFX9-NEXT:    s_pack_lh_b32_b16 s4, 0, s18
; S_GFX9-NEXT:    v_lshl_or_b32 v10, v14, 16, v4
; S_GFX9-NEXT:    v_add_f32_e32 v4, s4, v3
; S_GFX9-NEXT:    v_bfe_u32 v5, v4, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v4
; S_GFX9-NEXT:    s_lshl_b32 s4, s18, 16
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v4
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v4, v4
; S_GFX9-NEXT:    v_add_f32_e32 v3, s4, v3
; S_GFX9-NEXT:    v_cndmask_b32_e32 v4, v5, v7, vcc
; S_GFX9-NEXT:    v_bfe_u32 v5, v3, 16, 1
; S_GFX9-NEXT:    v_add_u32_e32 v5, v5, v3
; S_GFX9-NEXT:    v_add_u32_e32 v5, 0x7fff, v5
; S_GFX9-NEXT:    v_or_b32_e32 v7, 0x400000, v3
; S_GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v3, v3
; S_GFX9-NEXT:    v_cndmask_b32_e32 v3, v5, v7, vcc
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v8, 16, v3
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v4, 16, v4
; S_GFX9-NEXT:    v_and_b32_e32 v3, 0xffff, v8
; S_GFX9-NEXT:    v_lshl_or_b32 v9, v4, 16, v3
; S_GFX9-NEXT:    v_lshrrev_b64 v[11:12], 24, v[9:10]
; S_GFX9-NEXT:    v_lshrrev_b64 v[3:4], 24, v[1:2]
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v15, 24, v10
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v13, 8, v10
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v10, 16, v9
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v9, 8, v9
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v7, 24, v2
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v5, 8, v2
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; S_GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v1
; S_GFX9-NEXT:    s_branch .LBB54_5
; S_GFX9-NEXT:  .LBB54_3:
; S_GFX9-NEXT:    ; implicit-def: $sgpr13
; S_GFX9-NEXT:    ; implicit-def: $sgpr14
; S_GFX9-NEXT:    ; implicit-def: $sgpr4
; S_GFX9-NEXT:    ; implicit-def: $sgpr11
; S_GFX9-NEXT:    ; implicit-def: $sgpr22
; S_GFX9-NEXT:    ; implicit-def: $sgpr10
; S_GFX9-NEXT:    ; implicit-def: $sgpr20
; S_GFX9-NEXT:    ; implicit-def: $sgpr21
; S_GFX9-NEXT:    ; implicit-def: $sgpr6
; S_GFX9-NEXT:    ; implicit-def: $sgpr15
; S_GFX9-NEXT:    ; implicit-def: $sgpr23
; S_GFX9-NEXT:    ; implicit-def: $sgpr12
; S_GFX9-NEXT:    s_branch .LBB54_2
; S_GFX9-NEXT:  .LBB54_4:
; S_GFX9-NEXT:    v_mov_b32_e32 v8, s18
; S_GFX9-NEXT:    v_mov_b32_e32 v16, s19
; S_GFX9-NEXT:    v_mov_b32_e32 v14, s23
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s16
; S_GFX9-NEXT:    v_mov_b32_e32 v17, s17
; S_GFX9-NEXT:    v_mov_b32_e32 v6, s22
; S_GFX9-NEXT:    v_mov_b32_e32 v10, s21
; S_GFX9-NEXT:    v_mov_b32_e32 v9, s20
; S_GFX9-NEXT:    v_mov_b32_e32 v15, s12
; S_GFX9-NEXT:    v_mov_b32_e32 v13, s15
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s14
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s13
; S_GFX9-NEXT:    v_mov_b32_e32 v7, s10
; S_GFX9-NEXT:    v_mov_b32_e32 v5, s11
; S_GFX9-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX9-NEXT:  .LBB54_5: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v4, v17
; S_GFX9-NEXT:    v_mov_b32_e32 v12, v16
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; S_GFX11-LABEL: bitcast_v8bf16_to_v16i8_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB54_3
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_lshr_b32 s11, s3, 24
; S_GFX11-NEXT:    s_lshr_b32 s18, s3, 16
; S_GFX11-NEXT:    s_lshr_b32 s14, s3, 8
; S_GFX11-NEXT:    s_lshr_b32 s16, s2, 16
; S_GFX11-NEXT:    s_lshr_b32 s15, s2, 8
; S_GFX11-NEXT:    s_lshr_b32 s9, s1, 24
; S_GFX11-NEXT:    s_lshr_b32 s17, s1, 16
; S_GFX11-NEXT:    s_lshr_b32 s10, s1, 8
; S_GFX11-NEXT:    s_lshr_b32 s13, s0, 16
; S_GFX11-NEXT:    s_lshr_b32 s12, s0, 8
; S_GFX11-NEXT:    s_lshr_b64 s[6:7], s[2:3], 24
; S_GFX11-NEXT:    s_lshr_b64 s[4:5], s[0:1], 24
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB54_4
; S_GFX11-NEXT:  .LBB54_2: ; %cmp.true
; S_GFX11-NEXT:    s_lshl_b32 s4, s1, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s1, 0, s1
; S_GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s4
; S_GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s1
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s4, 0, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s0, 16
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s4
; S_GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; S_GFX11-NEXT:    v_bfe_u32 v4, v1, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v6, 0x400000, v1
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v0
; S_GFX11-NEXT:    v_bfe_u32 v7, v3, 16, 1
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, v4, v1
; S_GFX11-NEXT:    v_add_f32_e64 v5, 0x40c00000, s0
; S_GFX11-NEXT:    v_or_b32_e32 v9, 0x400000, v3
; S_GFX11-NEXT:    s_lshl_b32 s0, s3, 16
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s1, 0, s3
; S_GFX11-NEXT:    v_add_nc_u32_e32 v4, 0x7fff, v4
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_dual_cndmask_b32 v0, v2, v8 :: v_dual_add_nc_u32 v7, v7, v3
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v5
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_3)
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v7
; S_GFX11-NEXT:    v_bfe_u32 v2, v5, 16, 1
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v17, 16, v0
; S_GFX11-NEXT:    v_cndmask_b32_e32 v1, v4, v6, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_add_f32_e64 v3, 0x40c00000, s1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v5
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v6, 16, v1
; S_GFX11-NEXT:    v_cndmask_b32_e32 v0, v7, v9, vcc_lo
; S_GFX11-NEXT:    v_add_f32_e64 v7, 0x40c00000, s0
; S_GFX11-NEXT:    s_lshl_b32 s0, s2, 16
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v5, v5
; S_GFX11-NEXT:    v_add_f32_e64 v9, 0x40c00000, s0
; S_GFX11-NEXT:    s_pack_lh_b32_b16 s0, 0, s2
; S_GFX11-NEXT:    v_bfe_u32 v10, v7, 16, 1
; S_GFX11-NEXT:    v_add_f32_e64 v11, 0x40c00000, s0
; S_GFX11-NEXT:    v_or_b32_e32 v13, 0x400000, v7
; S_GFX11-NEXT:    v_bfe_u32 v12, v9, 16, 1
; S_GFX11-NEXT:    v_or_b32_e32 v14, 0x400000, v9
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, v10, v7
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v4, 16, v0
; S_GFX11-NEXT:    v_add_nc_u32_e32 v0, 0x7fff, v2
; S_GFX11-NEXT:    v_bfe_u32 v2, v3, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, v12, v9
; S_GFX11-NEXT:    v_add_nc_u32_e32 v5, 0x7fff, v5
; S_GFX11-NEXT:    v_or_b32_e32 v12, 0x400000, v3
; S_GFX11-NEXT:    v_cndmask_b32_e32 v0, v0, v8, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v7, v7
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v3
; S_GFX11-NEXT:    v_bfe_u32 v8, v11, 16, 1
; S_GFX11-NEXT:    v_add_nc_u32_e32 v10, 0x7fff, v10
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; S_GFX11-NEXT:    v_cndmask_b32_e32 v5, v5, v13, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v9, v9
; S_GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; S_GFX11-NEXT:    v_add_nc_u32_e32 v8, v8, v11
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v16, 16, v5
; S_GFX11-NEXT:    v_cndmask_b32_e32 v9, v10, v14, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v3, v3
; S_GFX11-NEXT:    v_and_b32_e32 v1, 0xffff, v17
; S_GFX11-NEXT:    v_add_nc_u32_e32 v7, 0x7fff, v8
; S_GFX11-NEXT:    v_or_b32_e32 v8, 0x400000, v11
; S_GFX11-NEXT:    v_and_b32_e32 v5, 0xffff, v16
; S_GFX11-NEXT:    v_cndmask_b32_e32 v2, v2, v12, vcc_lo
; S_GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v11, v11
; S_GFX11-NEXT:    v_and_b32_e32 v11, 0xffff, v0
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_3)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v14, 16, v2
; S_GFX11-NEXT:    v_cndmask_b32_e32 v3, v7, v8, vcc_lo
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v8, 16, v9
; S_GFX11-NEXT:    v_lshl_or_b32 v2, v6, 16, v1
; S_GFX11-NEXT:    v_lshl_or_b32 v1, v4, 16, v11
; S_GFX11-NEXT:    v_lshl_or_b32 v10, v14, 16, v5
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v3, 16, v3
; S_GFX11-NEXT:    v_and_b32_e32 v7, 0xffff, v8
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v5, 8, v2
; S_GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(SKIP_1) | instid1(VALU_DEP_4)
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v15, 24, v10
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v13, 8, v10
; S_GFX11-NEXT:    v_lshl_or_b32 v9, v3, 16, v7
; S_GFX11-NEXT:    v_lshrrev_b64 v[3:4], 24, v[1:2]
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v7, 24, v2
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v1
; S_GFX11-NEXT:    v_lshrrev_b64 v[11:12], 24, v[9:10]
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v10, 16, v9
; S_GFX11-NEXT:    v_lshrrev_b32_e32 v9, 8, v9
; S_GFX11-NEXT:    s_branch .LBB54_5
; S_GFX11-NEXT:  .LBB54_3:
; S_GFX11-NEXT:    ; implicit-def: $sgpr12
; S_GFX11-NEXT:    ; implicit-def: $sgpr13
; S_GFX11-NEXT:    ; implicit-def: $sgpr4
; S_GFX11-NEXT:    ; implicit-def: $sgpr10
; S_GFX11-NEXT:    ; implicit-def: $sgpr17
; S_GFX11-NEXT:    ; implicit-def: $sgpr9
; S_GFX11-NEXT:    ; implicit-def: $sgpr15
; S_GFX11-NEXT:    ; implicit-def: $sgpr16
; S_GFX11-NEXT:    ; implicit-def: $sgpr6
; S_GFX11-NEXT:    ; implicit-def: $sgpr14
; S_GFX11-NEXT:    ; implicit-def: $sgpr18
; S_GFX11-NEXT:    ; implicit-def: $sgpr11
; S_GFX11-NEXT:    s_branch .LBB54_2
; S_GFX11-NEXT:  .LBB54_4:
; S_GFX11-NEXT:    v_dual_mov_b32 v8, s2 :: v_dual_mov_b32 v17, s1
; S_GFX11-NEXT:    v_dual_mov_b32 v16, s3 :: v_dual_mov_b32 v9, s15
; S_GFX11-NEXT:    v_dual_mov_b32 v14, s18 :: v_dual_mov_b32 v15, s11
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v13, s14
; S_GFX11-NEXT:    v_dual_mov_b32 v6, s17 :: v_dual_mov_b32 v1, s12
; S_GFX11-NEXT:    v_dual_mov_b32 v10, s16 :: v_dual_mov_b32 v7, s9
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s13 :: v_dual_mov_b32 v5, s10
; S_GFX11-NEXT:    v_mov_b32_e32 v11, s6
; S_GFX11-NEXT:    v_mov_b32_e32 v3, s4
; S_GFX11-NEXT:  .LBB54_5: ; %end
; S_GFX11-NEXT:    v_mov_b32_e32 v4, v17
; S_GFX11-NEXT:    v_mov_b32_e32 v12, v16
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <8 x bfloat> %a1 to <16 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <8 x bfloat> %a to <16 x i8>
  br label %end

end:
  %phi = phi <16 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i8> %phi
}

define inreg <8 x bfloat> @bitcast_v16i8_to_v8bf16_inreg(<16 x i8> inreg %a, i32 inreg %b) {
; S_SI-LABEL: bitcast_v16i8_to_v8bf16_inreg:
; S_SI:       ; %bb.0:
; S_SI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_SI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_SI-NEXT:    v_readfirstlane_b32 s9, v1
; S_SI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_SI-NEXT:    v_readfirstlane_b32 s11, v0
; S_SI-NEXT:    s_cbranch_scc0 .LBB55_4
; S_SI-NEXT:  ; %bb.1: ; %cmp.false
; S_SI-NEXT:    s_and_b32 s4, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s4, s4, 16
; S_SI-NEXT:    s_lshl_b32 s5, s17, 24
; S_SI-NEXT:    s_or_b32 s6, s5, s4
; S_SI-NEXT:    s_and_b32 s4, s18, 0xff
; S_SI-NEXT:    s_lshl_b32 s4, s4, 16
; S_SI-NEXT:    s_lshl_b32 s5, s19, 24
; S_SI-NEXT:    s_or_b32 s7, s5, s4
; S_SI-NEXT:    s_and_b32 s4, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s21, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_lshl_b32 s8, s4, 16
; S_SI-NEXT:    s_and_b32 s4, s22, 0xff
; S_SI-NEXT:    s_lshl_b32 s4, s4, 16
; S_SI-NEXT:    s_lshl_b32 s5, s23, 24
; S_SI-NEXT:    s_or_b32 s10, s5, s4
; S_SI-NEXT:    s_and_b32 s4, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s4, s4, 16
; S_SI-NEXT:    s_lshl_b32 s5, s25, 24
; S_SI-NEXT:    s_or_b32 s12, s5, s4
; S_SI-NEXT:    s_and_b32 s4, s26, 0xff
; S_SI-NEXT:    s_lshl_b32 s4, s4, 16
; S_SI-NEXT:    s_lshl_b32 s5, s27, 24
; S_SI-NEXT:    s_or_b32 s13, s5, s4
; S_SI-NEXT:    s_and_b32 s4, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s29, 8
; S_SI-NEXT:    s_or_b32 s4, s4, s5
; S_SI-NEXT:    s_lshl_b32 s14, s4, 16
; S_SI-NEXT:    s_and_b32 s4, s11, 0xff
; S_SI-NEXT:    s_lshl_b32 s4, s4, 16
; S_SI-NEXT:    s_lshl_b32 s5, s9, 24
; S_SI-NEXT:    s_or_b32 s15, s5, s4
; S_SI-NEXT:    s_cbranch_execnz .LBB55_3
; S_SI-NEXT:  .LBB55_2: ; %cmp.true
; S_SI-NEXT:    s_add_i32 s28, s28, 3
; S_SI-NEXT:    s_and_b32 s4, s28, 0xff
; S_SI-NEXT:    s_lshl_b32 s5, s29, 8
; S_SI-NEXT:    s_add_i32 s11, s11, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s6, s11, 0xff
; S_SI-NEXT:    s_addk_i32 s4, 0x300
; S_SI-NEXT:    s_lshl_b32 s5, s9, 24
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_SI-NEXT:    s_or_b32 s5, s5, s6
; S_SI-NEXT:    s_add_i32 s24, s24, 3
; S_SI-NEXT:    s_or_b32 s4, s5, s4
; S_SI-NEXT:    s_and_b32 s5, s24, 0xff
; S_SI-NEXT:    s_lshl_b32 s6, s25, 8
; S_SI-NEXT:    s_add_i32 s26, s26, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s7, s26, 0xff
; S_SI-NEXT:    s_addk_i32 s5, 0x300
; S_SI-NEXT:    s_lshl_b32 s6, s27, 24
; S_SI-NEXT:    s_lshl_b32 s7, s7, 16
; S_SI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_SI-NEXT:    s_or_b32 s6, s6, s7
; S_SI-NEXT:    s_add_i32 s20, s20, 3
; S_SI-NEXT:    s_or_b32 s5, s6, s5
; S_SI-NEXT:    s_and_b32 s6, s20, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s21, 8
; S_SI-NEXT:    s_add_i32 s22, s22, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s8, s22, 0xff
; S_SI-NEXT:    s_addk_i32 s6, 0x300
; S_SI-NEXT:    s_lshl_b32 s7, s23, 24
; S_SI-NEXT:    s_lshl_b32 s8, s8, 16
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s7, s8
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_add_i32 s16, s16, 3
; S_SI-NEXT:    s_add_i32 s8, s6, 0x3000000
; S_SI-NEXT:    s_and_b32 s6, s16, 0xff
; S_SI-NEXT:    s_lshl_b32 s7, s17, 8
; S_SI-NEXT:    s_add_i32 s18, s18, 3
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_and_b32 s9, s18, 0xff
; S_SI-NEXT:    s_addk_i32 s6, 0x300
; S_SI-NEXT:    s_lshl_b32 s7, s19, 24
; S_SI-NEXT:    s_lshl_b32 s9, s9, 16
; S_SI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_SI-NEXT:    s_or_b32 s7, s7, s9
; S_SI-NEXT:    s_or_b32 s6, s7, s6
; S_SI-NEXT:    s_add_i32 s4, s4, 0x3000000
; S_SI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_SI-NEXT:    s_add_i32 s6, s6, 0x3000000
; S_SI-NEXT:    s_and_b32 s7, s6, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s6, s6, 16
; S_SI-NEXT:    s_and_b32 s10, s8, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s8, s8, 16
; S_SI-NEXT:    s_and_b32 s13, s5, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s12, s5, 16
; S_SI-NEXT:    s_and_b32 s15, s4, 0xffff0000
; S_SI-NEXT:    s_lshl_b32 s14, s4, 16
; S_SI-NEXT:  .LBB55_3: ; %end
; S_SI-NEXT:    v_mov_b32_e32 v0, s6
; S_SI-NEXT:    v_mov_b32_e32 v1, s7
; S_SI-NEXT:    v_mov_b32_e32 v2, s8
; S_SI-NEXT:    v_mov_b32_e32 v3, s10
; S_SI-NEXT:    v_mov_b32_e32 v4, s12
; S_SI-NEXT:    v_mov_b32_e32 v5, s13
; S_SI-NEXT:    v_mov_b32_e32 v6, s14
; S_SI-NEXT:    v_mov_b32_e32 v7, s15
; S_SI-NEXT:    s_setpc_b64 s[30:31]
; S_SI-NEXT:  .LBB55_4:
; S_SI-NEXT:    ; implicit-def: $sgpr6
; S_SI-NEXT:    ; implicit-def: $sgpr7
; S_SI-NEXT:    ; implicit-def: $sgpr8
; S_SI-NEXT:    ; implicit-def: $sgpr10
; S_SI-NEXT:    ; implicit-def: $sgpr12
; S_SI-NEXT:    ; implicit-def: $sgpr13
; S_SI-NEXT:    ; implicit-def: $sgpr14
; S_SI-NEXT:    ; implicit-def: $sgpr15
; S_SI-NEXT:    s_branch .LBB55_2
;
; S_VI-LABEL: bitcast_v16i8_to_v8bf16_inreg:
; S_VI:       ; %bb.0:
; S_VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_VI-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_VI-NEXT:    v_mov_b32_e32 v5, v1
; S_VI-NEXT:    v_mov_b32_e32 v4, v0
; S_VI-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_VI-NEXT:    s_cbranch_scc0 .LBB55_4
; S_VI-NEXT:  ; %bb.1: ; %cmp.false
; S_VI-NEXT:    s_and_b32 s4, s16, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s17, 8
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s19, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    s_lshl_b32 s5, s5, 16
; S_VI-NEXT:    s_or_b32 s4, s4, s5
; S_VI-NEXT:    s_and_b32 s5, s20, 0xff
; S_VI-NEXT:    s_lshl_b32 s6, s21, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s5, s5, 0xffff
; S_VI-NEXT:    s_lshl_b32 s6, s6, 16
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s24, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s25, 8
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s27, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_lshl_b32 s7, s7, 16
; S_VI-NEXT:    s_or_b32 s6, s6, s7
; S_VI-NEXT:    s_and_b32 s7, s28, 0xff
; S_VI-NEXT:    s_lshl_b32 s8, s29, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 8, v5
; S_VI-NEXT:    s_and_b32 s7, s7, 0xffff
; S_VI-NEXT:    v_or_b32_sdwa v0, v4, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; S_VI-NEXT:    v_or_b32_e32 v3, s7, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s4
; S_VI-NEXT:    v_mov_b32_e32 v1, s5
; S_VI-NEXT:    v_mov_b32_e32 v2, s6
; S_VI-NEXT:    s_cbranch_execnz .LBB55_3
; S_VI-NEXT:  .LBB55_2: ; %cmp.true
; S_VI-NEXT:    s_add_i32 s16, s16, 3
; S_VI-NEXT:    s_add_i32 s18, s18, 3
; S_VI-NEXT:    s_lshl_b32 s10, s17, 8
; S_VI-NEXT:    s_and_b32 s11, s16, 0xff
; S_VI-NEXT:    s_or_b32 s10, s10, s11
; S_VI-NEXT:    s_and_b32 s11, s18, 0xff
; S_VI-NEXT:    s_lshl_b32 s9, s19, 24
; S_VI-NEXT:    s_addk_i32 s10, 0x300
; S_VI-NEXT:    s_lshl_b32 s11, s11, 16
; S_VI-NEXT:    s_add_i32 s20, s20, 3
; S_VI-NEXT:    s_and_b32 s10, s10, 0xffff
; S_VI-NEXT:    s_or_b32 s9, s9, s11
; S_VI-NEXT:    s_add_i32 s22, s22, 3
; S_VI-NEXT:    s_lshl_b32 s8, s21, 8
; S_VI-NEXT:    s_or_b32 s9, s9, s10
; S_VI-NEXT:    s_and_b32 s10, s20, 0xff
; S_VI-NEXT:    s_or_b32 s8, s8, s10
; S_VI-NEXT:    s_and_b32 s10, s22, 0xff
; S_VI-NEXT:    s_lshl_b32 s7, s23, 24
; S_VI-NEXT:    s_addk_i32 s8, 0x300
; S_VI-NEXT:    s_lshl_b32 s10, s10, 16
; S_VI-NEXT:    s_add_i32 s24, s24, 3
; S_VI-NEXT:    s_and_b32 s8, s8, 0xffff
; S_VI-NEXT:    s_or_b32 s7, s7, s10
; S_VI-NEXT:    s_add_i32 s26, s26, 3
; S_VI-NEXT:    s_lshl_b32 s6, s25, 8
; S_VI-NEXT:    s_or_b32 s7, s7, s8
; S_VI-NEXT:    s_and_b32 s8, s24, 0xff
; S_VI-NEXT:    s_or_b32 s6, s6, s8
; S_VI-NEXT:    s_and_b32 s8, s26, 0xff
; S_VI-NEXT:    s_lshl_b32 s5, s27, 24
; S_VI-NEXT:    s_addk_i32 s6, 0x300
; S_VI-NEXT:    s_lshl_b32 s8, s8, 16
; S_VI-NEXT:    s_add_i32 s28, s28, 3
; S_VI-NEXT:    s_and_b32 s6, s6, 0xffff
; S_VI-NEXT:    s_or_b32 s5, s5, s8
; S_VI-NEXT:    v_add_u32_e32 v1, vcc, 3, v4
; S_VI-NEXT:    s_lshl_b32 s4, s29, 8
; S_VI-NEXT:    s_or_b32 s5, s5, s6
; S_VI-NEXT:    s_and_b32 s6, s28, 0xff
; S_VI-NEXT:    s_or_b32 s4, s4, s6
; S_VI-NEXT:    v_and_b32_e32 v1, 0xff, v1
; S_VI-NEXT:    v_lshlrev_b32_e32 v0, 24, v5
; S_VI-NEXT:    s_addk_i32 s4, 0x300
; S_VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v1
; S_VI-NEXT:    s_and_b32 s4, s4, 0xffff
; S_VI-NEXT:    v_or_b32_e32 v0, v0, v1
; S_VI-NEXT:    s_add_i32 s9, s9, 0x3000000
; S_VI-NEXT:    s_add_i32 s7, s7, 0x3000000
; S_VI-NEXT:    s_add_i32 s5, s5, 0x3000000
; S_VI-NEXT:    v_or_b32_e32 v0, s4, v0
; S_VI-NEXT:    v_add_u32_e32 v3, vcc, 0x3000000, v0
; S_VI-NEXT:    v_mov_b32_e32 v0, s9
; S_VI-NEXT:    v_mov_b32_e32 v1, s7
; S_VI-NEXT:    v_mov_b32_e32 v2, s5
; S_VI-NEXT:  .LBB55_3: ; %end
; S_VI-NEXT:    s_setpc_b64 s[30:31]
; S_VI-NEXT:  .LBB55_4:
; S_VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; S_VI-NEXT:    s_branch .LBB55_2
;
; S_GFX9-LABEL: bitcast_v16i8_to_v8bf16_inreg:
; S_GFX9:       ; %bb.0:
; S_GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX9-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v2
; S_GFX9-NEXT:    v_readfirstlane_b32 s10, v1
; S_GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; S_GFX9-NEXT:    v_readfirstlane_b32 s11, v0
; S_GFX9-NEXT:    s_cbranch_scc0 .LBB55_4
; S_GFX9-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s8, s9
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:    s_cbranch_execnz .LBB55_3
; S_GFX9-NEXT:  .LBB55_2: ; %cmp.true
; S_GFX9-NEXT:    s_add_i32 s16, s16, 3
; S_GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; S_GFX9-NEXT:    s_add_i32 s18, s18, 3
; S_GFX9-NEXT:    s_or_b32 s4, s5, s4
; S_GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_addk_i32 s4, 0x300
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX9-NEXT:    s_add_i32 s20, s20, 3
; S_GFX9-NEXT:    s_or_b32 s4, s4, s5
; S_GFX9-NEXT:    s_and_b32 s5, s20, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s6, s21, 8
; S_GFX9-NEXT:    s_add_i32 s22, s22, 3
; S_GFX9-NEXT:    s_or_b32 s5, s6, s5
; S_GFX9-NEXT:    s_and_b32 s6, s22, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s23, 8
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_addk_i32 s5, 0x300
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_and_b32 s5, s5, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s6, s6, 16
; S_GFX9-NEXT:    s_add_i32 s24, s24, 3
; S_GFX9-NEXT:    s_or_b32 s5, s5, s6
; S_GFX9-NEXT:    s_and_b32 s6, s24, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s7, s25, 8
; S_GFX9-NEXT:    s_add_i32 s26, s26, 3
; S_GFX9-NEXT:    s_or_b32 s6, s7, s6
; S_GFX9-NEXT:    s_and_b32 s7, s26, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s27, 8
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_addk_i32 s6, 0x300
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX9-NEXT:    s_add_i32 s28, s28, 3
; S_GFX9-NEXT:    s_or_b32 s6, s6, s7
; S_GFX9-NEXT:    s_and_b32 s7, s28, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s8, s29, 8
; S_GFX9-NEXT:    s_add_i32 s11, s11, 3
; S_GFX9-NEXT:    s_or_b32 s7, s8, s7
; S_GFX9-NEXT:    s_and_b32 s8, s11, 0xff
; S_GFX9-NEXT:    s_lshl_b32 s9, s10, 8
; S_GFX9-NEXT:    s_or_b32 s8, s9, s8
; S_GFX9-NEXT:    s_addk_i32 s7, 0x300
; S_GFX9-NEXT:    s_addk_i32 s8, 0x300
; S_GFX9-NEXT:    s_and_b32 s7, s7, 0xffff
; S_GFX9-NEXT:    s_lshl_b32 s8, s8, 16
; S_GFX9-NEXT:    s_or_b32 s7, s7, s8
; S_GFX9-NEXT:  .LBB55_3: ; %end
; S_GFX9-NEXT:    v_mov_b32_e32 v0, s4
; S_GFX9-NEXT:    v_mov_b32_e32 v1, s5
; S_GFX9-NEXT:    v_mov_b32_e32 v2, s6
; S_GFX9-NEXT:    v_mov_b32_e32 v3, s7
; S_GFX9-NEXT:    s_setpc_b64 s[30:31]
; S_GFX9-NEXT:  .LBB55_4:
; S_GFX9-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX9-NEXT:    s_branch .LBB55_2
;
; S_GFX11-LABEL: bitcast_v16i8_to_v8bf16_inreg:
; S_GFX11:       ; %bb.0:
; S_GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; S_GFX11-NEXT:    s_cmp_lg_u32 s28, 0
; S_GFX11-NEXT:    s_mov_b32 s8, 0
; S_GFX11-NEXT:    s_cbranch_scc0 .LBB55_4
; S_GFX11-NEXT:  ; %bb.1: ; %cmp.false
; S_GFX11-NEXT:    s_and_b32 s4, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s5, s1, 8
; S_GFX11-NEXT:    s_and_b32 s6, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s3, 8
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s17, 8
; S_GFX11-NEXT:    s_and_b32 s9, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s19, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s4, s4, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s5, s5, 16
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_or_b32 s4, s4, s5
; S_GFX11-NEXT:    s_or_b32 s5, s6, s7
; S_GFX11-NEXT:    s_and_b32 s6, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s21, 8
; S_GFX11-NEXT:    s_and_b32 s9, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s23, 8
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_b32 s9, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s10, s25, 8
; S_GFX11-NEXT:    s_and_b32 s11, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s12, s27, 8
; S_GFX11-NEXT:    s_or_b32 s9, s9, s10
; S_GFX11-NEXT:    s_or_b32 s10, s11, s12
; S_GFX11-NEXT:    s_and_b32 s6, s6, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s7, s7, 16
; S_GFX11-NEXT:    s_and_b32 s9, s9, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s10, s10, 16
; S_GFX11-NEXT:    s_or_b32 s6, s6, s7
; S_GFX11-NEXT:    s_or_b32 s7, s9, s10
; S_GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s8
; S_GFX11-NEXT:    s_cbranch_vccnz .LBB55_3
; S_GFX11-NEXT:  .LBB55_2: ; %cmp.true
; S_GFX11-NEXT:    s_add_i32 s0, s0, 3
; S_GFX11-NEXT:    s_add_i32 s2, s2, 3
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s16, s16, 3
; S_GFX11-NEXT:    s_add_i32 s18, s18, 3
; S_GFX11-NEXT:    s_or_b32 s4, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s16, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s17, 8
; S_GFX11-NEXT:    s_and_b32 s2, s18, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s19, 8
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_or_b32 s1, s3, s2
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_add_i32 s20, s20, 3
; S_GFX11-NEXT:    s_or_b32 s5, s0, s1
; S_GFX11-NEXT:    s_and_b32 s0, s20, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s1, s21, 8
; S_GFX11-NEXT:    s_add_i32 s22, s22, 3
; S_GFX11-NEXT:    s_or_b32 s0, s1, s0
; S_GFX11-NEXT:    s_and_b32 s1, s22, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s2, s23, 8
; S_GFX11-NEXT:    s_add_i32 s24, s24, 3
; S_GFX11-NEXT:    s_add_i32 s26, s26, 3
; S_GFX11-NEXT:    s_or_b32 s1, s2, s1
; S_GFX11-NEXT:    s_and_b32 s2, s24, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s3, s25, 8
; S_GFX11-NEXT:    s_and_b32 s6, s26, 0xff
; S_GFX11-NEXT:    s_lshl_b32 s7, s27, 8
; S_GFX11-NEXT:    s_or_b32 s2, s3, s2
; S_GFX11-NEXT:    s_or_b32 s3, s7, s6
; S_GFX11-NEXT:    s_addk_i32 s0, 0x300
; S_GFX11-NEXT:    s_addk_i32 s1, 0x300
; S_GFX11-NEXT:    s_addk_i32 s2, 0x300
; S_GFX11-NEXT:    s_addk_i32 s3, 0x300
; S_GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; S_GFX11-NEXT:    s_and_b32 s2, s2, 0xffff
; S_GFX11-NEXT:    s_lshl_b32 s3, s3, 16
; S_GFX11-NEXT:    s_or_b32 s6, s0, s1
; S_GFX11-NEXT:    s_or_b32 s7, s2, s3
; S_GFX11-NEXT:  .LBB55_3: ; %end
; S_GFX11-NEXT:    v_dual_mov_b32 v0, s4 :: v_dual_mov_b32 v1, s5
; S_GFX11-NEXT:    v_dual_mov_b32 v2, s6 :: v_dual_mov_b32 v3, s7
; S_GFX11-NEXT:    s_setpc_b64 s[30:31]
; S_GFX11-NEXT:  .LBB55_4:
; S_GFX11-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; S_GFX11-NEXT:    s_branch .LBB55_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i8> %a, splat (i8 3)
  %a2 = bitcast <16 x i8> %a1 to <8 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i8> %a to <8 x bfloat>
  br label %end

end:
  %phi = phi <8 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x bfloat> %phi
}
