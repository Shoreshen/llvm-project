; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=GCN %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefixes=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefixes=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 < %s | FileCheck -check-prefixes=GFX11 %s

define inreg float @bitcast_i32_to_f32_inreg(i32 inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_i32_to_f32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB0_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_cbranch_execnz .LBB0_3
; GCN-NEXT:  .LBB0_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:  .LBB0_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB0_4:
; GCN-NEXT:    s_branch .LBB0_2
;
; VI-LABEL: bitcast_i32_to_f32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB0_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB0_3
; VI-NEXT:  .LBB0_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB0_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB0_4:
; VI-NEXT:    s_branch .LBB0_2
;
; GFX9-LABEL: bitcast_i32_to_f32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB0_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB0_3
; GFX9-NEXT:  .LBB0_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB0_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB0_4:
; GFX9-NEXT:    s_branch .LBB0_2
;
; GFX11-LABEL: bitcast_i32_to_f32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB0_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB0_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB0_3:
; GFX11-NEXT:  .LBB0_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg i32 @bitcast_f32_to_i32_inreg(float inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_f32_to_i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB1_3
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_cbranch_execnz .LBB1_4
; GCN-NEXT:  .LBB1_2: ; %cmp.true
; GCN-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB1_3:
; GCN-NEXT:    s_branch .LBB1_2
; GCN-NEXT:  .LBB1_4:
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    s_setpc_b64 s[30:31]
;
; VI-LABEL: bitcast_f32_to_i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB1_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB1_4
; VI-NEXT:  .LBB1_2: ; %cmp.true
; VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB1_3:
; VI-NEXT:    s_branch .LBB1_2
; VI-NEXT:  .LBB1_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_f32_to_i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB1_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB1_4
; GFX9-NEXT:  .LBB1_2: ; %cmp.true
; GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB1_3:
; GFX9-NEXT:    s_branch .LBB1_2
; GFX9-NEXT:  .LBB1_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_f32_to_i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB1_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB1_4
; GFX11-NEXT:  .LBB1_2: ; %cmp.true
; GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB1_3:
; GFX11-NEXT:    s_branch .LBB1_2
; GFX11-NEXT:  .LBB1_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast float %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg <2 x i16> @bitcast_i32_to_v2i16_inreg(i32 inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_i32_to_v2i16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB2_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s6, s16, 16
; GCN-NEXT:    s_cbranch_execnz .LBB2_3
; GCN-NEXT:  .LBB2_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_lshr_b32 s6, s16, 16
; GCN-NEXT:  .LBB2_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    v_mov_b32_e32 v1, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB2_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB2_2
;
; VI-LABEL: bitcast_i32_to_v2i16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB2_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB2_3
; VI-NEXT:  .LBB2_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB2_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB2_4:
; VI-NEXT:    s_branch .LBB2_2
;
; GFX9-LABEL: bitcast_i32_to_v2i16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB2_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB2_3
; GFX9-NEXT:  .LBB2_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB2_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB2_4:
; GFX9-NEXT:    s_branch .LBB2_2
;
; GFX11-LABEL: bitcast_i32_to_v2i16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB2_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB2_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB2_3:
; GFX11-NEXT:  .LBB2_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg i32 @bitcast_v2i16_to_i32_inreg(<2 x i16> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2i16_to_i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB3_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_cbranch_execnz .LBB3_3
; GCN-NEXT:  .LBB3_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_add_i32 s6, s4, 0x30000
; GCN-NEXT:  .LBB3_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB3_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB3_2
;
; VI-LABEL: bitcast_v2i16_to_i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB3_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB3_3
; VI-NEXT:  .LBB3_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s5, s16, 3
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s16, s4, 0x30000
; VI-NEXT:  .LBB3_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB3_4:
; VI-NEXT:    s_branch .LBB3_2
;
; GFX9-LABEL: bitcast_v2i16_to_i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB3_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB3_4
; GFX9-NEXT:  .LBB3_2: ; %cmp.true
; GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB3_3:
; GFX9-NEXT:    s_branch .LBB3_2
; GFX9-NEXT:  .LBB3_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2i16_to_i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB3_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB3_4
; GFX11-NEXT:  .LBB3_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB3_3:
; GFX11-NEXT:    s_branch .LBB3_2
; GFX11-NEXT:  .LBB3_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg <2 x half> @bitcast_i32_to_v2f16_inreg(i32 inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_i32_to_v2f16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB4_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s4, s16, 16
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s4
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s16
; GCN-NEXT:    s_cbranch_execnz .LBB4_3
; GCN-NEXT:  .LBB4_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_lshr_b32 s4, s16, 16
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s16
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s4
; GCN-NEXT:  .LBB4_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB4_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB4_2
;
; VI-LABEL: bitcast_i32_to_v2f16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB4_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB4_3
; VI-NEXT:  .LBB4_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB4_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB4_4:
; VI-NEXT:    s_branch .LBB4_2
;
; GFX9-LABEL: bitcast_i32_to_v2f16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB4_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB4_3
; GFX9-NEXT:  .LBB4_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB4_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB4_4:
; GFX9-NEXT:    s_branch .LBB4_2
;
; GFX11-LABEL: bitcast_i32_to_v2f16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB4_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB4_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB4_3:
; GFX11-NEXT:  .LBB4_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg i32 @bitcast_v2f16_to_i32_inreg(<2 x half> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2f16_to_i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_cvt_f16_f32_e32 v2, s17
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, s16
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB5_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v2
; GCN-NEXT:    v_or_b32_e32 v0, v1, v0
; GCN-NEXT:    s_cbranch_execnz .LBB5_3
; GCN-NEXT:  .LBB5_2: ; %cmp.true
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v2
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; GCN-NEXT:    v_cvt_f16_f32_e32 v0, v0
; GCN-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, v1
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; GCN-NEXT:    v_or_b32_e32 v0, v1, v0
; GCN-NEXT:  .LBB5_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB5_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    s_branch .LBB5_2
;
; VI-LABEL: bitcast_v2f16_to_i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB5_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB5_4
; VI-NEXT:  .LBB5_2: ; %cmp.true
; VI-NEXT:    s_lshr_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x200
; VI-NEXT:    v_mov_b32_e32 v1, s4
; VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; VI-NEXT:    v_add_f16_e32 v0, s16, v0
; VI-NEXT:    v_or_b32_e32 v0, v0, v1
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB5_3:
; VI-NEXT:    s_branch .LBB5_2
; VI-NEXT:  .LBB5_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2f16_to_i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB5_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB5_4
; GFX9-NEXT:  .LBB5_2: ; %cmp.true
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB5_3:
; GFX9-NEXT:    s_branch .LBB5_2
; GFX9-NEXT:  .LBB5_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2f16_to_i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB5_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB5_4
; GFX11-NEXT:  .LBB5_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB5_3:
; GFX11-NEXT:    s_branch .LBB5_2
; GFX11-NEXT:  .LBB5_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg <2 x bfloat> @bitcast_i32_to_v2bf16_inreg(i32 inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_i32_to_v2bf16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB6_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s6, s16, 0xffff0000
; GCN-NEXT:    s_lshl_b32 s7, s16, 16
; GCN-NEXT:    s_cbranch_execnz .LBB6_3
; GCN-NEXT:  .LBB6_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s6, s16, 0xffff0000
; GCN-NEXT:    s_lshl_b32 s7, s16, 16
; GCN-NEXT:  .LBB6_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s7
; GCN-NEXT:    v_mov_b32_e32 v1, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB6_4:
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB6_2
;
; VI-LABEL: bitcast_i32_to_v2bf16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB6_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB6_3
; VI-NEXT:  .LBB6_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB6_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB6_4:
; VI-NEXT:    s_branch .LBB6_2
;
; GFX9-LABEL: bitcast_i32_to_v2bf16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB6_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB6_3
; GFX9-NEXT:  .LBB6_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB6_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB6_4:
; GFX9-NEXT:    s_branch .LBB6_2
;
; GFX11-LABEL: bitcast_i32_to_v2bf16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB6_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB6_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB6_3:
; GFX11-NEXT:  .LBB6_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg i32 @bitcast_v2bf16_to_i32_inreg(<2 x bfloat> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2bf16_to_i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    v_mul_f32_e64 v1, 1.0, s17
; GCN-NEXT:    v_mul_f32_e64 v2, 1.0, s16
; GCN-NEXT:    s_cbranch_scc0 .LBB7_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshrrev_b32_e32 v0, 16, v1
; GCN-NEXT:    v_alignbit_b32 v0, v0, v2, 16
; GCN-NEXT:    s_cbranch_execnz .LBB7_3
; GCN-NEXT:  .LBB7_2: ; %cmp.true
; GCN-NEXT:    v_and_b32_e32 v1, 0xffff0000, v1
; GCN-NEXT:    v_and_b32_e32 v0, 0xffff0000, v2
; GCN-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GCN-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; GCN-NEXT:  .LBB7_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB7_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    s_branch .LBB7_2
;
; VI-LABEL: bitcast_v2bf16_to_i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB7_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB7_4
; VI-NEXT:  .LBB7_2: ; %cmp.true
; VI-NEXT:    s_lshl_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; VI-NEXT:    v_add_f32_e32 v1, s4, v0
; VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; VI-NEXT:    v_add_f32_e32 v0, s4, v0
; VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; VI-NEXT:    v_bfe_u32 v2, v0, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v0
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; VI-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; VI-NEXT:    v_alignbit_b32 v0, v0, v1, 16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB7_3:
; VI-NEXT:    s_branch .LBB7_2
; VI-NEXT:  .LBB7_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2bf16_to_i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB7_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB7_4
; GFX9-NEXT:  .LBB7_2: ; %cmp.true
; GFX9-NEXT:    s_and_b32 s4, s16, 0xffff0000
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; GFX9-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v0
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; GFX9-NEXT:    v_mov_b32_e32 v2, 0xffff
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX9-NEXT:    v_and_b32_sdwa v0, v2, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; GFX9-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB7_3:
; GFX9-NEXT:    s_branch .LBB7_2
; GFX9-NEXT:  .LBB7_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2bf16_to_i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB7_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB7_4
; GFX11-NEXT:  .LBB7_2: ; %cmp.true
; GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff0000
; GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s1
; GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX11-NEXT:    v_bfe_u32 v3, v1, 16, 1
; GFX11-NEXT:    v_or_b32_e32 v4, 0x400000, v0
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; GFX11-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v1
; GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc_lo
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX11-NEXT:    v_dual_cndmask_b32 v1, v3, v5 :: v_dual_and_b32 v0, 0xffff, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX11-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB7_3:
; GFX11-NEXT:    s_branch .LBB7_2
; GFX11-NEXT:  .LBB7_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg <1 x i32> @bitcast_i32_to_v1i32_inreg(i32 inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_i32_to_v1i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB8_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_cbranch_execnz .LBB8_3
; GCN-NEXT:  .LBB8_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:  .LBB8_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB8_4:
; GCN-NEXT:    s_branch .LBB8_2
;
; VI-LABEL: bitcast_i32_to_v1i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB8_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB8_3
; VI-NEXT:  .LBB8_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB8_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB8_4:
; VI-NEXT:    s_branch .LBB8_2
;
; GFX9-LABEL: bitcast_i32_to_v1i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB8_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB8_3
; GFX9-NEXT:  .LBB8_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB8_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB8_4:
; GFX9-NEXT:    s_branch .LBB8_2
;
; GFX11-LABEL: bitcast_i32_to_v1i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB8_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB8_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB8_3:
; GFX11-NEXT:  .LBB8_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg i32 @bitcast_v1i32_to_i32_inreg(<1 x i32> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v1i32_to_i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB9_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_cbranch_execnz .LBB9_3
; GCN-NEXT:  .LBB9_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:  .LBB9_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB9_4:
; GCN-NEXT:    s_branch .LBB9_2
;
; VI-LABEL: bitcast_v1i32_to_i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB9_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB9_3
; VI-NEXT:  .LBB9_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB9_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB9_4:
; VI-NEXT:    s_branch .LBB9_2
;
; GFX9-LABEL: bitcast_v1i32_to_i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB9_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB9_3
; GFX9-NEXT:  .LBB9_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB9_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB9_4:
; GFX9-NEXT:    s_branch .LBB9_2
;
; GFX11-LABEL: bitcast_v1i32_to_i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB9_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB9_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB9_3:
; GFX11-NEXT:  .LBB9_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg <4 x i8> @bitcast_i32_to_v4i8_inreg(i32 inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_i32_to_v4i8_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB10_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s6, s16, 24
; GCN-NEXT:    s_lshr_b32 s7, s16, 16
; GCN-NEXT:    s_lshr_b32 s8, s16, 8
; GCN-NEXT:    s_cbranch_execnz .LBB10_3
; GCN-NEXT:  .LBB10_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_lshr_b32 s7, s16, 16
; GCN-NEXT:    s_lshr_b32 s6, s16, 24
; GCN-NEXT:    s_lshr_b32 s8, s16, 8
; GCN-NEXT:  .LBB10_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    v_mov_b32_e32 v1, s8
; GCN-NEXT:    v_mov_b32_e32 v2, s7
; GCN-NEXT:    v_mov_b32_e32 v3, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB10_4:
; GCN-NEXT:    ; implicit-def: $sgpr8
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB10_2
;
; VI-LABEL: bitcast_i32_to_v4i8_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB10_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_lshr_b32 s6, s16, 24
; VI-NEXT:    s_lshr_b32 s7, s16, 16
; VI-NEXT:    s_lshr_b32 s8, s16, 8
; VI-NEXT:    s_cbranch_execnz .LBB10_3
; VI-NEXT:  .LBB10_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_lshr_b32 s7, s16, 16
; VI-NEXT:    s_lshr_b32 s6, s16, 24
; VI-NEXT:    s_lshr_b32 s8, s16, 8
; VI-NEXT:  .LBB10_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    v_mov_b32_e32 v1, s8
; VI-NEXT:    v_mov_b32_e32 v2, s7
; VI-NEXT:    v_mov_b32_e32 v3, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB10_4:
; VI-NEXT:    ; implicit-def: $sgpr8
; VI-NEXT:    ; implicit-def: $sgpr7
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB10_2
;
; GFX9-LABEL: bitcast_i32_to_v4i8_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB10_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_lshr_b32 s6, s16, 24
; GFX9-NEXT:    s_lshr_b32 s7, s16, 16
; GFX9-NEXT:    s_lshr_b32 s8, s16, 8
; GFX9-NEXT:    s_cbranch_execnz .LBB10_3
; GFX9-NEXT:  .LBB10_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_lshr_b32 s7, s16, 16
; GFX9-NEXT:    s_lshr_b32 s6, s16, 24
; GFX9-NEXT:    s_lshr_b32 s8, s16, 8
; GFX9-NEXT:  .LBB10_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    v_mov_b32_e32 v1, s8
; GFX9-NEXT:    v_mov_b32_e32 v2, s7
; GFX9-NEXT:    v_mov_b32_e32 v3, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB10_4:
; GFX9-NEXT:    ; implicit-def: $sgpr8
; GFX9-NEXT:    ; implicit-def: $sgpr7
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB10_2
;
; GFX11-LABEL: bitcast_i32_to_v4i8_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB10_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_lshr_b32 s1, s0, 24
; GFX11-NEXT:    s_lshr_b32 s2, s0, 16
; GFX11-NEXT:    s_lshr_b32 s3, s0, 8
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB10_3
; GFX11-NEXT:  .LBB10_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_lshr_b32 s2, s0, 16
; GFX11-NEXT:    s_lshr_b32 s1, s0, 24
; GFX11-NEXT:    s_lshr_b32 s3, s0, 8
; GFX11-NEXT:  .LBB10_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s3
; GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s1
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB10_4:
; GFX11-NEXT:    ; implicit-def: $sgpr3
; GFX11-NEXT:    ; implicit-def: $sgpr2
; GFX11-NEXT:    ; implicit-def: $sgpr1
; GFX11-NEXT:    s_branch .LBB10_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg i32 @bitcast_v4i8_to_i32_inreg(<4 x i8> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v4i8_to_i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s20, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB11_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_or_b32 s4, s4, s5
; GCN-NEXT:    s_and_b32 s5, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s5, 16
; GCN-NEXT:    s_lshl_b32 s6, s19, 24
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_or_b32 s5, s6, s5
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_cbranch_execnz .LBB11_3
; GCN-NEXT:  .LBB11_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_add_i32 s18, s18, 3
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_and_b32 s6, s18, 0xff
; GCN-NEXT:    s_addk_i32 s4, 0x300
; GCN-NEXT:    s_lshl_b32 s5, s19, 24
; GCN-NEXT:    s_lshl_b32 s6, s6, 16
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_or_b32 s5, s5, s6
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_add_i32 s6, s4, 0x3000000
; GCN-NEXT:  .LBB11_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB11_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB11_2
;
; VI-LABEL: bitcast_v4i8_to_i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s20, 0
; VI-NEXT:    s_cbranch_scc0 .LBB11_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_and_b32 s4, s16, 0xff
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_and_b32 s5, s18, 0xff
; VI-NEXT:    s_lshl_b32 s6, s19, 8
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s4, s4, 0xffff
; VI-NEXT:    s_lshl_b32 s5, s5, 16
; VI-NEXT:    s_or_b32 s6, s4, s5
; VI-NEXT:    s_cbranch_execnz .LBB11_3
; VI-NEXT:  .LBB11_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_add_i32 s18, s18, 3
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_and_b32 s6, s16, 0xff
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s6, s18, 0xff
; VI-NEXT:    s_lshl_b32 s4, s19, 24
; VI-NEXT:    s_addk_i32 s5, 0x300
; VI-NEXT:    s_lshl_b32 s6, s6, 16
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s6
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s6, s4, 0x3000000
; VI-NEXT:  .LBB11_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB11_4:
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB11_2
;
; GFX9-LABEL: bitcast_v4i8_to_i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB11_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_or_b32 s4, s4, s5
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s5, s6
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:    s_cbranch_execnz .LBB11_3
; GFX9-NEXT:  .LBB11_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_add_i32 s18, s18, 3
; GFX9-NEXT:    s_or_b32 s4, s5, s4
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s6, s5
; GFX9-NEXT:    s_addk_i32 s4, 0x300
; GFX9-NEXT:    s_addk_i32 s5, 0x300
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:  .LBB11_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB11_4:
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB11_2
;
; GFX11-LABEL: bitcast_v4i8_to_i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB11_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_and_b32 s5, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s6, s1, 8
; GFX11-NEXT:    s_and_b32 s7, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s8, s3, 8
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_or_b32 s6, s7, s8
; GFX11-NEXT:    s_and_b32 s5, s5, 0xffff
; GFX11-NEXT:    s_lshl_b32 s6, s6, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB11_3
; GFX11-NEXT:  .LBB11_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_add_i32 s2, s2, 3
; GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; GFX11-NEXT:    s_or_b32 s0, s1, s0
; GFX11-NEXT:    s_or_b32 s1, s3, s2
; GFX11-NEXT:    s_addk_i32 s0, 0x300
; GFX11-NEXT:    s_addk_i32 s1, 0x300
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s0, s1
; GFX11-NEXT:  .LBB11_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB11_4:
; GFX11-NEXT:    ; implicit-def: $sgpr5
; GFX11-NEXT:    s_branch .LBB11_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg <2 x i16> @bitcast_f32_to_v2i16_inreg(float inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_f32_to_v2i16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB12_3
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s6, s16, 16
; GCN-NEXT:    s_cbranch_execnz .LBB12_4
; GCN-NEXT:  .LBB12_2: ; %cmp.true
; GCN-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v0
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB12_3:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB12_2
; GCN-NEXT:  .LBB12_4:
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    v_mov_b32_e32 v1, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
;
; VI-LABEL: bitcast_f32_to_v2i16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB12_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB12_4
; VI-NEXT:  .LBB12_2: ; %cmp.true
; VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB12_3:
; VI-NEXT:    s_branch .LBB12_2
; VI-NEXT:  .LBB12_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_f32_to_v2i16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB12_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB12_4
; GFX9-NEXT:  .LBB12_2: ; %cmp.true
; GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB12_3:
; GFX9-NEXT:    s_branch .LBB12_2
; GFX9-NEXT:  .LBB12_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_f32_to_v2i16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB12_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB12_4
; GFX11-NEXT:  .LBB12_2: ; %cmp.true
; GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB12_3:
; GFX11-NEXT:    s_branch .LBB12_2
; GFX11-NEXT:  .LBB12_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg float @bitcast_v2i16_to_f32_inreg(<2 x i16> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2i16_to_f32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB13_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_cbranch_execnz .LBB13_3
; GCN-NEXT:  .LBB13_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_add_i32 s6, s4, 0x30000
; GCN-NEXT:  .LBB13_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB13_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB13_2
;
; VI-LABEL: bitcast_v2i16_to_f32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB13_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB13_3
; VI-NEXT:  .LBB13_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s5, s16, 3
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s16, s4, 0x30000
; VI-NEXT:  .LBB13_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB13_4:
; VI-NEXT:    s_branch .LBB13_2
;
; GFX9-LABEL: bitcast_v2i16_to_f32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB13_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB13_4
; GFX9-NEXT:  .LBB13_2: ; %cmp.true
; GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB13_3:
; GFX9-NEXT:    s_branch .LBB13_2
; GFX9-NEXT:  .LBB13_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2i16_to_f32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB13_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB13_4
; GFX11-NEXT:  .LBB13_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB13_3:
; GFX11-NEXT:    s_branch .LBB13_2
; GFX11-NEXT:  .LBB13_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg <2 x half> @bitcast_f32_to_v2f16_inreg(float inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_f32_to_v2f16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB14_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s4, s16, 16
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s4
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s16
; GCN-NEXT:    s_cbranch_execnz .LBB14_3
; GCN-NEXT:  .LBB14_2: ; %cmp.true
; GCN-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v0
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v0
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v1
; GCN-NEXT:  .LBB14_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB14_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB14_2
;
; VI-LABEL: bitcast_f32_to_v2f16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB14_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB14_4
; VI-NEXT:  .LBB14_2: ; %cmp.true
; VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB14_3:
; VI-NEXT:    s_branch .LBB14_2
; VI-NEXT:  .LBB14_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_f32_to_v2f16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB14_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB14_4
; GFX9-NEXT:  .LBB14_2: ; %cmp.true
; GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB14_3:
; GFX9-NEXT:    s_branch .LBB14_2
; GFX9-NEXT:  .LBB14_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_f32_to_v2f16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB14_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB14_4
; GFX11-NEXT:  .LBB14_2: ; %cmp.true
; GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB14_3:
; GFX11-NEXT:    s_branch .LBB14_2
; GFX11-NEXT:  .LBB14_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg float @bitcast_v2f16_to_f32_inreg(<2 x half> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2f16_to_f32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_cvt_f16_f32_e32 v2, s17
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, s16
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB15_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v2
; GCN-NEXT:    v_or_b32_e32 v0, v1, v0
; GCN-NEXT:    s_cbranch_execnz .LBB15_3
; GCN-NEXT:  .LBB15_2: ; %cmp.true
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v2
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; GCN-NEXT:    v_cvt_f16_f32_e32 v0, v0
; GCN-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, v1
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; GCN-NEXT:    v_or_b32_e32 v0, v1, v0
; GCN-NEXT:  .LBB15_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB15_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    s_branch .LBB15_2
;
; VI-LABEL: bitcast_v2f16_to_f32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB15_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB15_4
; VI-NEXT:  .LBB15_2: ; %cmp.true
; VI-NEXT:    s_lshr_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x200
; VI-NEXT:    v_mov_b32_e32 v1, s4
; VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; VI-NEXT:    v_add_f16_e32 v0, s16, v0
; VI-NEXT:    v_or_b32_e32 v0, v0, v1
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB15_3:
; VI-NEXT:    s_branch .LBB15_2
; VI-NEXT:  .LBB15_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2f16_to_f32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB15_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB15_4
; GFX9-NEXT:  .LBB15_2: ; %cmp.true
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB15_3:
; GFX9-NEXT:    s_branch .LBB15_2
; GFX9-NEXT:  .LBB15_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2f16_to_f32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB15_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB15_4
; GFX11-NEXT:  .LBB15_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB15_3:
; GFX11-NEXT:    s_branch .LBB15_2
; GFX11-NEXT:  .LBB15_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg <2 x bfloat> @bitcast_f32_to_v2bf16_inreg(float inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_f32_to_v2bf16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB16_3
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s6, s16, 0xffff0000
; GCN-NEXT:    s_lshl_b32 s7, s16, 16
; GCN-NEXT:    s_cbranch_execnz .LBB16_4
; GCN-NEXT:  .LBB16_2: ; %cmp.true
; GCN-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GCN-NEXT:    v_and_b32_e32 v1, 0xffff0000, v0
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB16_3:
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB16_2
; GCN-NEXT:  .LBB16_4:
; GCN-NEXT:    v_mov_b32_e32 v0, s7
; GCN-NEXT:    v_mov_b32_e32 v1, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
;
; VI-LABEL: bitcast_f32_to_v2bf16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB16_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB16_4
; VI-NEXT:  .LBB16_2: ; %cmp.true
; VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB16_3:
; VI-NEXT:    s_branch .LBB16_2
; VI-NEXT:  .LBB16_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_f32_to_v2bf16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB16_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB16_4
; GFX9-NEXT:  .LBB16_2: ; %cmp.true
; GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB16_3:
; GFX9-NEXT:    s_branch .LBB16_2
; GFX9-NEXT:  .LBB16_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_f32_to_v2bf16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB16_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB16_4
; GFX11-NEXT:  .LBB16_2: ; %cmp.true
; GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB16_3:
; GFX11-NEXT:    s_branch .LBB16_2
; GFX11-NEXT:  .LBB16_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg float @bitcast_v2bf16_to_f32_inreg(<2 x bfloat> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2bf16_to_f32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    v_mul_f32_e64 v1, 1.0, s17
; GCN-NEXT:    v_mul_f32_e64 v2, 1.0, s16
; GCN-NEXT:    s_cbranch_scc0 .LBB17_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshrrev_b32_e32 v0, 16, v1
; GCN-NEXT:    v_alignbit_b32 v0, v0, v2, 16
; GCN-NEXT:    s_cbranch_execnz .LBB17_3
; GCN-NEXT:  .LBB17_2: ; %cmp.true
; GCN-NEXT:    v_and_b32_e32 v1, 0xffff0000, v1
; GCN-NEXT:    v_and_b32_e32 v0, 0xffff0000, v2
; GCN-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GCN-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; GCN-NEXT:  .LBB17_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB17_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    s_branch .LBB17_2
;
; VI-LABEL: bitcast_v2bf16_to_f32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB17_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB17_4
; VI-NEXT:  .LBB17_2: ; %cmp.true
; VI-NEXT:    s_lshl_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; VI-NEXT:    v_add_f32_e32 v1, s4, v0
; VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; VI-NEXT:    v_add_f32_e32 v0, s4, v0
; VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; VI-NEXT:    v_bfe_u32 v2, v0, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v0
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; VI-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; VI-NEXT:    v_alignbit_b32 v0, v0, v1, 16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB17_3:
; VI-NEXT:    s_branch .LBB17_2
; VI-NEXT:  .LBB17_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2bf16_to_f32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB17_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB17_4
; GFX9-NEXT:  .LBB17_2: ; %cmp.true
; GFX9-NEXT:    s_and_b32 s4, s16, 0xffff0000
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; GFX9-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v0
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; GFX9-NEXT:    v_mov_b32_e32 v2, 0xffff
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX9-NEXT:    v_and_b32_sdwa v0, v2, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; GFX9-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB17_3:
; GFX9-NEXT:    s_branch .LBB17_2
; GFX9-NEXT:  .LBB17_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2bf16_to_f32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB17_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB17_4
; GFX11-NEXT:  .LBB17_2: ; %cmp.true
; GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff0000
; GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s1
; GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX11-NEXT:    v_bfe_u32 v3, v1, 16, 1
; GFX11-NEXT:    v_or_b32_e32 v4, 0x400000, v0
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; GFX11-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v1
; GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc_lo
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX11-NEXT:    v_dual_cndmask_b32 v1, v3, v5 :: v_dual_and_b32 v0, 0xffff, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX11-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB17_3:
; GFX11-NEXT:    s_branch .LBB17_2
; GFX11-NEXT:  .LBB17_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg <1 x i32> @bitcast_f32_to_v1i32_inreg(float inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_f32_to_v1i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB18_3
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_cbranch_execnz .LBB18_4
; GCN-NEXT:  .LBB18_2: ; %cmp.true
; GCN-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB18_3:
; GCN-NEXT:    s_branch .LBB18_2
; GCN-NEXT:  .LBB18_4:
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    s_setpc_b64 s[30:31]
;
; VI-LABEL: bitcast_f32_to_v1i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB18_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB18_4
; VI-NEXT:  .LBB18_2: ; %cmp.true
; VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB18_3:
; VI-NEXT:    s_branch .LBB18_2
; VI-NEXT:  .LBB18_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_f32_to_v1i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB18_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB18_4
; GFX9-NEXT:  .LBB18_2: ; %cmp.true
; GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB18_3:
; GFX9-NEXT:    s_branch .LBB18_2
; GFX9-NEXT:  .LBB18_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_f32_to_v1i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB18_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB18_4
; GFX11-NEXT:  .LBB18_2: ; %cmp.true
; GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB18_3:
; GFX11-NEXT:    s_branch .LBB18_2
; GFX11-NEXT:  .LBB18_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg float @bitcast_v1i32_to_f32_inreg(<1 x i32> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v1i32_to_f32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB19_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_cbranch_execnz .LBB19_3
; GCN-NEXT:  .LBB19_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:  .LBB19_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB19_4:
; GCN-NEXT:    s_branch .LBB19_2
;
; VI-LABEL: bitcast_v1i32_to_f32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB19_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB19_3
; VI-NEXT:  .LBB19_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB19_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB19_4:
; VI-NEXT:    s_branch .LBB19_2
;
; GFX9-LABEL: bitcast_v1i32_to_f32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB19_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB19_3
; GFX9-NEXT:  .LBB19_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB19_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB19_4:
; GFX9-NEXT:    s_branch .LBB19_2
;
; GFX11-LABEL: bitcast_v1i32_to_f32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB19_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB19_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB19_3:
; GFX11-NEXT:  .LBB19_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg <4 x i8> @bitcast_f32_to_v4i8_inreg(float inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_f32_to_v4i8_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB20_3
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s7, s16, 24
; GCN-NEXT:    s_lshr_b32 s6, s16, 16
; GCN-NEXT:    s_lshr_b32 s8, s16, 8
; GCN-NEXT:    s_cbranch_execnz .LBB20_4
; GCN-NEXT:  .LBB20_2: ; %cmp.true
; GCN-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GCN-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB20_3:
; GCN-NEXT:    ; implicit-def: $sgpr8
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    s_branch .LBB20_2
; GCN-NEXT:  .LBB20_4:
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    v_mov_b32_e32 v1, s8
; GCN-NEXT:    v_mov_b32_e32 v3, s7
; GCN-NEXT:    v_mov_b32_e32 v2, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
;
; VI-LABEL: bitcast_f32_to_v4i8_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB20_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_lshr_b32 s7, s16, 24
; VI-NEXT:    s_lshr_b32 s6, s16, 16
; VI-NEXT:    s_lshr_b32 s8, s16, 8
; VI-NEXT:    s_cbranch_execnz .LBB20_4
; VI-NEXT:  .LBB20_2: ; %cmp.true
; VI-NEXT:    v_add_f32_e64 v0, s16, 1.0
; VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; VI-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; VI-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB20_3:
; VI-NEXT:    ; implicit-def: $sgpr8
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    ; implicit-def: $sgpr7
; VI-NEXT:    s_branch .LBB20_2
; VI-NEXT:  .LBB20_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    v_mov_b32_e32 v1, s8
; VI-NEXT:    v_mov_b32_e32 v3, s7
; VI-NEXT:    v_mov_b32_e32 v2, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_f32_to_v4i8_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB20_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_lshr_b32 s7, s16, 24
; GFX9-NEXT:    s_lshr_b32 s6, s16, 16
; GFX9-NEXT:    s_lshr_b32 s8, s16, 8
; GFX9-NEXT:    s_cbranch_execnz .LBB20_4
; GFX9-NEXT:  .LBB20_2: ; %cmp.true
; GFX9-NEXT:    v_add_f32_e64 v0, s16, 1.0
; GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; GFX9-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB20_3:
; GFX9-NEXT:    ; implicit-def: $sgpr8
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    ; implicit-def: $sgpr7
; GFX9-NEXT:    s_branch .LBB20_2
; GFX9-NEXT:  .LBB20_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    v_mov_b32_e32 v1, s8
; GFX9-NEXT:    v_mov_b32_e32 v3, s7
; GFX9-NEXT:    v_mov_b32_e32 v2, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_f32_to_v4i8_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB20_3
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_lshr_b32 s3, s0, 24
; GFX11-NEXT:    s_lshr_b32 s2, s0, 16
; GFX11-NEXT:    s_lshr_b32 s4, s0, 8
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB20_4
; GFX11-NEXT:  .LBB20_2: ; %cmp.true
; GFX11-NEXT:    v_add_f32_e64 v0, s0, 1.0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; GFX11-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB20_3:
; GFX11-NEXT:    ; implicit-def: $sgpr4
; GFX11-NEXT:    ; implicit-def: $sgpr2
; GFX11-NEXT:    ; implicit-def: $sgpr3
; GFX11-NEXT:    s_branch .LBB20_2
; GFX11-NEXT:  .LBB20_4:
; GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s4
; GFX11-NEXT:    v_dual_mov_b32 v3, s3 :: v_dual_mov_b32 v2, s2
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg float @bitcast_v4i8_to_f32_inreg(<4 x i8> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v4i8_to_f32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s20, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB21_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_or_b32 s4, s4, s5
; GCN-NEXT:    s_and_b32 s5, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s5, 16
; GCN-NEXT:    s_lshl_b32 s6, s19, 24
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_or_b32 s5, s6, s5
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_cbranch_execnz .LBB21_3
; GCN-NEXT:  .LBB21_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_add_i32 s18, s18, 3
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_and_b32 s6, s18, 0xff
; GCN-NEXT:    s_addk_i32 s4, 0x300
; GCN-NEXT:    s_lshl_b32 s5, s19, 24
; GCN-NEXT:    s_lshl_b32 s6, s6, 16
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_or_b32 s5, s5, s6
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_add_i32 s6, s4, 0x3000000
; GCN-NEXT:  .LBB21_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB21_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB21_2
;
; VI-LABEL: bitcast_v4i8_to_f32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s20, 0
; VI-NEXT:    s_cbranch_scc0 .LBB21_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_and_b32 s4, s16, 0xff
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_and_b32 s5, s18, 0xff
; VI-NEXT:    s_lshl_b32 s6, s19, 8
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s4, s4, 0xffff
; VI-NEXT:    s_lshl_b32 s5, s5, 16
; VI-NEXT:    s_or_b32 s6, s4, s5
; VI-NEXT:    s_cbranch_execnz .LBB21_3
; VI-NEXT:  .LBB21_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_add_i32 s18, s18, 3
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_and_b32 s6, s16, 0xff
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s6, s18, 0xff
; VI-NEXT:    s_lshl_b32 s4, s19, 24
; VI-NEXT:    s_addk_i32 s5, 0x300
; VI-NEXT:    s_lshl_b32 s6, s6, 16
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s6
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s6, s4, 0x3000000
; VI-NEXT:  .LBB21_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB21_4:
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB21_2
;
; GFX9-LABEL: bitcast_v4i8_to_f32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB21_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_or_b32 s4, s4, s5
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s5, s6
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:    s_cbranch_execnz .LBB21_3
; GFX9-NEXT:  .LBB21_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_add_i32 s18, s18, 3
; GFX9-NEXT:    s_or_b32 s4, s5, s4
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s6, s5
; GFX9-NEXT:    s_addk_i32 s4, 0x300
; GFX9-NEXT:    s_addk_i32 s5, 0x300
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:  .LBB21_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB21_4:
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB21_2
;
; GFX11-LABEL: bitcast_v4i8_to_f32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB21_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_and_b32 s5, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s6, s1, 8
; GFX11-NEXT:    s_and_b32 s7, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s8, s3, 8
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_or_b32 s6, s7, s8
; GFX11-NEXT:    s_and_b32 s5, s5, 0xffff
; GFX11-NEXT:    s_lshl_b32 s6, s6, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB21_3
; GFX11-NEXT:  .LBB21_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_add_i32 s2, s2, 3
; GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; GFX11-NEXT:    s_or_b32 s0, s1, s0
; GFX11-NEXT:    s_or_b32 s1, s3, s2
; GFX11-NEXT:    s_addk_i32 s0, 0x300
; GFX11-NEXT:    s_addk_i32 s1, 0x300
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s0, s1
; GFX11-NEXT:  .LBB21_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB21_4:
; GFX11-NEXT:    ; implicit-def: $sgpr5
; GFX11-NEXT:    s_branch .LBB21_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg <2 x half> @bitcast_v2i16_to_v2f16_inreg(<2 x i16> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2i16_to_v2f16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB22_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s16
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s17
; GCN-NEXT:    s_cbranch_execnz .LBB22_3
; GCN-NEXT:  .LBB22_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s17, s17, 3
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s16
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s17
; GCN-NEXT:  .LBB22_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB22_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB22_2
;
; VI-LABEL: bitcast_v2i16_to_v2f16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB22_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB22_3
; VI-NEXT:  .LBB22_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s5, s16, 3
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s16, s4, 0x30000
; VI-NEXT:  .LBB22_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB22_4:
; VI-NEXT:    s_branch .LBB22_2
;
; GFX9-LABEL: bitcast_v2i16_to_v2f16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB22_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB22_4
; GFX9-NEXT:  .LBB22_2: ; %cmp.true
; GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB22_3:
; GFX9-NEXT:    s_branch .LBB22_2
; GFX9-NEXT:  .LBB22_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2i16_to_v2f16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB22_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB22_4
; GFX11-NEXT:  .LBB22_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB22_3:
; GFX11-NEXT:    s_branch .LBB22_2
; GFX11-NEXT:  .LBB22_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <2 x i16> @bitcast_v2f16_to_v2i16_inreg(<2 x half> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2f16_to_v2i16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_cvt_f16_f32_e32 v0, s16
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, s17
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB23_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_cbranch_execnz .LBB23_3
; GCN-NEXT:  .LBB23_2: ; %cmp.true
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v1
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v0
; GCN-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; GCN-NEXT:    v_cvt_f16_f32_e32 v0, v0
; GCN-NEXT:    v_lshlrev_b32_e32 v2, 16, v1
; GCN-NEXT:    v_or_b32_e32 v0, v0, v2
; GCN-NEXT:  .LBB23_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB23_4:
; GCN-NEXT:    s_branch .LBB23_2
;
; VI-LABEL: bitcast_v2f16_to_v2i16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB23_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB23_4
; VI-NEXT:  .LBB23_2: ; %cmp.true
; VI-NEXT:    s_lshr_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x200
; VI-NEXT:    v_mov_b32_e32 v2, s4
; VI-NEXT:    v_add_f16_e32 v1, s16, v0
; VI-NEXT:    v_add_f16_sdwa v0, v2, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; VI-NEXT:    v_or_b32_e32 v0, v1, v0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB23_3:
; VI-NEXT:    s_branch .LBB23_2
; VI-NEXT:  .LBB23_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2f16_to_v2i16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB23_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB23_4
; GFX9-NEXT:  .LBB23_2: ; %cmp.true
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB23_3:
; GFX9-NEXT:    s_branch .LBB23_2
; GFX9-NEXT:  .LBB23_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2f16_to_v2i16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB23_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB23_4
; GFX11-NEXT:  .LBB23_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB23_3:
; GFX11-NEXT:    s_branch .LBB23_2
; GFX11-NEXT:  .LBB23_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x bfloat> @bitcast_v2i16_to_v2bf16_inreg(<2 x i16> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2i16_to_v2bf16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB24_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshl_b32 s6, s16, 16
; GCN-NEXT:    s_lshl_b32 s7, s17, 16
; GCN-NEXT:    s_cbranch_execnz .LBB24_3
; GCN-NEXT:  .LBB24_2: ; %cmp.true
; GCN-NEXT:    s_lshl_b32 s4, s17, 16
; GCN-NEXT:    s_lshl_b32 s5, s16, 16
; GCN-NEXT:    s_add_i32 s6, s5, 0x30000
; GCN-NEXT:    s_add_i32 s7, s4, 0x30000
; GCN-NEXT:  .LBB24_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    v_mov_b32_e32 v1, s7
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB24_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    s_branch .LBB24_2
;
; VI-LABEL: bitcast_v2i16_to_v2bf16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB24_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB24_3
; VI-NEXT:  .LBB24_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s5, s16, 3
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s16, s4, 0x30000
; VI-NEXT:  .LBB24_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB24_4:
; VI-NEXT:    s_branch .LBB24_2
;
; GFX9-LABEL: bitcast_v2i16_to_v2bf16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB24_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB24_4
; GFX9-NEXT:  .LBB24_2: ; %cmp.true
; GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB24_3:
; GFX9-NEXT:    s_branch .LBB24_2
; GFX9-NEXT:  .LBB24_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2i16_to_v2bf16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB24_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB24_4
; GFX11-NEXT:  .LBB24_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB24_3:
; GFX11-NEXT:    s_branch .LBB24_2
; GFX11-NEXT:  .LBB24_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x i16> @bitcast_v2bf16_to_v2i16_inreg(<2 x bfloat> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2bf16_to_v2i16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    v_mul_f32_e64 v3, 1.0, s16
; GCN-NEXT:    v_mul_f32_e64 v2, 1.0, s17
; GCN-NEXT:    s_cbranch_scc0 .LBB25_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshrrev_b32_e32 v0, 16, v3
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v2
; GCN-NEXT:    s_cbranch_execnz .LBB25_3
; GCN-NEXT:  .LBB25_2: ; %cmp.true
; GCN-NEXT:    v_and_b32_e32 v1, 0xffff0000, v2
; GCN-NEXT:    v_and_b32_e32 v0, 0xffff0000, v3
; GCN-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GCN-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; GCN-NEXT:  .LBB25_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB25_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB25_2
;
; VI-LABEL: bitcast_v2bf16_to_v2i16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB25_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB25_4
; VI-NEXT:  .LBB25_2: ; %cmp.true
; VI-NEXT:    s_lshl_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; VI-NEXT:    v_add_f32_e32 v1, s4, v0
; VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; VI-NEXT:    v_add_f32_e32 v0, s4, v0
; VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; VI-NEXT:    v_bfe_u32 v2, v0, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v0
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; VI-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; VI-NEXT:    v_alignbit_b32 v0, v0, v1, 16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB25_3:
; VI-NEXT:    s_branch .LBB25_2
; VI-NEXT:  .LBB25_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2bf16_to_v2i16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB25_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB25_4
; GFX9-NEXT:  .LBB25_2: ; %cmp.true
; GFX9-NEXT:    s_and_b32 s4, s16, 0xffff0000
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; GFX9-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v0
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; GFX9-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX9-NEXT:    v_mov_b32_e32 v2, 0xffff0000
; GFX9-NEXT:    v_and_or_b32 v0, v1, v2, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB25_3:
; GFX9-NEXT:    s_branch .LBB25_2
; GFX9-NEXT:  .LBB25_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2bf16_to_v2i16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB25_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB25_4
; GFX11-NEXT:  .LBB25_2: ; %cmp.true
; GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff0000
; GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s1
; GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX11-NEXT:    v_bfe_u32 v3, v1, 16, 1
; GFX11-NEXT:    v_or_b32_e32 v4, 0x400000, v0
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; GFX11-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v1
; GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc_lo
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX11-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc_lo
; GFX11-NEXT:    v_and_or_b32 v0, 0xffff0000, v1, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB25_3:
; GFX11-NEXT:    s_branch .LBB25_2
; GFX11-NEXT:  .LBB25_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <1 x i32> @bitcast_v2i16_to_v1i32_inreg(<2 x i16> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2i16_to_v1i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB26_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_cbranch_execnz .LBB26_3
; GCN-NEXT:  .LBB26_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_add_i32 s6, s4, 0x30000
; GCN-NEXT:  .LBB26_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB26_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB26_2
;
; VI-LABEL: bitcast_v2i16_to_v1i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB26_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB26_3
; VI-NEXT:  .LBB26_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s5, s16, 3
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s16, s4, 0x30000
; VI-NEXT:  .LBB26_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB26_4:
; VI-NEXT:    s_branch .LBB26_2
;
; GFX9-LABEL: bitcast_v2i16_to_v1i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB26_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB26_4
; GFX9-NEXT:  .LBB26_2: ; %cmp.true
; GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB26_3:
; GFX9-NEXT:    s_branch .LBB26_2
; GFX9-NEXT:  .LBB26_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2i16_to_v1i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB26_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB26_4
; GFX11-NEXT:  .LBB26_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB26_3:
; GFX11-NEXT:    s_branch .LBB26_2
; GFX11-NEXT:  .LBB26_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <2 x i16> @bitcast_v1i32_to_v2i16_inreg(<1 x i32> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v1i32_to_v2i16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB27_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s6, s16, 16
; GCN-NEXT:    s_cbranch_execnz .LBB27_3
; GCN-NEXT:  .LBB27_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_lshr_b32 s6, s16, 16
; GCN-NEXT:  .LBB27_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    v_mov_b32_e32 v1, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB27_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB27_2
;
; VI-LABEL: bitcast_v1i32_to_v2i16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB27_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB27_3
; VI-NEXT:  .LBB27_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB27_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB27_4:
; VI-NEXT:    s_branch .LBB27_2
;
; GFX9-LABEL: bitcast_v1i32_to_v2i16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB27_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB27_3
; GFX9-NEXT:  .LBB27_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB27_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB27_4:
; GFX9-NEXT:    s_branch .LBB27_2
;
; GFX11-LABEL: bitcast_v1i32_to_v2i16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB27_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB27_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB27_3:
; GFX11-NEXT:  .LBB27_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <4 x i8> @bitcast_v2i16_to_v4i8_inreg(<2 x i16> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2i16_to_v4i8_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB28_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_lshr_b32 s7, s6, 8
; GCN-NEXT:    s_and_b32 s8, s17, 0xffff
; GCN-NEXT:    s_bfe_u32 s9, s17, 0x80008
; GCN-NEXT:    s_cbranch_execnz .LBB28_3
; GCN-NEXT:  .LBB28_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_add_i32 s17, s17, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xffff
; GCN-NEXT:    s_lshl_b32 s5, s17, 16
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_lshr_b32 s7, s6, 8
; GCN-NEXT:    s_and_b32 s8, s17, 0xffff
; GCN-NEXT:    s_bfe_u32 s9, s17, 0x80008
; GCN-NEXT:  .LBB28_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    v_mov_b32_e32 v1, s7
; GCN-NEXT:    v_mov_b32_e32 v2, s8
; GCN-NEXT:    v_mov_b32_e32 v3, s9
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB28_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    ; implicit-def: $sgpr8
; GCN-NEXT:    ; implicit-def: $sgpr9
; GCN-NEXT:    s_branch .LBB28_2
;
; VI-LABEL: bitcast_v2i16_to_v4i8_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB28_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_lshr_b32 s7, s16, 24
; VI-NEXT:    s_lshr_b32 s6, s16, 16
; VI-NEXT:    s_lshr_b32 s8, s16, 8
; VI-NEXT:    s_cbranch_execnz .LBB28_3
; VI-NEXT:  .LBB28_2: ; %cmp.true
; VI-NEXT:    s_lshr_b32 s4, s16, 16
; VI-NEXT:    s_add_i32 s6, s4, 3
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_and_b32 s4, s16, 0xffff
; VI-NEXT:    s_lshl_b32 s5, s6, 16
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_lshr_b32 s8, s4, 8
; VI-NEXT:    s_bfe_u32 s7, s6, 0x80008
; VI-NEXT:  .LBB28_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    v_mov_b32_e32 v1, s8
; VI-NEXT:    v_mov_b32_e32 v2, s6
; VI-NEXT:    v_mov_b32_e32 v3, s7
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB28_4:
; VI-NEXT:    ; implicit-def: $sgpr8
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    ; implicit-def: $sgpr7
; VI-NEXT:    s_branch .LBB28_2
;
; GFX9-LABEL: bitcast_v2i16_to_v4i8_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB28_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_lshr_b32 s7, s16, 24
; GFX9-NEXT:    s_lshr_b32 s6, s16, 16
; GFX9-NEXT:    s_lshr_b32 s8, s16, 8
; GFX9-NEXT:    s_cbranch_execnz .LBB28_4
; GFX9-NEXT:  .LBB28_2: ; %cmp.true
; GFX9-NEXT:    v_pk_add_u16 v0, s16, 3 op_sel_hi:[1,0]
; GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; GFX9-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB28_3:
; GFX9-NEXT:    ; implicit-def: $sgpr8
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    ; implicit-def: $sgpr7
; GFX9-NEXT:    s_branch .LBB28_2
; GFX9-NEXT:  .LBB28_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    v_mov_b32_e32 v1, s8
; GFX9-NEXT:    v_mov_b32_e32 v3, s7
; GFX9-NEXT:    v_mov_b32_e32 v2, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2i16_to_v4i8_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB28_3
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_lshr_b32 s3, s0, 24
; GFX11-NEXT:    s_lshr_b32 s2, s0, 16
; GFX11-NEXT:    s_lshr_b32 s4, s0, 8
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB28_4
; GFX11-NEXT:  .LBB28_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_u16 v0, s0, 3 op_sel_hi:[1,0]
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; GFX11-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB28_3:
; GFX11-NEXT:    ; implicit-def: $sgpr4
; GFX11-NEXT:    ; implicit-def: $sgpr2
; GFX11-NEXT:    ; implicit-def: $sgpr3
; GFX11-NEXT:    s_branch .LBB28_2
; GFX11-NEXT:  .LBB28_4:
; GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s4
; GFX11-NEXT:    v_dual_mov_b32 v3, s3 :: v_dual_mov_b32 v2, s2
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <2 x i16> @bitcast_v4i8_to_v2i16_inreg(<4 x i8> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v4i8_to_v2i16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s20, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB29_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_or_b32 s4, s4, s5
; GCN-NEXT:    s_and_b32 s5, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s6, s19, 8
; GCN-NEXT:    s_or_b32 s5, s5, s6
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_lshl_b32 s6, s5, 16
; GCN-NEXT:    s_or_b32 s6, s4, s6
; GCN-NEXT:    s_and_b32 s7, s5, 0xffff
; GCN-NEXT:    s_cbranch_execnz .LBB29_3
; GCN-NEXT:  .LBB29_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_add_i32 s18, s18, 3
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_and_b32 s5, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s6, s19, 8
; GCN-NEXT:    s_or_b32 s5, s6, s5
; GCN-NEXT:    s_addk_i32 s4, 0x300
; GCN-NEXT:    s_addk_i32 s5, 0x300
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_lshl_b32 s6, s5, 16
; GCN-NEXT:    s_or_b32 s6, s4, s6
; GCN-NEXT:    s_and_b32 s7, s5, 0xffff
; GCN-NEXT:  .LBB29_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    v_mov_b32_e32 v1, s7
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB29_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    s_branch .LBB29_2
;
; VI-LABEL: bitcast_v4i8_to_v2i16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s20, 0
; VI-NEXT:    s_cbranch_scc0 .LBB29_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_and_b32 s4, s16, 0xff
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_and_b32 s5, s18, 0xff
; VI-NEXT:    s_lshl_b32 s6, s19, 8
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s4, s4, 0xffff
; VI-NEXT:    s_lshl_b32 s5, s5, 16
; VI-NEXT:    s_or_b32 s6, s4, s5
; VI-NEXT:    s_cbranch_execnz .LBB29_3
; VI-NEXT:  .LBB29_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_add_i32 s18, s18, 3
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_and_b32 s6, s16, 0xff
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s6, s18, 0xff
; VI-NEXT:    s_lshl_b32 s4, s19, 24
; VI-NEXT:    s_addk_i32 s5, 0x300
; VI-NEXT:    s_lshl_b32 s6, s6, 16
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s6
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s6, s4, 0x3000000
; VI-NEXT:  .LBB29_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB29_4:
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB29_2
;
; GFX9-LABEL: bitcast_v4i8_to_v2i16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB29_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_or_b32 s4, s4, s5
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s5, s6
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:    s_cbranch_execnz .LBB29_3
; GFX9-NEXT:  .LBB29_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_add_i32 s18, s18, 3
; GFX9-NEXT:    s_or_b32 s4, s5, s4
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s6, s5
; GFX9-NEXT:    s_addk_i32 s4, 0x300
; GFX9-NEXT:    s_addk_i32 s5, 0x300
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:  .LBB29_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB29_4:
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB29_2
;
; GFX11-LABEL: bitcast_v4i8_to_v2i16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB29_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_and_b32 s5, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s6, s1, 8
; GFX11-NEXT:    s_and_b32 s7, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s8, s3, 8
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_or_b32 s6, s7, s8
; GFX11-NEXT:    s_and_b32 s5, s5, 0xffff
; GFX11-NEXT:    s_lshl_b32 s6, s6, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB29_3
; GFX11-NEXT:  .LBB29_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_add_i32 s2, s2, 3
; GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; GFX11-NEXT:    s_or_b32 s0, s1, s0
; GFX11-NEXT:    s_or_b32 s1, s3, s2
; GFX11-NEXT:    s_addk_i32 s0, 0x300
; GFX11-NEXT:    s_addk_i32 s1, 0x300
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s0, s1
; GFX11-NEXT:  .LBB29_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB29_4:
; GFX11-NEXT:    ; implicit-def: $sgpr5
; GFX11-NEXT:    s_branch .LBB29_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x bfloat> @bitcast_v2f16_to_v2bf16_inreg(<2 x half> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2f16_to_v2bf16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_cvt_f16_f32_e32 v2, s16
; GCN-NEXT:    v_cvt_f16_f32_e32 v3, s17
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB30_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v2
; GCN-NEXT:    v_lshlrev_b32_e32 v1, 16, v3
; GCN-NEXT:    s_cbranch_execnz .LBB30_3
; GCN-NEXT:  .LBB30_2: ; %cmp.true
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v3
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v2
; GCN-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; GCN-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, v1
; GCN-NEXT:    v_cvt_f16_f32_e32 v2, v0
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v1
; GCN-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; GCN-NEXT:  .LBB30_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB30_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB30_2
;
; VI-LABEL: bitcast_v2f16_to_v2bf16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB30_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB30_4
; VI-NEXT:  .LBB30_2: ; %cmp.true
; VI-NEXT:    s_lshr_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x200
; VI-NEXT:    v_mov_b32_e32 v2, s4
; VI-NEXT:    v_add_f16_e32 v1, s16, v0
; VI-NEXT:    v_add_f16_sdwa v0, v2, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; VI-NEXT:    v_or_b32_e32 v0, v1, v0
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB30_3:
; VI-NEXT:    s_branch .LBB30_2
; VI-NEXT:  .LBB30_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2f16_to_v2bf16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB30_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB30_4
; GFX9-NEXT:  .LBB30_2: ; %cmp.true
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB30_3:
; GFX9-NEXT:    s_branch .LBB30_2
; GFX9-NEXT:  .LBB30_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2f16_to_v2bf16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB30_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB30_4
; GFX11-NEXT:  .LBB30_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB30_3:
; GFX11-NEXT:    s_branch .LBB30_2
; GFX11-NEXT:  .LBB30_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x half> @bitcast_v2bf16_to_v2f16_inreg(<2 x bfloat> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2bf16_to_v2f16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    v_mul_f32_e64 v2, 1.0, s16
; GCN-NEXT:    v_mul_f32_e64 v3, 1.0, s17
; GCN-NEXT:    s_cbranch_scc0 .LBB31_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshrrev_b32_e32 v0, 16, v2
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v3
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v0
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v1
; GCN-NEXT:    s_cbranch_execnz .LBB31_3
; GCN-NEXT:  .LBB31_2: ; %cmp.true
; GCN-NEXT:    v_and_b32_e32 v0, 0xffff0000, v3
; GCN-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v0
; GCN-NEXT:    v_and_b32_e32 v0, 0xffff0000, v2
; GCN-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v0
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v1
; GCN-NEXT:  .LBB31_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB31_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB31_2
;
; VI-LABEL: bitcast_v2bf16_to_v2f16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB31_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB31_4
; VI-NEXT:  .LBB31_2: ; %cmp.true
; VI-NEXT:    s_lshl_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; VI-NEXT:    v_add_f32_e32 v1, s4, v0
; VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; VI-NEXT:    v_add_f32_e32 v0, s4, v0
; VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; VI-NEXT:    v_bfe_u32 v2, v0, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v0
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; VI-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; VI-NEXT:    v_alignbit_b32 v0, v0, v1, 16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB31_3:
; VI-NEXT:    s_branch .LBB31_2
; VI-NEXT:  .LBB31_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2bf16_to_v2f16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB31_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB31_4
; GFX9-NEXT:  .LBB31_2: ; %cmp.true
; GFX9-NEXT:    s_and_b32 s4, s16, 0xffff0000
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; GFX9-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v0
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; GFX9-NEXT:    v_mov_b32_e32 v2, 0xffff
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX9-NEXT:    v_and_b32_sdwa v0, v2, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; GFX9-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB31_3:
; GFX9-NEXT:    s_branch .LBB31_2
; GFX9-NEXT:  .LBB31_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2bf16_to_v2f16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB31_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB31_4
; GFX11-NEXT:  .LBB31_2: ; %cmp.true
; GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff0000
; GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s1
; GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX11-NEXT:    v_bfe_u32 v3, v1, 16, 1
; GFX11-NEXT:    v_or_b32_e32 v4, 0x400000, v0
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; GFX11-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v1
; GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc_lo
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX11-NEXT:    v_dual_cndmask_b32 v1, v3, v5 :: v_dual_and_b32 v0, 0xffff, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX11-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB31_3:
; GFX11-NEXT:    s_branch .LBB31_2
; GFX11-NEXT:  .LBB31_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <1 x i32> @bitcast_v2f16_to_v1i32_inreg(<2 x half> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2f16_to_v1i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_cvt_f16_f32_e32 v2, s17
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, s16
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB32_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v2
; GCN-NEXT:    v_or_b32_e32 v0, v1, v0
; GCN-NEXT:    s_cbranch_execnz .LBB32_3
; GCN-NEXT:  .LBB32_2: ; %cmp.true
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v2
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; GCN-NEXT:    v_cvt_f16_f32_e32 v0, v0
; GCN-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; GCN-NEXT:    v_cvt_f16_f32_e32 v1, v1
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v0
; GCN-NEXT:    v_or_b32_e32 v0, v1, v0
; GCN-NEXT:  .LBB32_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB32_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    s_branch .LBB32_2
;
; VI-LABEL: bitcast_v2f16_to_v1i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB32_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB32_4
; VI-NEXT:  .LBB32_2: ; %cmp.true
; VI-NEXT:    s_lshr_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x200
; VI-NEXT:    v_mov_b32_e32 v1, s4
; VI-NEXT:    v_add_f16_sdwa v1, v1, v0 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; VI-NEXT:    v_add_f16_e32 v0, s16, v0
; VI-NEXT:    v_or_b32_e32 v0, v0, v1
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB32_3:
; VI-NEXT:    s_branch .LBB32_2
; VI-NEXT:  .LBB32_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2f16_to_v1i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB32_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB32_4
; GFX9-NEXT:  .LBB32_2: ; %cmp.true
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB32_3:
; GFX9-NEXT:    s_branch .LBB32_2
; GFX9-NEXT:  .LBB32_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2f16_to_v1i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB32_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB32_4
; GFX11-NEXT:  .LBB32_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB32_3:
; GFX11-NEXT:    s_branch .LBB32_2
; GFX11-NEXT:  .LBB32_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <2 x half> @bitcast_v1i32_to_v2f16_inreg(<1 x i32> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v1i32_to_v2f16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB33_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s4, s16, 16
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s4
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s16
; GCN-NEXT:    s_cbranch_execnz .LBB33_3
; GCN-NEXT:  .LBB33_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_lshr_b32 s4, s16, 16
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s16
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s4
; GCN-NEXT:  .LBB33_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB33_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB33_2
;
; VI-LABEL: bitcast_v1i32_to_v2f16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB33_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB33_3
; VI-NEXT:  .LBB33_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB33_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB33_4:
; VI-NEXT:    s_branch .LBB33_2
;
; GFX9-LABEL: bitcast_v1i32_to_v2f16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB33_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB33_3
; GFX9-NEXT:  .LBB33_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB33_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB33_4:
; GFX9-NEXT:    s_branch .LBB33_2
;
; GFX11-LABEL: bitcast_v1i32_to_v2f16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB33_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB33_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB33_3:
; GFX11-NEXT:  .LBB33_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <4 x i8> @bitcast_v2f16_to_v4i8_inreg(<2 x half> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2f16_to_v4i8_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_cvt_f16_f32_e32 v2, s17
; GCN-NEXT:    v_cvt_f16_f32_e32 v4, s16
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB34_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshlrev_b32_e32 v0, 16, v2
; GCN-NEXT:    v_or_b32_e32 v0, v4, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GCN-NEXT:    v_bfe_u32 v3, v2, 8, 8
; GCN-NEXT:    s_cbranch_execnz .LBB34_3
; GCN-NEXT:  .LBB34_2: ; %cmp.true
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, v2
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, v4
; GCN-NEXT:    v_add_f32_e32 v0, 0x38000000, v0
; GCN-NEXT:    v_add_f32_e32 v1, 0x38000000, v1
; GCN-NEXT:    v_cvt_f16_f32_e32 v2, v0
; GCN-NEXT:    v_cvt_f16_f32_e32 v0, v1
; GCN-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; GCN-NEXT:    v_or_b32_e32 v0, v0, v1
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GCN-NEXT:    v_bfe_u32 v3, v2, 8, 8
; GCN-NEXT:  .LBB34_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB34_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    ; implicit-def: $vgpr3
; GCN-NEXT:    s_branch .LBB34_2
;
; VI-LABEL: bitcast_v2f16_to_v4i8_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB34_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_lshr_b32 s6, s16, 24
; VI-NEXT:    s_lshr_b32 s8, s16, 16
; VI-NEXT:    s_lshr_b32 s7, s16, 8
; VI-NEXT:    s_cbranch_execnz .LBB34_4
; VI-NEXT:  .LBB34_2: ; %cmp.true
; VI-NEXT:    s_lshr_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x200
; VI-NEXT:    v_add_f16_e32 v2, s4, v0
; VI-NEXT:    v_lshlrev_b32_e32 v1, 16, v2
; VI-NEXT:    v_add_f16_e32 v0, s16, v0
; VI-NEXT:    v_or_b32_e32 v1, v0, v1
; VI-NEXT:    v_lshrrev_b32_e32 v1, 8, v1
; VI-NEXT:    v_bfe_u32 v3, v2, 8, 8
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB34_3:
; VI-NEXT:    ; implicit-def: $sgpr7
; VI-NEXT:    ; implicit-def: $sgpr8
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB34_2
; VI-NEXT:  .LBB34_4:
; VI-NEXT:    v_mov_b32_e32 v2, s8
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    v_mov_b32_e32 v3, s6
; VI-NEXT:    v_mov_b32_e32 v1, s7
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2f16_to_v4i8_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB34_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_lshr_b32 s7, s16, 24
; GFX9-NEXT:    s_lshr_b32 s6, s16, 16
; GFX9-NEXT:    s_lshr_b32 s8, s16, 8
; GFX9-NEXT:    s_cbranch_execnz .LBB34_4
; GFX9-NEXT:  .LBB34_2: ; %cmp.true
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x200
; GFX9-NEXT:    v_pk_add_f16 v0, s16, v0 op_sel_hi:[1,0]
; GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; GFX9-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB34_3:
; GFX9-NEXT:    ; implicit-def: $sgpr8
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    ; implicit-def: $sgpr7
; GFX9-NEXT:    s_branch .LBB34_2
; GFX9-NEXT:  .LBB34_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    v_mov_b32_e32 v1, s8
; GFX9-NEXT:    v_mov_b32_e32 v3, s7
; GFX9-NEXT:    v_mov_b32_e32 v2, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2f16_to_v4i8_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB34_3
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_lshr_b32 s3, s0, 24
; GFX11-NEXT:    s_lshr_b32 s2, s0, 16
; GFX11-NEXT:    s_lshr_b32 s4, s0, 8
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB34_4
; GFX11-NEXT:  .LBB34_2: ; %cmp.true
; GFX11-NEXT:    v_pk_add_f16 v0, 0x200, s0 op_sel_hi:[0,1]
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; GFX11-NEXT:    v_lshrrev_b32_e32 v3, 24, v0
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB34_3:
; GFX11-NEXT:    ; implicit-def: $sgpr4
; GFX11-NEXT:    ; implicit-def: $sgpr2
; GFX11-NEXT:    ; implicit-def: $sgpr3
; GFX11-NEXT:    s_branch .LBB34_2
; GFX11-NEXT:  .LBB34_4:
; GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s4
; GFX11-NEXT:    v_dual_mov_b32 v3, s3 :: v_dual_mov_b32 v2, s2
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <2 x half> @bitcast_v4i8_to_v2f16_inreg(<4 x i8> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v4i8_to_v2f16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s20, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB35_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_or_b32 s4, s4, s5
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s4
; GCN-NEXT:    s_and_b32 s4, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s19, 8
; GCN-NEXT:    s_or_b32 s4, s4, s5
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s4
; GCN-NEXT:    s_cbranch_execnz .LBB35_3
; GCN-NEXT:  .LBB35_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s18, s18, 3
; GCN-NEXT:    s_and_b32 s4, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s19, 8
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_and_b32 s5, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s6, s17, 8
; GCN-NEXT:    s_or_b32 s5, s6, s5
; GCN-NEXT:    s_addk_i32 s4, 0x300
; GCN-NEXT:    s_addk_i32 s5, 0x300
; GCN-NEXT:    v_cvt_f32_f16_e32 v0, s5
; GCN-NEXT:    v_cvt_f32_f16_e32 v1, s4
; GCN-NEXT:  .LBB35_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB35_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    s_branch .LBB35_2
;
; VI-LABEL: bitcast_v4i8_to_v2f16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s20, 0
; VI-NEXT:    s_cbranch_scc0 .LBB35_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_and_b32 s4, s16, 0xff
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_and_b32 s5, s18, 0xff
; VI-NEXT:    s_lshl_b32 s6, s19, 8
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s4, s4, 0xffff
; VI-NEXT:    s_lshl_b32 s5, s5, 16
; VI-NEXT:    s_or_b32 s6, s4, s5
; VI-NEXT:    s_cbranch_execnz .LBB35_3
; VI-NEXT:  .LBB35_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_add_i32 s18, s18, 3
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_and_b32 s6, s16, 0xff
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s6, s18, 0xff
; VI-NEXT:    s_lshl_b32 s4, s19, 24
; VI-NEXT:    s_addk_i32 s5, 0x300
; VI-NEXT:    s_lshl_b32 s6, s6, 16
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s6
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s6, s4, 0x3000000
; VI-NEXT:  .LBB35_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB35_4:
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB35_2
;
; GFX9-LABEL: bitcast_v4i8_to_v2f16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB35_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_or_b32 s4, s4, s5
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s5, s6
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:    s_cbranch_execnz .LBB35_3
; GFX9-NEXT:  .LBB35_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_add_i32 s18, s18, 3
; GFX9-NEXT:    s_or_b32 s4, s5, s4
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s6, s5
; GFX9-NEXT:    s_addk_i32 s4, 0x300
; GFX9-NEXT:    s_addk_i32 s5, 0x300
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:  .LBB35_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB35_4:
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB35_2
;
; GFX11-LABEL: bitcast_v4i8_to_v2f16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB35_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_and_b32 s5, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s6, s1, 8
; GFX11-NEXT:    s_and_b32 s7, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s8, s3, 8
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_or_b32 s6, s7, s8
; GFX11-NEXT:    s_and_b32 s5, s5, 0xffff
; GFX11-NEXT:    s_lshl_b32 s6, s6, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB35_3
; GFX11-NEXT:  .LBB35_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_add_i32 s2, s2, 3
; GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; GFX11-NEXT:    s_or_b32 s0, s1, s0
; GFX11-NEXT:    s_or_b32 s1, s3, s2
; GFX11-NEXT:    s_addk_i32 s0, 0x300
; GFX11-NEXT:    s_addk_i32 s1, 0x300
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s0, s1
; GFX11-NEXT:  .LBB35_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB35_4:
; GFX11-NEXT:    ; implicit-def: $sgpr5
; GFX11-NEXT:    s_branch .LBB35_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <1 x i32> @bitcast_v2bf16_to_v1i32_inreg(<2 x bfloat> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2bf16_to_v1i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    v_mul_f32_e64 v1, 1.0, s17
; GCN-NEXT:    v_mul_f32_e64 v2, 1.0, s16
; GCN-NEXT:    s_cbranch_scc0 .LBB36_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshrrev_b32_e32 v0, 16, v1
; GCN-NEXT:    v_alignbit_b32 v0, v0, v2, 16
; GCN-NEXT:    s_cbranch_execnz .LBB36_3
; GCN-NEXT:  .LBB36_2: ; %cmp.true
; GCN-NEXT:    v_and_b32_e32 v1, 0xffff0000, v1
; GCN-NEXT:    v_and_b32_e32 v0, 0xffff0000, v2
; GCN-NEXT:    v_add_f32_e32 v1, 0x40c00000, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GCN-NEXT:    v_alignbit_b32 v0, v1, v0, 16
; GCN-NEXT:  .LBB36_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB36_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    s_branch .LBB36_2
;
; VI-LABEL: bitcast_v2bf16_to_v1i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB36_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB36_4
; VI-NEXT:  .LBB36_2: ; %cmp.true
; VI-NEXT:    s_lshl_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; VI-NEXT:    v_add_f32_e32 v1, s4, v0
; VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; VI-NEXT:    v_add_f32_e32 v0, s4, v0
; VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; VI-NEXT:    v_bfe_u32 v2, v0, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v0
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; VI-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; VI-NEXT:    v_alignbit_b32 v0, v0, v1, 16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB36_3:
; VI-NEXT:    s_branch .LBB36_2
; VI-NEXT:  .LBB36_4:
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2bf16_to_v1i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB36_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB36_4
; GFX9-NEXT:  .LBB36_2: ; %cmp.true
; GFX9-NEXT:    s_and_b32 s4, s16, 0xffff0000
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; GFX9-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v0
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; GFX9-NEXT:    v_mov_b32_e32 v2, 0xffff
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX9-NEXT:    v_and_b32_sdwa v0, v2, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:WORD_1
; GFX9-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB36_3:
; GFX9-NEXT:    s_branch .LBB36_2
; GFX9-NEXT:  .LBB36_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2bf16_to_v1i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB36_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB36_4
; GFX11-NEXT:  .LBB36_2: ; %cmp.true
; GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff0000
; GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s1
; GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX11-NEXT:    v_bfe_u32 v3, v1, 16, 1
; GFX11-NEXT:    v_or_b32_e32 v4, 0x400000, v0
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; GFX11-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v1
; GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc_lo
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX11-NEXT:    v_dual_cndmask_b32 v1, v3, v5 :: v_dual_and_b32 v0, 0xffff, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 16, v1
; GFX11-NEXT:    v_lshl_or_b32 v0, v1, 16, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB36_3:
; GFX11-NEXT:    s_branch .LBB36_2
; GFX11-NEXT:  .LBB36_4:
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <2 x bfloat> @bitcast_v1i32_to_v2bf16_inreg(<1 x i32> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v1i32_to_v2bf16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB37_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s6, s16, 0xffff0000
; GCN-NEXT:    s_lshl_b32 s7, s16, 16
; GCN-NEXT:    s_cbranch_execnz .LBB37_3
; GCN-NEXT:  .LBB37_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s6, s16, 0xffff0000
; GCN-NEXT:    s_lshl_b32 s7, s16, 16
; GCN-NEXT:  .LBB37_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s7
; GCN-NEXT:    v_mov_b32_e32 v1, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB37_4:
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB37_2
;
; VI-LABEL: bitcast_v1i32_to_v2bf16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB37_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_cbranch_execnz .LBB37_3
; VI-NEXT:  .LBB37_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:  .LBB37_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB37_4:
; VI-NEXT:    s_branch .LBB37_2
;
; GFX9-LABEL: bitcast_v1i32_to_v2bf16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB37_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_cbranch_execnz .LBB37_3
; GFX9-NEXT:  .LBB37_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:  .LBB37_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB37_4:
; GFX9-NEXT:    s_branch .LBB37_2
;
; GFX11-LABEL: bitcast_v1i32_to_v2bf16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB37_3
; GFX11-NEXT:  ; %bb.1: ; %Flow
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccz .LBB37_4
; GFX11-NEXT:  ; %bb.2: ; %end
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB37_3:
; GFX11-NEXT:  .LBB37_4: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <4 x i8> @bitcast_v2bf16_to_v4i8_inreg(<2 x bfloat> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v2bf16_to_v4i8_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s18, 0
; GCN-NEXT:    v_mul_f32_e64 v4, 1.0, s17
; GCN-NEXT:    v_mul_f32_e64 v5, 1.0, s16
; GCN-NEXT:    s_cbranch_scc0 .LBB38_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    v_lshrrev_b32_e32 v2, 16, v4
; GCN-NEXT:    v_alignbit_b32 v0, v2, v5, 16
; GCN-NEXT:    v_lshrrev_b32_e32 v3, 24, v4
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GCN-NEXT:    s_cbranch_execnz .LBB38_3
; GCN-NEXT:  .LBB38_2: ; %cmp.true
; GCN-NEXT:    v_and_b32_e32 v1, 0xffff0000, v4
; GCN-NEXT:    v_and_b32_e32 v0, 0xffff0000, v5
; GCN-NEXT:    v_add_f32_e32 v3, 0x40c00000, v1
; GCN-NEXT:    v_add_f32_e32 v0, 0x40c00000, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v2, 16, v3
; GCN-NEXT:    v_alignbit_b32 v0, v2, v0, 16
; GCN-NEXT:    v_lshrrev_b32_e32 v1, 8, v0
; GCN-NEXT:    v_lshrrev_b32_e32 v3, 24, v3
; GCN-NEXT:  .LBB38_3: ; %end
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB38_4:
; GCN-NEXT:    ; implicit-def: $vgpr0
; GCN-NEXT:    ; implicit-def: $vgpr1
; GCN-NEXT:    ; implicit-def: $vgpr2
; GCN-NEXT:    ; implicit-def: $vgpr3
; GCN-NEXT:    s_branch .LBB38_2
;
; VI-LABEL: bitcast_v2bf16_to_v4i8_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB38_3
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_lshr_b32 s7, s16, 24
; VI-NEXT:    s_lshr_b32 s6, s16, 16
; VI-NEXT:    s_lshr_b32 s8, s16, 8
; VI-NEXT:    s_cbranch_execnz .LBB38_4
; VI-NEXT:  .LBB38_2: ; %cmp.true
; VI-NEXT:    s_lshl_b32 s4, s16, 16
; VI-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; VI-NEXT:    v_add_f32_e32 v1, s4, v0
; VI-NEXT:    v_bfe_u32 v2, v1, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v1
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    s_and_b32 s4, s16, 0xffff0000
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; VI-NEXT:    v_add_f32_e32 v0, s4, v0
; VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; VI-NEXT:    v_bfe_u32 v2, v0, 16, 1
; VI-NEXT:    v_add_u32_e32 v2, vcc, v2, v0
; VI-NEXT:    v_add_u32_e32 v2, vcc, 0x7fff, v2
; VI-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; VI-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; VI-NEXT:    v_cndmask_b32_e32 v0, v2, v3, vcc
; VI-NEXT:    v_lshrrev_b32_e32 v2, 16, v0
; VI-NEXT:    v_alignbit_b32 v4, v2, v1, 16
; VI-NEXT:    v_lshrrev_b32_e32 v0, 16, v1
; VI-NEXT:    v_lshrrev_b32_e32 v3, 24, v4
; VI-NEXT:    v_lshrrev_b32_e32 v1, 8, v4
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB38_3:
; VI-NEXT:    ; implicit-def: $sgpr8
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    ; implicit-def: $sgpr7
; VI-NEXT:    s_branch .LBB38_2
; VI-NEXT:  .LBB38_4:
; VI-NEXT:    v_mov_b32_e32 v1, s8
; VI-NEXT:    v_mov_b32_e32 v3, s7
; VI-NEXT:    v_mov_b32_e32 v2, s6
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: bitcast_v2bf16_to_v4i8_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB38_3
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_lshr_b32 s6, s16, 24
; GFX9-NEXT:    s_lshr_b32 s8, s16, 16
; GFX9-NEXT:    s_lshr_b32 s7, s16, 8
; GFX9-NEXT:    s_cbranch_execnz .LBB38_4
; GFX9-NEXT:  .LBB38_2: ; %cmp.true
; GFX9-NEXT:    s_and_b32 s4, s16, 0xffff0000
; GFX9-NEXT:    v_mov_b32_e32 v0, 0x40c00000
; GFX9-NEXT:    v_add_f32_e32 v1, s4, v0
; GFX9-NEXT:    v_bfe_u32 v2, v1, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v2, v2, v1
; GFX9-NEXT:    v_add_u32_e32 v2, 0x7fff, v2
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v1
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v1, v1
; GFX9-NEXT:    s_lshl_b32 s4, s16, 16
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc
; GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; GFX9-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; GFX9-NEXT:    v_bfe_u32 v1, v0, 16, 1
; GFX9-NEXT:    v_add_u32_e32 v1, v1, v0
; GFX9-NEXT:    v_add_u32_e32 v1, 0x7fff, v1
; GFX9-NEXT:    v_or_b32_e32 v3, 0x400000, v0
; GFX9-NEXT:    v_cmp_u_f32_e32 vcc, v0, v0
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v1, v3, vcc
; GFX9-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX9-NEXT:    v_and_b32_e32 v1, 0xffff, v0
; GFX9-NEXT:    v_lshl_or_b32 v1, v2, 16, v1
; GFX9-NEXT:    v_lshrrev_b32_e32 v3, 24, v1
; GFX9-NEXT:    v_lshrrev_b32_e32 v1, 8, v1
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB38_3:
; GFX9-NEXT:    ; implicit-def: $sgpr7
; GFX9-NEXT:    ; implicit-def: $sgpr8
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB38_2
; GFX9-NEXT:  .LBB38_4:
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    v_mov_b32_e32 v2, s8
; GFX9-NEXT:    v_mov_b32_e32 v3, s6
; GFX9-NEXT:    v_mov_b32_e32 v1, s7
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: bitcast_v2bf16_to_v4i8_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s1, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB38_3
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_lshr_b32 s2, s0, 24
; GFX11-NEXT:    s_lshr_b32 s4, s0, 16
; GFX11-NEXT:    s_lshr_b32 s3, s0, 8
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s1
; GFX11-NEXT:    s_cbranch_vccnz .LBB38_4
; GFX11-NEXT:  .LBB38_2: ; %cmp.true
; GFX11-NEXT:    s_lshl_b32 s1, s0, 16
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff0000
; GFX11-NEXT:    v_add_f32_e64 v0, 0x40c00000, s1
; GFX11-NEXT:    v_add_f32_e64 v1, 0x40c00000, s0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX11-NEXT:    v_bfe_u32 v2, v0, 16, 1
; GFX11-NEXT:    v_bfe_u32 v3, v1, 16, 1
; GFX11-NEXT:    v_or_b32_e32 v4, 0x400000, v0
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v0, v0
; GFX11-NEXT:    v_or_b32_e32 v5, 0x400000, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v3, v3, v1
; GFX11-NEXT:    v_add_nc_u32_e32 v3, 0x7fff, v3
; GFX11-NEXT:    v_add_nc_u32_e32 v2, v2, v0
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_add_nc_u32_e32 v2, 0x7fff, v2
; GFX11-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc_lo
; GFX11-NEXT:    v_cmp_u_f32_e32 vcc_lo, v1, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v0, 16, v0
; GFX11-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc_lo
; GFX11-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_3) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_and_b32_e32 v1, 0xffff, v0
; GFX11-NEXT:    v_lshl_or_b32 v1, v2, 16, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_lshrrev_b32_e32 v3, 24, v1
; GFX11-NEXT:    v_lshrrev_b32_e32 v1, 8, v1
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB38_3:
; GFX11-NEXT:    ; implicit-def: $sgpr3
; GFX11-NEXT:    ; implicit-def: $sgpr4
; GFX11-NEXT:    ; implicit-def: $sgpr2
; GFX11-NEXT:    s_branch .LBB38_2
; GFX11-NEXT:  .LBB38_4:
; GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v3, s2
; GFX11-NEXT:    v_dual_mov_b32 v2, s4 :: v_dual_mov_b32 v1, s3
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <2 x bfloat> @bitcast_v4i8_to_v2bf16_inreg(<4 x i8> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v4i8_to_v2bf16_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s20, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB39_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s4, s4, 16
; GCN-NEXT:    s_lshl_b32 s5, s17, 24
; GCN-NEXT:    s_or_b32 s6, s5, s4
; GCN-NEXT:    s_and_b32 s4, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s4, s4, 16
; GCN-NEXT:    s_lshl_b32 s5, s19, 24
; GCN-NEXT:    s_or_b32 s7, s5, s4
; GCN-NEXT:    s_cbranch_execnz .LBB39_3
; GCN-NEXT:  .LBB39_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s18, s18, 3
; GCN-NEXT:    s_and_b32 s5, s18, 0xff
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_lshl_b32 s4, s19, 24
; GCN-NEXT:    s_lshl_b32 s5, s5, 16
; GCN-NEXT:    s_and_b32 s6, s16, 0xff
; GCN-NEXT:    s_or_b32 s4, s4, s5
; GCN-NEXT:    s_lshl_b32 s5, s17, 24
; GCN-NEXT:    s_lshl_b32 s6, s6, 16
; GCN-NEXT:    s_or_b32 s5, s5, s6
; GCN-NEXT:    s_add_i32 s6, s5, 0x3000000
; GCN-NEXT:    s_add_i32 s7, s4, 0x3000000
; GCN-NEXT:  .LBB39_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    v_mov_b32_e32 v1, s7
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB39_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    s_branch .LBB39_2
;
; VI-LABEL: bitcast_v4i8_to_v2bf16_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s20, 0
; VI-NEXT:    s_cbranch_scc0 .LBB39_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_and_b32 s4, s16, 0xff
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_and_b32 s5, s18, 0xff
; VI-NEXT:    s_lshl_b32 s6, s19, 8
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s4, s4, 0xffff
; VI-NEXT:    s_lshl_b32 s5, s5, 16
; VI-NEXT:    s_or_b32 s6, s4, s5
; VI-NEXT:    s_cbranch_execnz .LBB39_3
; VI-NEXT:  .LBB39_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_add_i32 s18, s18, 3
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_and_b32 s6, s16, 0xff
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s6, s18, 0xff
; VI-NEXT:    s_lshl_b32 s4, s19, 24
; VI-NEXT:    s_addk_i32 s5, 0x300
; VI-NEXT:    s_lshl_b32 s6, s6, 16
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s6
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s6, s4, 0x3000000
; VI-NEXT:  .LBB39_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB39_4:
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB39_2
;
; GFX9-LABEL: bitcast_v4i8_to_v2bf16_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB39_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_or_b32 s4, s4, s5
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s5, s6
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:    s_cbranch_execnz .LBB39_3
; GFX9-NEXT:  .LBB39_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_add_i32 s18, s18, 3
; GFX9-NEXT:    s_or_b32 s4, s5, s4
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s6, s5
; GFX9-NEXT:    s_addk_i32 s4, 0x300
; GFX9-NEXT:    s_addk_i32 s5, 0x300
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:  .LBB39_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB39_4:
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB39_2
;
; GFX11-LABEL: bitcast_v4i8_to_v2bf16_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB39_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_and_b32 s5, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s6, s1, 8
; GFX11-NEXT:    s_and_b32 s7, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s8, s3, 8
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_or_b32 s6, s7, s8
; GFX11-NEXT:    s_and_b32 s5, s5, 0xffff
; GFX11-NEXT:    s_lshl_b32 s6, s6, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB39_3
; GFX11-NEXT:  .LBB39_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_add_i32 s2, s2, 3
; GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; GFX11-NEXT:    s_or_b32 s0, s1, s0
; GFX11-NEXT:    s_or_b32 s1, s3, s2
; GFX11-NEXT:    s_addk_i32 s0, 0x300
; GFX11-NEXT:    s_addk_i32 s1, 0x300
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s0, s1
; GFX11-NEXT:  .LBB39_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB39_4:
; GFX11-NEXT:    ; implicit-def: $sgpr5
; GFX11-NEXT:    s_branch .LBB39_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <4 x i8> @bitcast_v1i32_to_v4i8_inreg(<1 x i32> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v1i32_to_v4i8_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s17, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB40_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_lshr_b32 s6, s16, 24
; GCN-NEXT:    s_lshr_b32 s7, s16, 16
; GCN-NEXT:    s_lshr_b32 s8, s16, 8
; GCN-NEXT:    s_cbranch_execnz .LBB40_3
; GCN-NEXT:  .LBB40_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_lshr_b32 s7, s16, 16
; GCN-NEXT:    s_lshr_b32 s6, s16, 24
; GCN-NEXT:    s_lshr_b32 s8, s16, 8
; GCN-NEXT:  .LBB40_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s16
; GCN-NEXT:    v_mov_b32_e32 v1, s8
; GCN-NEXT:    v_mov_b32_e32 v2, s7
; GCN-NEXT:    v_mov_b32_e32 v3, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB40_4:
; GCN-NEXT:    ; implicit-def: $sgpr8
; GCN-NEXT:    ; implicit-def: $sgpr7
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB40_2
;
; VI-LABEL: bitcast_v1i32_to_v4i8_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s17, 0
; VI-NEXT:    s_cbranch_scc0 .LBB40_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_lshr_b32 s6, s16, 24
; VI-NEXT:    s_lshr_b32 s7, s16, 16
; VI-NEXT:    s_lshr_b32 s8, s16, 8
; VI-NEXT:    s_cbranch_execnz .LBB40_3
; VI-NEXT:  .LBB40_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_lshr_b32 s7, s16, 16
; VI-NEXT:    s_lshr_b32 s6, s16, 24
; VI-NEXT:    s_lshr_b32 s8, s16, 8
; VI-NEXT:  .LBB40_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    v_mov_b32_e32 v1, s8
; VI-NEXT:    v_mov_b32_e32 v2, s7
; VI-NEXT:    v_mov_b32_e32 v3, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB40_4:
; VI-NEXT:    ; implicit-def: $sgpr8
; VI-NEXT:    ; implicit-def: $sgpr7
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB40_2
;
; GFX9-LABEL: bitcast_v1i32_to_v4i8_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s17, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB40_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_lshr_b32 s6, s16, 24
; GFX9-NEXT:    s_lshr_b32 s7, s16, 16
; GFX9-NEXT:    s_lshr_b32 s8, s16, 8
; GFX9-NEXT:    s_cbranch_execnz .LBB40_3
; GFX9-NEXT:  .LBB40_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_lshr_b32 s7, s16, 16
; GFX9-NEXT:    s_lshr_b32 s6, s16, 24
; GFX9-NEXT:    s_lshr_b32 s8, s16, 8
; GFX9-NEXT:  .LBB40_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s16
; GFX9-NEXT:    v_mov_b32_e32 v1, s8
; GFX9-NEXT:    v_mov_b32_e32 v2, s7
; GFX9-NEXT:    v_mov_b32_e32 v3, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB40_4:
; GFX9-NEXT:    ; implicit-def: $sgpr8
; GFX9-NEXT:    ; implicit-def: $sgpr7
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB40_2
;
; GFX11-LABEL: bitcast_v1i32_to_v4i8_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s1, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB40_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_lshr_b32 s1, s0, 24
; GFX11-NEXT:    s_lshr_b32 s2, s0, 16
; GFX11-NEXT:    s_lshr_b32 s3, s0, 8
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB40_3
; GFX11-NEXT:  .LBB40_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_lshr_b32 s2, s0, 16
; GFX11-NEXT:    s_lshr_b32 s1, s0, 24
; GFX11-NEXT:    s_lshr_b32 s3, s0, 8
; GFX11-NEXT:  .LBB40_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_dual_mov_b32 v0, s0 :: v_dual_mov_b32 v1, s3
; GFX11-NEXT:    v_dual_mov_b32 v2, s2 :: v_dual_mov_b32 v3, s1
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB40_4:
; GFX11-NEXT:    ; implicit-def: $sgpr3
; GFX11-NEXT:    ; implicit-def: $sgpr2
; GFX11-NEXT:    ; implicit-def: $sgpr1
; GFX11-NEXT:    s_branch .LBB40_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <1 x i32> @bitcast_v4i8_to_v1i32_inreg(<4 x i8> inreg %a, i32 inreg %b) {
; GCN-LABEL: bitcast_v4i8_to_v1i32_inreg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    s_cmp_lg_u32 s20, 0
; GCN-NEXT:    s_cbranch_scc0 .LBB41_4
; GCN-NEXT:  ; %bb.1: ; %cmp.false
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_or_b32 s4, s4, s5
; GCN-NEXT:    s_and_b32 s5, s18, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s5, 16
; GCN-NEXT:    s_lshl_b32 s6, s19, 24
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_or_b32 s5, s6, s5
; GCN-NEXT:    s_or_b32 s6, s4, s5
; GCN-NEXT:    s_cbranch_execnz .LBB41_3
; GCN-NEXT:  .LBB41_2: ; %cmp.true
; GCN-NEXT:    s_add_i32 s16, s16, 3
; GCN-NEXT:    s_and_b32 s4, s16, 0xff
; GCN-NEXT:    s_lshl_b32 s5, s17, 8
; GCN-NEXT:    s_add_i32 s18, s18, 3
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_and_b32 s6, s18, 0xff
; GCN-NEXT:    s_addk_i32 s4, 0x300
; GCN-NEXT:    s_lshl_b32 s5, s19, 24
; GCN-NEXT:    s_lshl_b32 s6, s6, 16
; GCN-NEXT:    s_and_b32 s4, s4, 0xffff
; GCN-NEXT:    s_or_b32 s5, s5, s6
; GCN-NEXT:    s_or_b32 s4, s5, s4
; GCN-NEXT:    s_add_i32 s6, s4, 0x3000000
; GCN-NEXT:  .LBB41_3: ; %end
; GCN-NEXT:    v_mov_b32_e32 v0, s6
; GCN-NEXT:    s_setpc_b64 s[30:31]
; GCN-NEXT:  .LBB41_4:
; GCN-NEXT:    ; implicit-def: $sgpr6
; GCN-NEXT:    s_branch .LBB41_2
;
; VI-LABEL: bitcast_v4i8_to_v1i32_inreg:
; VI:       ; %bb.0:
; VI-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; VI-NEXT:    s_cmp_lg_u32 s20, 0
; VI-NEXT:    s_cbranch_scc0 .LBB41_4
; VI-NEXT:  ; %bb.1: ; %cmp.false
; VI-NEXT:    s_and_b32 s4, s16, 0xff
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_and_b32 s5, s18, 0xff
; VI-NEXT:    s_lshl_b32 s6, s19, 8
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s4, s4, 0xffff
; VI-NEXT:    s_lshl_b32 s5, s5, 16
; VI-NEXT:    s_or_b32 s6, s4, s5
; VI-NEXT:    s_cbranch_execnz .LBB41_3
; VI-NEXT:  .LBB41_2: ; %cmp.true
; VI-NEXT:    s_add_i32 s16, s16, 3
; VI-NEXT:    s_add_i32 s18, s18, 3
; VI-NEXT:    s_lshl_b32 s5, s17, 8
; VI-NEXT:    s_and_b32 s6, s16, 0xff
; VI-NEXT:    s_or_b32 s5, s5, s6
; VI-NEXT:    s_and_b32 s6, s18, 0xff
; VI-NEXT:    s_lshl_b32 s4, s19, 24
; VI-NEXT:    s_addk_i32 s5, 0x300
; VI-NEXT:    s_lshl_b32 s6, s6, 16
; VI-NEXT:    s_and_b32 s5, s5, 0xffff
; VI-NEXT:    s_or_b32 s4, s4, s6
; VI-NEXT:    s_or_b32 s4, s4, s5
; VI-NEXT:    s_add_i32 s6, s4, 0x3000000
; VI-NEXT:  .LBB41_3: ; %end
; VI-NEXT:    v_mov_b32_e32 v0, s6
; VI-NEXT:    s_setpc_b64 s[30:31]
; VI-NEXT:  .LBB41_4:
; VI-NEXT:    ; implicit-def: $sgpr6
; VI-NEXT:    s_branch .LBB41_2
;
; GFX9-LABEL: bitcast_v4i8_to_v1i32_inreg:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_cmp_lg_u32 s20, 0
; GFX9-NEXT:    s_cbranch_scc0 .LBB41_4
; GFX9-NEXT:  ; %bb.1: ; %cmp.false
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_or_b32 s4, s4, s5
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s5, s6
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:    s_cbranch_execnz .LBB41_3
; GFX9-NEXT:  .LBB41_2: ; %cmp.true
; GFX9-NEXT:    s_add_i32 s16, s16, 3
; GFX9-NEXT:    s_and_b32 s4, s16, 0xff
; GFX9-NEXT:    s_lshl_b32 s5, s17, 8
; GFX9-NEXT:    s_add_i32 s18, s18, 3
; GFX9-NEXT:    s_or_b32 s4, s5, s4
; GFX9-NEXT:    s_and_b32 s5, s18, 0xff
; GFX9-NEXT:    s_lshl_b32 s6, s19, 8
; GFX9-NEXT:    s_or_b32 s5, s6, s5
; GFX9-NEXT:    s_addk_i32 s4, 0x300
; GFX9-NEXT:    s_addk_i32 s5, 0x300
; GFX9-NEXT:    s_and_b32 s4, s4, 0xffff
; GFX9-NEXT:    s_lshl_b32 s5, s5, 16
; GFX9-NEXT:    s_or_b32 s6, s4, s5
; GFX9-NEXT:  .LBB41_3: ; %end
; GFX9-NEXT:    v_mov_b32_e32 v0, s6
; GFX9-NEXT:    s_setpc_b64 s[30:31]
; GFX9-NEXT:  .LBB41_4:
; GFX9-NEXT:    ; implicit-def: $sgpr6
; GFX9-NEXT:    s_branch .LBB41_2
;
; GFX11-LABEL: bitcast_v4i8_to_v1i32_inreg:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    s_cmp_lg_u32 s16, 0
; GFX11-NEXT:    s_mov_b32 s4, 0
; GFX11-NEXT:    s_cbranch_scc0 .LBB41_4
; GFX11-NEXT:  ; %bb.1: ; %cmp.false
; GFX11-NEXT:    s_and_b32 s5, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s6, s1, 8
; GFX11-NEXT:    s_and_b32 s7, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s8, s3, 8
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_or_b32 s6, s7, s8
; GFX11-NEXT:    s_and_b32 s5, s5, 0xffff
; GFX11-NEXT:    s_lshl_b32 s6, s6, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s5, s6
; GFX11-NEXT:    s_and_not1_b32 vcc_lo, exec_lo, s4
; GFX11-NEXT:    s_cbranch_vccnz .LBB41_3
; GFX11-NEXT:  .LBB41_2: ; %cmp.true
; GFX11-NEXT:    s_add_i32 s0, s0, 3
; GFX11-NEXT:    s_add_i32 s2, s2, 3
; GFX11-NEXT:    s_and_b32 s0, s0, 0xff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 8
; GFX11-NEXT:    s_and_b32 s2, s2, 0xff
; GFX11-NEXT:    s_lshl_b32 s3, s3, 8
; GFX11-NEXT:    s_or_b32 s0, s1, s0
; GFX11-NEXT:    s_or_b32 s1, s3, s2
; GFX11-NEXT:    s_addk_i32 s0, 0x300
; GFX11-NEXT:    s_addk_i32 s1, 0x300
; GFX11-NEXT:    s_and_b32 s0, s0, 0xffff
; GFX11-NEXT:    s_lshl_b32 s1, s1, 16
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_or_b32 s5, s0, s1
; GFX11-NEXT:  .LBB41_3: ; %end
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_mov_b32_e32 v0, s5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
; GFX11-NEXT:  .LBB41_4:
; GFX11-NEXT:    ; implicit-def: $sgpr5
; GFX11-NEXT:    s_branch .LBB41_2
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}
