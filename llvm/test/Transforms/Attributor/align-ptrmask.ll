; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=attributor -S < %s | FileCheck %s

define ptr @align_ptrmask_back_no_prop(ptr align 2 %x, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define noundef nonnull align 8 dereferenceable(4) ptr @align_ptrmask_back_no_prop(
; CHECK-SAME: ptr nofree writeonly align 2 [[X:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP1]], i64 -32, i64 -8
; CHECK-NEXT:    [[SEL1:%.*]] = select i1 [[CMP2]], i64 [[SEL]], i64 -16
; CHECK-NEXT:    [[P:%.*]] = tail call noundef nonnull align 8 dereferenceable(4) ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef [[SEL1]]) #[[ATTR3:[0-9]+]]
; CHECK-NEXT:    store float 1.000000e+00, ptr [[P]], align 8
; CHECK-NEXT:    ret ptr [[P]]
;
  %sel = select i1 %cmp1, i64 -32, i64 -8
  %sel1 = select i1 %cmp2, i64 %sel, i64 -16
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 %sel1)
  store float 1.0, ptr %p, align 8
  ret ptr %p
}

define ptr @align_ptrmask_back_prop(ptr align 2 %x, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define noundef nonnull align 16 dereferenceable(4) ptr @align_ptrmask_back_prop(
; CHECK-SAME: ptr nofree writeonly align 16 [[X:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP1]], i64 -32, i64 -8
; CHECK-NEXT:    [[SEL1:%.*]] = select i1 [[CMP2]], i64 [[SEL]], i64 -16
; CHECK-NEXT:    [[P:%.*]] = tail call noundef nonnull align 16 dereferenceable(4) ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef [[SEL1]]) #[[ATTR3]]
; CHECK-NEXT:    store float 1.000000e+00, ptr [[P]], align 16
; CHECK-NEXT:    ret ptr [[P]]
;
  %sel = select i1 %cmp1, i64 -32, i64 -8
  %sel1 = select i1 %cmp2, i64 %sel, i64 -16
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 %sel1)
  store float 1.0, ptr %p, align 16
  ret ptr %p
}

define ptr @align_ptrmask_forward_mask(ptr align 2 %x, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define align 8 ptr @align_ptrmask_forward_mask(
; CHECK-SAME: ptr nofree readnone align 2 [[X:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP1]], i64 -32, i64 -8
; CHECK-NEXT:    [[SEL1:%.*]] = select i1 [[CMP2]], i64 [[SEL]], i64 -16
; CHECK-NEXT:    [[P:%.*]] = tail call align 8 ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef [[SEL1]]) #[[ATTR3]]
; CHECK-NEXT:    ret ptr [[P]]
;
  %sel = select i1 %cmp1, i64 -32, i64 -8
  %sel1 = select i1 %cmp2, i64 %sel, i64 -16
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 %sel1)
  ret ptr %p
}

define ptr @align_ptrmask_forward_ptr(ptr align 16 %x, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define align 16 ptr @align_ptrmask_forward_ptr(
; CHECK-SAME: ptr nofree readnone align 16 [[X:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR1]] {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP1]], i64 -32, i64 -8
; CHECK-NEXT:    [[SEL1:%.*]] = select i1 [[CMP2]], i64 [[SEL]], i64 -16
; CHECK-NEXT:    [[P:%.*]] = tail call align 16 ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef [[SEL1]]) #[[ATTR3]]
; CHECK-NEXT:    ret ptr [[P]]
;
  %sel = select i1 %cmp1, i64 -32, i64 -8
  %sel1 = select i1 %cmp2, i64 %sel, i64 -16
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 %sel1)
  ret ptr %p
}

define ptr @align_ptrmask_forward_nonconst_mask(ptr align 8 %x, i64 %y, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define align 8 ptr @align_ptrmask_forward_nonconst_mask(
; CHECK-SAME: ptr nofree readnone align 8 [[X:%.*]], i64 [[Y:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR1]] {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP1]], i64 -32, i64 [[Y]]
; CHECK-NEXT:    [[SEL1:%.*]] = select i1 [[CMP2]], i64 [[SEL]], i64 -16
; CHECK-NEXT:    [[P:%.*]] = tail call align 8 ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 [[SEL1]]) #[[ATTR3]]
; CHECK-NEXT:    ret ptr [[P]]
;
  %sel = select i1 %cmp1, i64 -32, i64 %y
  %sel1 = select i1 %cmp2, i64 %sel, i64 -16
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 %sel1)
  ret ptr %p
}

define ptr @align_ptrmask_back_nonconst_mask(ptr align 4 %x, i64 %y, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define noundef nonnull align 8 dereferenceable(4) ptr @align_ptrmask_back_nonconst_mask(
; CHECK-SAME: ptr nofree writeonly align 8 [[X:%.*]], i64 [[Y:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP1]], i64 -32, i64 [[Y]]
; CHECK-NEXT:    [[SEL1:%.*]] = select i1 [[CMP2]], i64 [[SEL]], i64 -16
; CHECK-NEXT:    [[P:%.*]] = tail call noundef nonnull align 8 dereferenceable(4) ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 [[SEL1]]) #[[ATTR3]]
; CHECK-NEXT:    store float 1.000000e+00, ptr [[P]], align 8
; CHECK-NEXT:    ret ptr [[P]]
;
  %sel = select i1 %cmp1, i64 -32, i64 %y
  %sel1 = select i1 %cmp2, i64 %sel, i64 -16
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 %sel1)
  store float 1.0, ptr %p, align 8
  ret ptr %p
}

define ptr @align_ptrmask_back_const_back_noprop(ptr align 4 %x, i64 %y, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define noundef nonnull align 8 dereferenceable(4) ptr @align_ptrmask_back_const_back_noprop(
; CHECK-SAME: ptr nofree writeonly align 4 [[X:%.*]], i64 [[Y:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[P:%.*]] = tail call noundef nonnull align 8 dereferenceable(4) ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef -8) #[[ATTR3]]
; CHECK-NEXT:    store float 1.000000e+00, ptr [[P]], align 8
; CHECK-NEXT:    ret ptr [[P]]
;
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 -8)
  store float 1.0, ptr %p, align 8
  ret ptr %p
}

define ptr @align_ptrmask_back_const_back_prop(ptr align 4 %x, i64 %y, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define noundef nonnull align 8 dereferenceable(4) ptr @align_ptrmask_back_const_back_prop(
; CHECK-SAME: ptr nofree writeonly align 8 [[X:%.*]], i64 [[Y:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[P:%.*]] = tail call noundef nonnull align 8 dereferenceable(4) ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef -2) #[[ATTR3]]
; CHECK-NEXT:    store float 1.000000e+00, ptr [[P]], align 8
; CHECK-NEXT:    ret ptr [[P]]
;
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 -2)
  store float 1.0, ptr %p, align 8
  ret ptr %p
}

define ptr @align_ptrmask_back_const_forward_mask(ptr align 4 %x, i64 %y, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define align 8 ptr @align_ptrmask_back_const_forward_mask(
; CHECK-SAME: ptr nofree readnone align 4 [[X:%.*]], i64 [[Y:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR1]] {
; CHECK-NEXT:    [[P:%.*]] = tail call align 8 ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef -8) #[[ATTR3]]
; CHECK-NEXT:    ret ptr [[P]]
;
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 -8)
  ret ptr %p
}

define ptr @align_ptrmask_back_const_forward_ptr(ptr align 16 %x, i64 %y, i1 %cmp1, i1 %cmp2) {
; CHECK-LABEL: define align 16 ptr @align_ptrmask_back_const_forward_ptr(
; CHECK-SAME: ptr nofree readnone align 16 [[X:%.*]], i64 [[Y:%.*]], i1 [[CMP1:%.*]], i1 [[CMP2:%.*]]) #[[ATTR1]] {
; CHECK-NEXT:    [[P:%.*]] = tail call align 16 ptr @llvm.ptrmask.p0.i64(ptr [[X]], i64 noundef -8) #[[ATTR3]]
; CHECK-NEXT:    ret ptr [[P]]
;
  %p = tail call ptr @llvm.ptrmask.p0.i64(ptr %x, i64 -8)
  ret ptr %p
}
